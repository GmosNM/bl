/*
TODO:
miniaudio
rect rotation
*/

#import "extra/glfw3"
#import "extra/draw"

WINDOW_WIDTH  :: 800;
WINDOW_HEIGHT :: 600;
WINDOW_TITLE  :: "Gunner!";
window: *glfw.Window;

ship_texture: draw.Texture;
font: draw.Font;
font_alpha: draw.Font;

main :: fn () s32 {
    // Initialize GLFW.
    if glfw.Init() == 0 {
        print_glfw_error();
        panic("Cannot initialize Glfw.\n");
    }

    // Create GLFW window.
    glfw.WindowHint(glfw.CONTEXT_VERSION_MAJOR, 3);
    glfw.WindowHint(glfw.CONTEXT_VERSION_MINOR, 3);
    glfw.WindowHint(glfw.OPENGL_FORWARD_COMPAT, 1);
    glfw.WindowHint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE);
    glfw.WindowHint(glfw.DOUBLEBUFFER, glfw.TRUE);
    glfw.WindowHint(glfw.RESIZABLE, glfw.FALSE);

    window = glfw.CreateWindow(
        WINDOW_WIDTH,
        WINDOW_HEIGHT,
        std.strtoc(WINDOW_TITLE), // Convert bl string_view to C string.
        null,
        null
    );

    if !window {
        print_glfw_error();
        panic("Cannot create GLFW window.\n");
    }

    glfw.MakeContextCurrent(window);
    glfw.SwapInterval(1);

    draw.init(WINDOW_WIDTH, WINDOW_HEIGHT);

    err: Error;
    err = draw.texture_init(&ship_texture, ".", "ship.png");
    if err { panic(err); }
    defer draw.texture_terminate(&ship_texture);

    err = draw.font_init_at_size(&font, ".", "font.ttf", 60, draw.FontAntialiasing.SUBPIXEL);
    if err { panic(err); }
    defer draw.font_terminate(&font);

    err = draw.font_init_at_size(&font_alpha, ".", "font.ttf", 80, draw.FontAntialiasing.ALPHA);
    if err { panic(err); }
    defer draw.font_terminate(&font_alpha);

    angle: f32;

    // Game loop comes here!
    loop glfw.WindowShouldClose(window) == 0 {
        glfw.PollEvents();
        using draw;
        using glm;

        // Clear the frame.
        clear_color();

        set_shader_texture(&ship_texture);
        rect_centered_rotated(400.f, 400.f, 100.f, 68.f, angle);
        angle += 0.1f;

        set_shader_font(&font);
        text(200.f, 200.f, "Hello world!", v4.{1.f, 0.f, 1.f, 1.f});

        set_shader_font(&font_alpha);
        text(200.f, 300.f, "Hello sailor!", v4.{0.f, 1.f, 1.f, 1.f});

        flush();

        // Swap buffers to see rendered stuff.
        glfw.SwapBuffers(window);

        // Since we use temporary allocator, we should reset it's internal storage
        // each frame.
        temporary_reset();
    }

    // Termination
    draw.terminate();
    glfw.DestroyWindow(window);
    glfw.Terminate();
    return 0;
}

#private
// Following code is private to this file.

print_glfw_error :: fn () {
    cstr: *u8;
    glfw.GetError(&cstr);

    if cstr == null { return; }
    tmp := string_view.{ auto C.strlen(auto cstr), auto cstr };
    print_err("GLFW Error: %", tmp);
}
