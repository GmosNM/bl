// Intrinsics
sin :: fn (v: f32) f32 #intrinsic "sin";
memcpy :: fn (dest: *u8, src: *u8, len: s64) void #intrinsic "memcpy";

/*
    Comptime blocks before static if.

    1) creates scope nesting
        symbols from comptime block can be referenced only from this block

    2) instruction set:

            ...
            comptimebegin
            br 1
        1:  call print
            br 2
        2:  comtimeend
            ...

*/

#comptime {
    print("This is executed only in compile time!\n");
}

// comtime if
#comptime if true {
    print("This is executed only in compile time!\n");
} else {
}

// comtime function call
#comptime foo();




// Function tags
my_command :: fn (buf: *Buffer, args: ...string) bool
#tags COMMAND 
#meta "This is my cool command!" 
{
    return true;
}

main :: fn () s32 {
    fns :: tagged_functions(); // []Any
    loop i := 0; i < fns.len; i += 1 {
        f :: fns[i];
        if f.type_info.tag & COMMAND {
            print("%\n", f.type_info.meta)
        }
    }
    return 0;
}