#+TITLE: Biscuit Documentation
#+AUTHOR: Martin Derail
#+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>

# now prints out the previously disabled (toc:nil) table of contents.
#+TOC: headlines 2
* About
  The Biscuit Language (BL) is simple imperative programming language.

* Instalation
** Requirements
  - git
  - CMake
  - LLVM
  - [[https://github.com/travisdoor/bobject][bobject]]
  - [[http://www.dyncall.org][dyncall]]
  - GCC/CLANG/Visual Studio compiler

** Linux
   - Install bobject.
   - Install dyncall.
   - Install LLVM dev packages.
   - Download and compile bl.
   
   #+BEGIN_EXAMPLE
   git clone https://github.com/travisdoor/bl.git
   cd bl
   mkdir build
   cd build
   cmake ..
   make
   #+END_EXAMPLE

   - Add 'bl/api' and 'bl/bin' into the system PATH

** Mac's
   - Install bobject.
   - Install dyncall.
   - Install LLVM dev packages.
   - Download and compile bl.
   
   #+BEGIN_EXAMPLE
   git clone https://github.com/travisdoor/bl.git
   cd bl
   mkdir build
   cd build
   cmake ..
   make
   #+END_EXAMPLE

   - Add 'bl/api' and 'bl/bin' into the system PATH

** TODO Windows 

* Compiler
** Usage
   #+BEGIN_EXAMPLE
   blc [options] <source-files>
   #+END_EXAMPLE

   | Option              | Description                             |
   |---------------------+-----------------------------------------|
   | -h, -help           | Print usage information and exit.       |
   | -ast-dump           | Print AST.                              |
   | -lex-dump           | Print output of lexer.                  |
   | -mir-pre-dump       | Print output of MIR pre analyze stage.  |
   | -mir-post-dump      | Print output of MIR post analyze stage. |
   | -syntax-only        | Check syntax and exit.                  |
   | -emit-llvm          | Write LLVM-IR to file.                  |
   | -emit-mir           | Write MIR to file.                      |
   | -no-bin             | Don't write binary to disk.             |
   | -no-warning         | Ignore all warnings.                    |
   | -verbose            | Verbose mode.                           |
   | -no-api             | Don't load internal api.                |
   | -force-test-to-llvm | Force llvm generation of unit tests.    |
   | -run                | Execute 'main' method in compile time.  |
   | -run-tests          | Execute all unit tests in compile time. |

** TODO Compile-time execution

* Language
** Base syntax
   Declarations and mutability:
   #+BEGIN_EXAMPLE
   <name>: <type>;              // mutable declaration
   <name>: [type] = <value>;    // mutable declaration
   <name>: [type] : <value>;    // immutable declaration 
   #+END_EXAMPLE
   
   Data type is optional when we specify some value.

   #+BEGIN_EXAMPLE
   foo: s32; // data type required
   foo := 10; // data type based on value type (in this case s32)
   #+END_EXAMPLE

** Comments
   #+BEGIN_EXAMPLE
   // this is line comment
   /*
    this
    is
    multi line
    comment
   */
   #+END_EXAMPLE

** Operators
*** Binary
   | Symbol | Relevant for types | Description         |
   |--------+--------------------+---------------------|
   | \plus  | Integers, Floats   | Addition.           |
   | \minus | Integers, Floats   | Subtraction.        |
   | \star  | Integers, Floats   | Multiplication.     |
   | \slash | Integers, Floats   | Division.           |
   | %      | Integers, Floats   | Remainder division. |

*** TODO Unary

** Data types
*** Fundamental data types
    | Name  | Description                   |
    |-------+-------------------------------|
    | s8    | Signed 8-bit number.          |
    | s16   | Signed 16-bit number.         |
    | s32   | Signed 32-bit number.         |
    | s64   | Signed 64-bit number.         |
    | u8    | Unsigned 8-bit number.        |
    | u16   | Unsigned 16-bit number.       |
    | u32   | Unsigned 32-bit number.       |
    | u64   | Unsigned 64-bit number.       |
    | usize | Unsigned 64-bit size.         |
    | bool  | Boolean. (true/fasle)         |
    | f32   | 32-bit floating point number  |
    | f64   | 64-bit floating point number. |


*** Pointers
    Represents the address of some allocated data.

    #+BEGIN_EXAMPLE
    i := 666;
    i_ptr : *s32 = &i; // taking the address of 'i' variable and set 'i_ptr'
    j := *i_ptr;       // pointer dereferencing 
    #+END_EXAMPLE
    
*** Function type
    Type of function. 

    #+BEGIN_EXAMPLE
    fn ([arguments]) [return type]

    // type of function without arguments and without return value
    fn ()             
    
    // type of function without arguments, returning value of 's32' type
    fn () s32

    // type of function with two arguments, returning value of 's32' type
    fn (s32, bool) s32 
    #+END_EXAMPLE

** Variables
   Example of variable allocated on stack.

   #+BEGIN_EXAMPLE
   i : s32 = 666; 
   i := 666; // type is optional here
   #+END_EXAMPLE

** Constants
   Example of constant allocated on stack. Constant must be initialized and cannot be changed later.

   #+BEGIN_EXAMPLE
   i : s32 : 666; 
   i :: 666; // type is optional here
   #+END_EXAMPLE
   
** Functions
*** Named function
   Examples of named function.

   #+BEGIN_EXAMPLE
   foo :: fn () {
   };

   bar :: fn (i: s32) {
     i; // use i
   };

   baz :: fn (i: s32) s32 {
     return i;
   };
   
   foo();
   bar(666);
   j := baz(666);
   #+END_EXAMPLE

*** Anonymous function
   Example of anonymous function.

   #+BEGIN_EXAMPLE
   i := fn (i: s32) s32 {
     return i;
   } (666);
   #+END_EXAMPLE

** TODO Ifs 
** TODO Loops
