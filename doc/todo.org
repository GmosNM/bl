* TASKS
- [X] Enum [9/9]
  - [X] Enum declaration
  - [X] Enum variant node
  - [X] Enum type generation 
  - [X] Enum instance (unitialized) should have first enum value if there is one 
  - [X] Enum unit test 
  - [X] Enum member access 
  - [X] Enum base expression generation (only numbers accepted for now)
  - [X] All expressions passed into evaluation must be validated by check as consts 
  - [X] Check enum non-existing variant expression  
- [-] Struct [8/12]
  - [X] Self containing struct member should generate error: struct a { mem a; } -> leads to endless recursion
  - [X] Member ref expression node 
  - [X] Member ref expression node parsing
  - [X] Struct member node
  - [X] Public and private struct members parsing.
  - [X] Struct member access
  - [X] Handle invalid found types [[file:~/Develop/bl/libbl/src/linker.c::found%20%3D%20satisfy_decl_ref(cnt,%20expr)%3B][here]]
  - [ ] *Member access type checking* [[7][here]]
  - [X] Check if members are in current scope or public [[file:~/Develop/bl/libbl/src/linker.c::satisfy_member(context_t%20*cnt,%20bl_node_t%20*expr)][here]] -> generate error if member is inaccessible  
  - [ ] Initialization expression for struct [[file:~/Develop/bl/libbl/src/parser.c::/*%20TODO:%20parse%20initialization%20expression%20here%20*/][here]] 
  - [ ] Check for recursions over multiple structs struct A { b B } struct B { a A } -> generate error
  - [ ] All public members in structure must have also public types -> print error 
- [-] Array [7/9]
  - [X] Parsing
  - [X] Array elem expression parsing 
  - [X] LLVM generation 
  - [X] Type declaration
  - [ ] Multidimensional arrays??? 
    decl_var should contain array with dimension sizes do recalculate positions later
    -> define helper methods for adding dimensions
  - [ ] Array type checking (size and type) 
  - [X] Use expression reference instead number in [N] 
  - [X] Array definition size as const expr 
  - [X] Handle zero sized arrays -> generate error (in check.c)
- [ ] Casting [0/1]
  - [ ] Parsing
- [ ] For loop [0/1]
  - [ ] Parsing for (i i32 in 0..10) {}
- [X] Global/local const [5/5]
  - [X] Unique node
  - [X] Parsing
  - [X] Visitor and linking
  - [X] Evaluation
  - [X] LLVM generation
- [ ] Variable argument type [0/1]
  - [ ] Parsing
- [-] Other [4/10]
  - [X] Constant "variable" declaration
  - [ ] i16 and u16
  - [X] Check const = ? -> constants cannot be modified at runtime!!!
  - [X] Improve unit testing 
  - [ ] Separate node for func params 
  - [ ] Type casting 
  - [ ] Single character parsing ('c') 
  - [ ] Linux/MacOS installation in CMAKE
  - [X] Constant expression evaluator
  - [ ] Implicit numeric constant casting
- [-] Unary operator (separate expression node in ast) [2/4]
  - [X] Ast node
  - [X] Parsing
  - [ ] Check validity (not valid for struct references)
  - [ ] Evaluation
- [-] Value evaluation [1/2]
  - [ ] String constant evaluation 
  - [X] Evaluate const init expressions 
- [-] Windows port!!! [2/3]
  - [X] BObject compilation
  - [X] LLVM instalation
  - [ ] Linker fix
- [-] Pointer [2/3]
  - [ ] Parse unary address-of and dereferencing
  - [X] Pointer type fundamental
  - [X] Pointer type ref
- [ ] Check numeric limits
- [ ] Improve error messages for invalid syntax (check extremes like 'var 666 = i32')
- [ ] Set size of size_t by target machine architecture [[file:~/Develop/bl/libbl/src/llvm_generator.c::if%20(sizeof(size_t)%20%3D%3D%204)%20{][here]]  
- [X] Preprocesor #load [4/4]
  - [X] Ast representatio
  - [X] Parsing
  - [X] Duplicit load detection 
  - [X] Search for files in path
- [-] Using [1/2]
  - [X] Ast node for using
  - [ ] Parsing 
- [-] Sizeof buildin [4/5]
  - [X] Ast node
  - [X] Parsing
  - [X] Generation
  - [X] Size_t type 32/64 bit
  - [ ] Evaluation

* BUGS [2/3]
- [ ] When enumerator variant is used as array size, compiler don't track usage of this enum and warn user about unused declaration.
- [X] Cannot evaluate array size inside structures. 
- [X] Unable to return struct member copy from the function

* PIPELINE
- file loader
- lexer
- token printer
- parser
- preprocessor 
- linker
- ast printer
- check
- const expr evaluation
- llvm generator
- llvm jit execute
- llvm byte-code writer
- llvm linker
- llvm native bin builder
  
* IDEAS
- implicit casting pointer to bool: if (some_PT) {}
- static array
- zero initialized statc arrays??
