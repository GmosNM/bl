#import "std/arg_parser"

// Command line arguments context.
Args :: struct #base std.ArgParserCtx {
    rc: s32;
}

g_args: Args;

help :: 
    "Benchmark tool\n"
    "Usage:\n"
    "  bench [options] <executable>\n";

main :: fn () s32 {
	defer std.tmp_release();
    defer std.arg_parser_ctx_terminate(&g_args);
    parser :: std.arg_parser_new(help);
    defer std.arg_parser_delete(parser);

    // Add new argument.
    std.arg_parser_add(
        parser, 
        "-c", 
        "--count", 
        "Run count.",
        &fn (_: std.ArgParser, in_args: []string_view, ctx: *std.ArgParserCtx) (s32, Error) {
            a: *Args = auto ctx;
            if in_args.len < 2 { return 0, error("Expected run count as number."); }
            a.rc = auto std.str_to_s64(in_args[1]);
            return 2, OK;
        });

    g_args.rc = 100;

    state :: std.arg_parser_run(parser, command_line_arguments, &g_args, 1);
    if state {
        print_err(state);
        std.arg_parser_print_help(parser);
        return 1;
    }
    if g_args.positional.len == 0 { 
        print_err("Expected executable name.");
        std.arg_parser_print_help(parser);
        return 2;
    }
    if g_args.help { return 0; }

    cmd :: tprint("% 1>nul", g_args.positional[0]);
    ec := 0;
    runtime_min := 1000000.0;
    runtime_max := 0.001;
    runtime_total := 0.0;
    prev_perc := -1;
    loop i := 0; i < g_args.rc; i += 1 {
        perc :: cast(s32)((cast(f32) i + 1.f) / cast(f32) g_args.rc * 100.f);
        if perc != prev_perc {
			print("Run [%%]\n", perc, "%");
            prev_perc = perc;
        }
        measure_elapsed_ms_begin();
        if os_execute(cmd) != 0 { ec += 1; }
        runtime :: measure_elapsed_ms_end();
		runtime_min = std.min(runtime_min, runtime);
		runtime_max = std.max(runtime_max, runtime);
        runtime_total += runtime;
    }
    print("================================================================================\n");
    print(
        "% executed % times.\n"
        "Error count; %.\n"
        "Runtime min: % ms.\n"
        "Runtime max: % ms.\n"
        "AVG:         % ms.\n", g_args.positional[0], g_args.rc, ec, runtime_min, runtime_max, runtime_total / cast(f64) g_args.rc
        );
    print("================================================================================\n");
    return 0;
}
