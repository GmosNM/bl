//************************************************************************************************
// BL - SDL2
//
// File:   render.bl
// Author: Martin Dorazil
// Date:   14.2.18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

public module sdl2 {
  public enum renderer_flags i32 {
    Software      = 0x00000001,
    Accelerated   = 0x00000002,
    PresentVSync  = 0x00000004,
    TargetTexture = 0x00000008
  }

  public struct renderer_t {
    handle *void 
  }

  public struct texture_t {
    handle *void 
  }

  public fn create_renderer(window window_t, index i32, flags i32) *renderer_t {
    return c::SDL_CreateRenderer(window.handle, index, flags);
  }

  public fn destroy_renderer(renderer *renderer_t) {
    c::SDL_DestroyRenderer(renderer);
  }

  public fn create_texture_from_surface(renderer *renderer_t, surface *surface_t) *texture_t {
    return c::SDL_CreateTextureFromSurface(renderer, surface);
  }

  public fn destroy_texture(texture *texture_t) {
    c::SDL_DestroyTexture(texture);
  }

  public fn render_present(renderer *renderer_t) {
    c::SDL_RenderPresent(renderer);
  }

  public fn set_render_draw_color(renderer *renderer_t, r i32, g i32, b i32, a i32) i32 {
    return c::SDL_SetRenderDrawColor(renderer, r, g, b, a);
  }

  public fn render_clear(renderer *renderer_t) i32 {
    return c::SDL_RenderClear(renderer);
  }

  public fn render_copy(renderer *renderer_t, texture *texture_t, srcrect *rect_t, destrect *rect_t) i32 {
    return c::SDL_RenderCopy(renderer, texture, srcrect, destrect);
  }
}