//************************************************************************************************
// BL - STD 
//
// File:   sdl2.bl
// Author: Martin Dorazil
// Date:   14.2.18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

public module sdl2 {
  module c {
    public extern fn SDL_Init(flags i32) i32;

    public extern fn SDL_Quit();

    public extern fn SDL_CreateWindow(title string,
                                      x i32,
				      y i32,
				      w i32,
				      h i32,
				      flags i32) ptr;

    public extern fn SDL_DestroyWindow(handle ptr);

    public extern fn SDL_GetError() string;

    public extern fn SDL_Delay(ms i32);

    public extern fn SDL_PumpEvents();

    public extern fn SDL_CreateRenderer(window ptr,
                                        index i32,
                                        flags i32) ptr;

    public extern fn SDL_DestroyRenderer(handle ptr);

    public extern fn SDL_SetRenderDrawColor(renderer ptr,
                                            r i32,
                                            g i32,
                                            b i32,
                                            a i32) i32;

    public extern fn SDL_RenderClear(renderer ptr) i32;

    public extern fn SDL_RenderPresent(renderer ptr);
  }

  public enum init_flags_e i32 {
    Timer          = 0x00000001,
    Audio 	   = 0x00000010,
    Video 	   = 0x00000020,
    Joystick	   = 0x00000200, 
    Haptic 	   = 0x00001000,
    GameController = 0x00002000,
    Events 	   = 0x00004000,
    NoParachute    = 0x00100000,
    Everything 	   = Timer | Audio | Video | Joystick | Haptic | GameController | Events
  }

  public enum window_flags_e i32 {
    Fullscreen        = 0x00000001,
    OpenGL            = 0x00000002,
    Shown             = 0x00000004,
    Hidden            = 0x00000008,
    Borderless        = 0x00000010,
    Resizable         = 0x00000020,
    Minimized         = 0x00000040,
    Maximized         = 0x00000080,
    InputGrabbed      = 0x00000100,
    InputFocus        = 0x00000200,
    MouseFocus        = 0x00000400,
    FullscreenDesktop = (Fullscreen | 0x00001000),
    Foreign           = 0x00000800,
    AllowHighdpi      = 0x00002000,
    MouseCapture      = 0x00004000,
    AlwaysOnTop       = 0x00008000,
    SkipTaskbar       = 0x00010000,
    Utility           = 0x00020000,
    Tooltip           = 0x00040000,
    PopupMenu         = 0x00080000,
    Vulkan            = 0x10000000
  }

  public enum renderer_flags i32 {
    Software      = 0x00000001,
    Accelerated   = 0x00000002,
    PresentVSync  = 0x00000004,
    TargetTexture = 0x00000008
  }
  
  public struct window_t {
    handle ptr
  }

  public struct renderer_t {
    handle ptr
  }

  public fn init(flags i32) i32 {
    return c::SDL_Init(flags);
  }

  public fn quit() {
    c::SDL_Quit();
  }

  public fn create_window(title string, x i32, y i32, w i32, h i32, flags i32) window_t {
    var win window_t;
    win.handle = c::SDL_CreateWindow(title, x, y, w, h, flags);
    return win;
  }

  public fn destroy_window(win window_t) {
    c::SDL_DestroyWindow(win.handle);
  }

  public fn create_renderer(window window_t, index i32, flags i32) renderer_t {
    var r renderer_t;
    r.handle = c::SDL_CreateRenderer(window.handle, index, flags);
    return r;
  }

  public fn destroy_renderer(renderer renderer_t) {
    c::SDL_DestroyRenderer(renderer.handle);
  }

  public fn get_error() string {
    return c::SDL_GetError();
  }

  public fn delay(ms i32) {
    c::SDL_Delay(ms);
  }

  public fn pump_events() {
    c::SDL_PumpEvents();
  }

  public fn set_render_draw_color(renderer renderer_t, r i32, g i32, b i32, a i32) i32 {
    return c::SDL_SetRenderDrawColor(renderer.handle, r, g, b, a);
  }

  public fn render_clear(renderer renderer_t) i32 {
    return c::SDL_RenderClear(renderer.handle);
  }

  public fn render_present(renderer renderer_t) {
    c::SDL_RenderPresent(renderer.handle);
  }
}
