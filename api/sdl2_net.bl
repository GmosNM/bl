//************************************************************************************************
// bl
//
// File:   sdl2_net.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#link "SDL2_net"

IPaddress : struct {
  host s32,
  port u16
};

SDLNet_GenericSocket : struct {
  _handle *void
};

UDPsocket : struct {
  base SDLNet_GenericSocket
};

TCPsocket : struct {
  base SDLNet_GenericSocket
};

SDLNet_SocketSet : struct {
  _handle *void
};

UDPpacket : struct {
  channel s32,
  data 	 *u8,
  len 	  s32,
  maxlen  s32,
  status  s32,
  address IPaddress
};

// utils
SDLNet_TCP_AddSocket : fn (set *SDLNet_SocketSet, sock *TCPsocket) s32 {
  return SDLNet_AddSocket(set, cast(*SDLNet_GenericSocket) sock);
};

SDLNet_UDP_AddSocket : fn (set *SDLNet_SocketSet, sock *UDPsocket) s32 {
  return SDLNet_AddSocket(set, cast(*SDLNet_GenericSocket) sock);
};

SDLNet_TCP_DelSocket : fn (set *SDLNet_SocketSet, sock *TCPsocket) s32 {
  return SDLNet_DelSocket(set, cast(*SDLNet_GenericSocket) sock);
};

SDLNet_UDP_DelSocket : fn (set *SDLNet_SocketSet, sock *UDPsocket) s32 {
  return SDLNet_DelSocket(set, cast(*SDLNet_GenericSocket) sock);
};

SDLNet_Init	          fn () s32 : #extern;
SDLNet_Quit 	          fn () : #extern;
SDLNet_GetError           fn () *char : #extern;
SDLNet_ResolveHost        fn (*IPaddress, *char, u16) s32 : #extern;
SDLNet_AllocPacket        fn (s32) *UDPpacket : #extern;
SDLNet_FreePacket         fn (*UDPpacket) : #extern;

SDLNet_UDP_Open           fn (u16) *UDPsocket : #extern;
SDLNet_UDP_Recv           fn (*UDPsocket, *UDPpacket) s32 : #extern;
SDLNet_UDP_Send           fn (*UDPsocket, s32, *UDPpacket) s32 : #extern;

SDLNet_TCP_Open           fn (*IPaddress) *TCPsocket : #extern;
SDLNet_TCP_Close          fn (*TCPsocket) : #extern;
SDLNet_TCP_Accept         fn (*TCPsocket) *TCPsocket : #extern;
SDLNet_TCP_GetPeerAddress fn (*TCPsocket) *IPaddress : #extern;
SDLNet_TCP_Recv 	  fn (*TCPsocket, *void, s32) s32 : #extern;
SDLNet_TCP_Send 	  fn (*TCPsocket, *void, s32) s32 : #extern;
SDLNet_AllocSocketSet 	  fn (s32) *SDLNet_SocketSet : #extern;
SDLNet_FreeSocketSet 	  fn (*SDLNet_SocketSet) : #extern;
SDLNet_AddSocket 	  fn (*SDLNet_SocketSet, *SDLNet_GenericSocket) s32 : #extern;
SDLNet_DelSocket	  fn (*SDLNet_SocketSet, *SDLNet_GenericSocket) s32 : #extern;
SDLNet_CheckSockets	  fn (*SDLNet_SocketSet, s32) s32 : #extern;