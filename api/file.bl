//************************************************************************************************
// bl
//
// File:   file.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "libc.bl"

/*
 * File handler
 */
File : struct {
  handle *void,		
  size 	  size_t,	// file size in bytes
  valid   bool		// true when file is valid
};

/*
 * Open file. 
 */
file_open : fn (filepath string) *File {
  read : "r";

  // get size of file stream in bytes */
  fsize : fn (handle *void) size_t {
    fseek(handle, 0, SEEK_END); 
    size := ftell(handle);
    fseek(handle, 0, SEEK_SET); 
    return size;
  };

  tmp := cast(*File) malloc(sizeof(File));
  tmp->handle = fopen(filepath, read);
  if tmp->handle == null {
    tmp->valid = false;
    tmp->size = 0;
  } else {
    tmp->valid = true;
    tmp->size = fsize(tmp->handle);
  }
  return tmp;
};

/*
 * Read whole file into the preallocated buffer.
 */
file_read_buf : fn (file *File, buf string) bool {
  if file == null { return false; }
  if !file->valid { return false; }
  if file->size == 0 { return false; }
  fread(buf, file->size, 1, file->handle); 
  return true;
};
	    
/*
 * Close file. 
 */
file_close : fn (file *File) {
  if file == null { return; }
  fclose(file->handle);
  free(file);
};


main : fn () {
  f := file_open("test.bl");

  if f->valid {
    puts("file 'test.bl' found");

    str := cast(string) malloc(sizeof(char) * (f->size + 1));
    if file_read_buf(f, str) {
      puts(str);
    }

    free(cast(*void) str);
    file_close(f);
  } else {
    puts("file 'test.bl' not found");
  }
};

