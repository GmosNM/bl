//************************************************************************************************
// bl
//
// File:   core.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "c.bl"
#load "debug.bl"

// Type info
TypeKind :: enum #compiler {
    Int  :: 4,
};

TypeInfo :: struct #compiler {
    kind: TypeKind 
};

TypeInfoInt :: struct #compiler {
    base: TypeInfo,
    bitcount: s32,
    signed: bool
};

Any :: struct #compiler {
    type_info: *TypeInfo,
    data: *u8
};

cstr_to_str :: fn (cstr: *u8) string {
    return {:string: strlen(cstr), cstr};
};

// Printing
// TODO: all functions should use one buffer and call write only once prer 'print' call.
print :: fn (format: string, nums: ...s64) {
    tmp := {:string: 0, format.ptr }; 
    ni := 0;

    loop i := 0; i < format.len; i += 1 {
        c := format[i];

        if c == '%' {
            print_string(tmp);
            if ni < nums.len {
                print_s64(nums[ni]); 
                ni += 1;
            } else {
                print_string("(null)");
            }

            tmp.len = 0;
            if i + 1 < format.len {
                tmp.ptr = &format[i + 1];
            }
        } else {
            tmp.len += 1;
        }
    }

    if tmp.len > 0 { print_string(tmp); }
};

// TODO: this is only temporary solution
print_floats :: fn (format: string, nums: ...f64) {
    tmp := {:string: 0, format.ptr }; 
    ni := 0;

    loop i := 0; i < format.len; i += 1 {
        c := format[i];

        if c == '%' {
            print_string(tmp);
            if ni < nums.len {
                print_f64(nums[ni]); 
                ni += 1;
            } else {
                print_string("(null)");
            }

            tmp.len = 0;
            if i + 1 < format.len {
                tmp.ptr = &format[i + 1];
            }
        } else {
            tmp.len += 1;
        }
    }

    if tmp.len > 0 { print_string(tmp); }
};

print_string :: fn (str: string) {
    os_write(OS_STDOUT, str.ptr, str.len);
};

print_s64 :: fn (v: s64) {
    buf      : [21]u8;
    negative :: v < 1;
    c := 0;

    if negative {
        v = -v;
    }

    if v == 0 {
        buf[0] = '0';
        os_write(OS_STDOUT, buf.ptr, 1);
        return;
    }

    loop v > 0 {
        d := v % 10;
        buf[c] = d + '0';
        v /= 10;
        c += 1;
    }

    if negative {
        buf[c] = '-';
        c += 1;
    }

    _print_reverse_buffer({:[]u8: buf.len, buf.ptr}, 0, c - 1);

    os_write(OS_STDOUT, buf.ptr, c);
};

print_f64 :: fn (v: f64) {
    precision :: 0.000001;
    buf: [32]u8;
    negative :: v < 0.;
    c := 0;

    if negative {
        v = -v;
    }

    m := cast(s32) log10(v);

    if negative {
        buf[c] = '-';
        c += 1;
    }

    if m < 1 {
        m = 0;
    }

    // convert the number
    loop v > precision || m >= 0 {
        weight := pow(10., cast(f64) m);

        if weight > 0. {
            digit := cast(u8) floor(v / weight);
            v -= ((cast(f64) digit) * weight);

            buf[c] = digit + '0';
            c += 1;
        }

        if m == 0 && v > 0. {
            buf[c] = '.';
            c += 1;
        }
        m -= 1;
    }

    os_write(OS_STDOUT, buf.ptr, c);
};

_print_reverse_buffer :: fn (buf: []u8, i: s32, j: s32) {
    loop i < j {
        tmp := buf[i];
        buf[i] = buf[j];
        buf[j] = tmp;
        i += 1;
        j -= 1;
    }
};
