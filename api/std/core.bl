//************************************************************************************************
// bl
//
// File:   core.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "c.bl"
#load "debug.bl"

print :: fn (format: []u8, nums: ...s64) {
  tmp := []u8 { 0, format.ptr }; 
  ni := 0;

  loop i := 0; i < format.len; i += 1 {
    c := format[i];

    if c == '%' {
      print_str(tmp);
      if ni < nums.len {
        print_int(nums[ni]); 
        ni += 1;
      } else {
        print_str("(null)");
      }

      tmp.len = 0;
      if i + 1 < format.len {
        tmp.ptr = &format[i + 1];
      }
    } else {
      tmp.len += 1;
    }
  }

  if tmp.len > 0 { print_str(tmp); }
};

print_str :: fn (args: ...[]u8) {
  loop i := 0; i < args.len; i += 1 {
    write(C_STDOUT, args[i].ptr, args[i].len);
  }
};

print_int :: fn (v: s64) {
  buf      : [21]u8;
  negative :: v < 0;
  c := 0;

  if v == 0 {
    buf[0] = '0';
    write(C_STDOUT, buf.ptr, 1);
    return;
  }

  if negative {
    v *= -1; // make it positive
  }

  loop v > 0 {
    d := v % 10;
    buf[c] = d + '0';
    v /= 10;
    c += 1;
  }

  if negative {
    buf[c] = '-';
    c += 1;
  }

  {
    j := c - 1; 
    i := 0; 
 
    loop i < j {
      tmp := buf[i];
      buf[i] = buf[j];
      buf[j] = tmp;
      i += 1;             
      j -= 1;         
    }
  }

  write(C_STDOUT, buf.ptr, c);
};
