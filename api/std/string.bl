//************************************************************************************************
// BL - STD 
//
// File:   string.bl
// Author: Martin Dorazil
// Date:   14.2.18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/memory.bl"
#load "std/debug.bl"

public module std {
  public module string {
    public struct string_t {
      data *void,
      public len size_t
    }

    public fn init(str *string_t) {
      str->data = null;
      str->len = cast(size_t) 0;
    }

    public fn terminate(str *string_t) {
      memory::free(str->data);
      str->data = null;
      str->len = cast(size_t) 0;
    }

    public fn c_str(str *string_t) string {
      if (str->len == cast(size_t) 0)
        return "";

      return cast(string) str->data;
    }

    public fn setc(dest *string_t, src string) {
      var size size_t = libc::strlen(src) + cast(size_t) 1;
      expand_if_needed(dest, size);
      libc::strcpy(cast(string) dest->data, cast(string) src);
    }

    fn expand_if_needed(str *string_t, needed size_t) {
      if (str->len >= needed)
        return;

      str->len = needed;
      str->data = libc::realloc(str->data, needed);
    }
  }
}