//*****************************************************************************
// bl - api 
//
// File:   vec2.bl
// Author: Martin Dorazil
// Date:   29/03/2018
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

public module std {
  public module math {
    public struct vec2i_t {
      public x i32,
      public y i32
    }

    public fn vec2i_init(vec *vec2i_t, x i32, y i32) {
      vec->x = x; 
      vec->y = y; 
    }

    public fn vec2i_add(a *vec2i_t, b *vec2i_t) {
      a->x = a->x + b->x; 
      a->y = a->y + b->y; 
    }

    public fn vec2i_sub(a *vec2i_t, b *vec2i_t) {
      a->x = a->x - b->x; 
      a->y = a->y - b->y; 
    }

    public fn vec2i_mul(a *vec2i_t, b *vec2i_t) {
      a->x = a->x * b->x; 
      a->y = a->y * b->y; 
    }


    public struct vec2f_t {
      public x f32,
      public y f32
    }

    public fn vec2f_init(vec *vec2f_t, x f32, y f32) {
      vec->x = x; 
      vec->y = y; 
    }

    public fn vec2f_add(a *vec2f_t, b *vec2f_t) {
      a->x = a->x + b->x; 
      a->y = a->y + b->y; 
    }

    public fn vec2f_sub(a *vec2f_t, b *vec2f_t) {
      a->x = a->x - b->x; 
      a->y = a->y - b->y; 
    }

    public fn vec2f_mul(a *vec2f_t, b *vec2f_t) {
      a->x = a->x * b->x; 
      a->y = a->y * b->y; 
    }

    public fn vec2f_mulf(a *vec2f_t, f f32) {
      a->x = a->x * f; 
      a->y = a->y * f; 
    }

    public fn vec2f_len(v *vec2f_t) f32 {
      return sqrtf(v->x * v->x + v->y * v->y);
    }

    public fn vec2f_normalize(v *vec2f_t) {
      var w f32 = vec2f_len(v);
      v->x = v->x / w;
      v->y = v->y / w;
    }

    public fn vec2f_rotate(v *vec2f_t, rad f32) {
      var tmp vec2f_t;
      tmp.x = v->x * cosf(rad) - v->y * sinf(rad);
      tmp.y = v->x * sinf(rad) + v->y * cosf(rad);
      (*v) = tmp;
    }
  }
}