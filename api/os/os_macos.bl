//************************************************************************************************
// bl
//
// File:   os_macos.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "os/os.bl"
#load "string.bl"

/*
 * This file contains OS-depend implementation and it's loaded by default by every assembly.
 */

/*
 * Operating system type.
 */
OS	: OS_MACOS;

/*
 * Operating system name.
 */
OS_NAME : "macos";

STDOUT_FILENO : 1;

SIGQUIT : 3;
SIGILL  : 4;
SIGABRT : 6;

syscall fn (s32, s32, *char, usize) s32 : #extern;
raise   fn (s32) s32 : #extern;
sbrk    fn (usize) *void : #extern;

__bl_print : fn (s string) {
  syscall(4, STDOUT_FILENO, s, string_len(s));
};

__bl_abort : fn () {
  raise(SIGABRT);
};

__bl_exit : fn () {
  raise(SIGQUIT);
};

__bl_alloc : fn (count usize) *void {
  p := sbrk(0); 
  rq := sbrk(count);

  if (rq == cast(*void) (-1)) {
    return null; 
  } 

  if (p != rq) { abort(); }
  return p;
};
