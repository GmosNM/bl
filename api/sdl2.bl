//*****************************************************************************
// bl api
//
// File:   sdl2.bl
// Author: Martin Dorazil
// Date:   09/02/2018
//
// Copyright 2017 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

extern i32 SDL_Init(i32 flags);
extern void SDL_Quit();

extern ptr SDL_CreateWindow(string title, i32 x, i32 y, i32 w, i32 h, u32 flags);
extern ptr SDL_CreateRenderer(ptr window, i32 index, u32 flags);

extern void SDL_Delay(i32 ms);
extern void SDL_PumpEvents();

// TODO: use u8
extern i32 SDL_SetRenderDrawColor(ptr renderer, i32 r, i32 g, i32 b, i32 a);
extern i32 SDL_RenderClear(ptr renderer);
extern void SDL_RenderPresent(ptr renderer);

extern string SDL_GetError();

extern void SDL_DestroyWindow(ptr window);
extern void SDL_DestroyRenderer(ptr renderer);

// module sdl2 {

i32 init() {
  i32 SDL_INIT_VIDEO = 32;
  return SDL_Init(SDL_INIT_VIDEO);
}

void quit() {
  SDL_Quit();
}

string get_error() {
  return SDL_GetError();
}

ptr create_window(string title, i32 x, i32 y) {
  u32 SDL_WINDOW_SHOWN = 4;
  return SDL_CreateWindow(title, x, y, 800, 600, SDL_WINDOW_SHOWN);
}

ptr create_renderer(ptr window) {
  // TODO: hacked -1 number -> support unary operators
  return SDL_CreateRenderer(window, 1 - 2, 0);
}

void delay(i32 ms) {
  SDL_Delay(ms);
}

void pump_events() {
  SDL_PumpEvents();
}

// TODO: use u8
i32 set_render_draw_color(ptr renderer, i32 r, i32 g, i32 b, i32 a) {
   return SDL_SetRenderDrawColor(renderer, r, g, b, a);
}

i32 render_clear(ptr renderer) {
  return SDL_RenderClear(renderer);
}

void render_present(ptr renderer) {
  SDL_RenderPresent(renderer);
}

void destroy_window(ptr window) {
  SDL_DestroyWindow(window);
}

void destroy_renderer(ptr renderer) {
  SDL_DestroyRenderer(renderer);
}


