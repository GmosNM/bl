//************************************************************************************************
// bl
//
// File:   alloc.bl
// Author: Martin Dorazil
// Date:   30/9/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "utils.bl"

_AllocMeta : struct {
  size usize,
  next *_AllocMeta,
  prev *_AllocMeta,
  magic s32
};

_alloc_free_pool *_AllocMeta := null;

alloc : fn (count usize) *void {
  if (count == 0) { return null; }
  
  mem := _get_free(count);
  if (mem == null) {
    //print("allocation\n");
    size : count + sizeof(_AllocMeta);
    mem = cast(*_AllocMeta) __bl_alloc(size);
    mem->size = count;
    mem->magic = 123;
  }

  if (mem->magic != 123) { abort(); }

  return ptrshift(mem, sizeof(_AllocMeta)); 
};

free : fn (ptr *void) {
  if (ptr == null) { return; }
  _put_free(ptr);
};

_get_free : fn (size usize) *_AllocMeta {
  unlink : fn (node *_AllocMeta) *_AllocMeta {
    if (node->next != null) {
      node->next->prev = node->prev;
    }

    if (node->prev != null) {
      node->prev->prev = node->next;
    }

    if (node->next == null && node->prev == null) {
      _alloc_free_pool = null;
    }

    node->next = null;
    node->prev = null;

    return node; 
  };

  found := _alloc_free_pool;
  loop (found != null) {
    if (found->size <= size) {
      return unlink(found);
    }
    found = found->next;
  }

  return null;
};

_put_free : fn (mem *void) {
  link : fn (node *_AllocMeta) {
    if (_alloc_free_pool == null) {
      node->next = null;
      node->prev = null;
      _alloc_free_pool = node;
    } else {
      node->next = _alloc_free_pool;
      node->prev = null;
      _alloc_free_pool->prev = node;
      _alloc_free_pool = node;
    }
  };

  meta := cast(*_AllocMeta) ptrshift(mem, - sizeof(_AllocMeta)); 
  link(meta);
};