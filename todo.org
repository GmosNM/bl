* Release 0.5.0 (1st Oct 2019) [46%]
  - [X] Complete missing erase cases.
  - [ ] LLVM DI fine tunning and globals.
  - [X] Fix global immutables. 
  - [ ] Implicit casting array to slice.
  - [X] Validation of global's initializers to be compile time known.
  - [ ] Improve documentation.
  - [X] Defer statement.
  - [X] Runtime type info. 
  - [X] First version of LLVM DI. 
  - [ ] #extern "name"
  - [X] len in arrays and slices as s64 not u64
  - [ ] enable implicit casting only to bigger integer type and check signed unsigned also 
  - [ ] warn about unused casts (auto also) 
  - [ ] remove ';' at the end of function declaration 
  - [ ] remove ';' at the end struct and enum

* Bugs [33%]
  - [ ] functions pointers passed during comptime execution cannot be used as an callbacks in external functions because they are not compatible with C ABI calling conventions. This will be by the way quite hard to fix :(. http://www.dyncall.org/docs/dyncallback.3.html

  - [X] fn typedef
    Recognise this as function type definition.
    T :: fn (i: s32, j: bool) s32; 

  - [ ] Invalid llvm for
    print("kind %\n", cast(s32) (cast(*TypeInfo) data).kind);
    
  - [ ] VK_NULL_HANDLE :: null; cannot be used

  - [X] Wrong initialization of globals with defined type:
    Foo : u64 : 10;
    
  - [ ] Unstable function pointers and invalid error reporting locations.


* Calling convention changes [16%]
  - [ ] merge somehow funcitions exec_instr_call, exec_call_top_lvl and exec_fn
  - [ ] remove fn->exec_ret_value push on the stack instead
  - [ ] do unused return value cleanup in call end instead of terminal instruction
  - [ ] argument cleanup and push in call???
  - [ ] remove caller from frame top
  - [X] repair print stack trace
