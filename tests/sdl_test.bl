/* playground */

#load "std/core.bl"
#load "sdl2/sdl2.bl"

ScreenWidth  :: 800;
ScreenHeight :: 600;

Game :: struct {
  window: *SDL_Window,
  renderer: *SDL_Renderer,
  will_quit: bool
};

main :: fn () s32 {
  game: Game;

  init(&game);
  game_loop(&game);
  terminate(&game);

  return 0;
};

init :: fn (game: *Game) {
  print("Initialize SDL.\n");

  if SDL_Init(SDL_INIT_VIDEO) != 0 {
    print("Unable to init SDL\n");
    abort();
  } else {
    print("SDL initialized.\n");
  }

  title := "Test window!";
  game.window = SDL_CreateWindow(
    title.ptr,
    100,
    100,
    ScreenWidth,
    ScreenHeight,
    SDL_WINDOW_SHOWN
  );

  if game.window == null {
    print("Cannot create window.\n");
    abort();
  }

  game.renderer = SDL_CreateRenderer(game.window, -1, SDL_RENDERER_ACCELERATED);
  if game.renderer == null {
    print("Cannot create renderer.\n");
    abort();
  }
  
  SDL_SetRenderDrawColor(game.renderer, 255, 255, 255, 255);
  game.will_quit = false;
};

terminate :: fn (game: *Game) {
  SDL_DestroyRenderer(game.renderer);
  SDL_DestroyWindow(game.window);
  SDL_Quit();
  print("Exiting.\n");
};

game_loop :: fn (game: *Game) {
  event : *u8 = null;

  loop i := 0; i < 200; i += 1 {
    handle_input();
    render(game);
    SDL_PollEvent(event);
    SDL_Delay(16);
    print("Frame %\n", i);
  }
};

handle_input :: fn() {
};

render :: fn (game: *Game) {
  SDL_RenderClear(game.renderer);
  SDL_RenderPresent(game.renderer);
};