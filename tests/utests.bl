#load "file.bl"
#load "libc.bl"
#load "string.bl"

TestFileSize size_t : 256;
TmpCmdSize size_t   : 256;
MaxTestCount size_t : 256;
Ok  	     	    : 0;
Fail    	    : 1;
BaseCmd      	    : "blc -run -no-bin ";

Test : struct {
  file *char,
  state bool
};

main : fn () s32 {
  // helpers
  get_test : fn (t *Test, i size_t) *Test {
    tmp := cast(*Test) (cast(size_t) t + sizeof(Test) * i);
    return tmp;
  };

  puts("Biscuit UTester");

  file File;
  if !file_open(&file, ".config.utest") {
    puts("unable to open '.config.utest' file");
    return Fail;
  } 

  curr_test size_t := 0;
  tests *Test := malloc(sizeof(Test) * MaxTestCount);
  memset(tests, 0, sizeof(Test) * MaxTestCount);

  ConfigSize : file.size + 1;
  config *char := malloc(sizeof(char) * ConfigSize);
  memset(config, 0, ConfigSize);
  file_read_buf(&file, config);

  loop i size_t := 0; i < file.size; {
    test := get_test(tests, curr_test);
    curr_test = curr_test + 1;

    test->file = malloc(sizeof(char) * TestFileSize);
    i = get_token(config, test->file, i);  
  }

  tmp *String := str_new();

  loop i size_t := 0; i < curr_test; i = i + 1 {
    test := get_test(tests, i);

    str_clear(tmp);
    str_ccat(tmp, BaseCmd);
    str_ccat(tmp, test->file);
    state := system(tmp->data);

    if state == 0 {
      test->state = true;
    } else {
      test->state = false;
    }
  }

  puts("");

  result := Ok;
  loop i size_t := 0; i < curr_test; i = i + 1 {
    test := get_test(tests, i);

    str_clear(tmp);
    str_ccat(tmp, test->file);
    str_ccat(tmp, " ");

    loop tmp->len < 74 {
      str_ccat(tmp, ".");
    }

    if test->state {
      str_ccat(tmp, "  OK ");
    } else {
      str_ccat(tmp, " FAIL");
      result = Fail;
    }
    puts(tmp->data);
    free(test->file);
  }

  str_delete(tmp);
  free(tests);
  free(cast(*void) config);
  file_close(&file);
  return result;
};

get_token : fn (str *char, out *char, start size_t) size_t {
  get_char_ptr : fn (str *char, i size_t) *char {
    tmp := cast(*char) (cast(size_t) str + i);
    return tmp;
  };

  i size_t := 0;
  loop {
    c := *get_char_ptr(str, start + i);   
    if c == ' ' || c == '\n' || c == '\0' {
      c_out_ptr := get_char_ptr(out, i);
      *c_out_ptr = '\0';
      break;
    }
    c_out_ptr := get_char_ptr(out, i);
    *c_out_ptr = c;
    i = i + 1;
  }

  return start + i + 1;
};
