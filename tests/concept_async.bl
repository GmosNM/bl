#import "std/thread"

my_is_number :: fn (T: type) bool #comptime #extern "__bl_is_number";

main :: fn () s32 {
    my_is_number(s32);
    std.async(&fn (a: s32, b: s32) s32 {
        print("Lambda %, %\n", a, b);
        return a + b;
    }, 10, 20);

    return 0;
}

#scope std

typeof_future :: fn (TReturn: type) type #comptime {
    return struct {
        result: TReturn;
    };
}

async :: fn (worker: *?T, args: ...) {
    static_assert(is_function(T));
    
}



#private


