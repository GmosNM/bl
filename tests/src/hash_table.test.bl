#load "experimental/hash_table.bl"

#private 
init :: fn () #test2 {
    tbl := htbl_new(s32, 64);
    defer htbl_delete(tbl);

    assert(iter_equal(htbl_begin(tbl), htbl_end(tbl)));
    assert(tbl.len == 0);
}

insert_and_find :: fn () #test2 {
    tbl := htbl_new(s32, 64);
    defer htbl_delete(tbl);

    loop i := 0; i < 1024; i += 1 {
        htbl_insert(tbl, auto i, i);
    }

    loop i := 0; i < 1024; i += 1 {
        assert(htbl_has_key(tbl, auto i));
    }

    loop i := 0; i < 1024; i += 1 {
        iter :: htbl_find(tbl, auto i);
        assert(htbl_iter_peek_key(iter) == auto i);
        assert((^ cast(*s32) htbl_iter_peek_value(iter)) == i);
        assert((^ cast(*s32) htbl_at(tbl, auto i)) == i);
    }
}

iterate :: fn () #test2 {
    tbl := htbl_new(s32, 64);
    defer htbl_delete(tbl);

    loop i := 0; i < 1024; i += 1 {
        htbl_insert(tbl, auto i, i);
    }

    iter := htbl_begin(tbl);
    end  :: htbl_end(tbl);
    loop !iter_equal(iter, end) {
        v :: ^ cast(*s32) htbl_iter_peek_value(iter);
        assert(v >= 0 && v < 1024);

        htbl_iter_next(&iter);
    }
}

erase :: fn () #test2 {
    tbl := htbl_new(s32, 64);
    defer htbl_delete(tbl);

    loop i := 0; i < 1024; i += 1 {
        htbl_insert(tbl, auto i, i);
    }

    loop i := 0; i < 1024; i += 1 {
        htbl_erase_key(tbl, auto i);
    }

    assert(iter_equal(htbl_begin(tbl), htbl_end(tbl)));
    assert(tbl.len == 0);
}
