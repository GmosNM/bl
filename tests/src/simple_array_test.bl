/*
 * Unit test
 * -----------
 * Simple array test 
 */

#load "std/utest.bl"
using std::utest;

module array {
  struct foo_t {
    x i32,
    y i32
  }

  const count i32 = 256;
  
  #test
  fn array_i32() i32 {
    mut arr i32[count];  
    mut i i32 = 0;
  
    while (i < count) {
      arr[i] = i;
      i = i + 1;
    }
  
    i = 0;
    while (i < count) {
      if arr[i] != i {
        return FAIL;
      }
      i = i + 1;
    }
  
  
    return SUCCESS;
  }

  #test
  fn array_struct() i32 {
    mut foos foo_t[count];
    mut i i32 = 0;

    while (i < count) {
      foos[i].x = i;
      foos[i].y = i;
      i = i + 1;
    }
  
    i = 0;
    while (i < count) {
      if foos[i].x != i || foos[i].y != i {
        return FAIL;
      }
      i = i + 1;
    }

    return SUCCESS;
  }

  #test
  fn array_count() i32 {
    mut a i32 [count];
    if a.count != count { return FAIL; }

    mut foos foo_t [count];
    if foos.count != count { return FAIL; }

    return SUCCESS;
  }

  #test
  fn array_count_iteration() i32 {
    mut a i32 [count];
    if a.count != count { return FAIL; }

    mut i = 0;
    while i < a.count {
      a[i] = i;
      i = i + 1;
    }

    i = 0;
    while i < a.count {
      if a[i] != i { return FAIL; }
      i = i + 1;
    }

    return SUCCESS;
  }
}