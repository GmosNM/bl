#load "std/array.bl"

#test "basic inserting s32" {
    arr: [..]s32;
    defer array_terminate(arr);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(arr, i);
    }

    loop i := 0; i < arr.len; i += 1 {
        assert(arr[i] == i);
    }
}

#test "basic inserting bool" {
    arr: [..]bool;
    defer array_terminate(arr);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(arr, true);
    }

    loop i := 0; i < arr.len; i += 1 {
        assert(arr[i] == true);
    }
}

#test "basic inserting string" {
    arr: [..]string;
    defer array_terminate(arr);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(arr, "Hello!!!");
    }

    loop i := 0; i < arr.len; i += 1 {
        assert(arr[i].len == 8);
    }
}

#test "reserve" {
    arr: [..]s32;
    defer array_terminate(arr);
            
    array_reserve(arr, 1000);
    assert(arr.len == 0);
    assert(arr.ptr != null);
    assert(arr.allocated == 1000);
}

#test "clear" {
    arr: [..]s32;
    defer array_terminate(arr);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(arr, i);
    }

    assert(arr.len == 1000);

    array_clear(arr);

    assert(arr.len == 0);
}

#test "erase" {
    arr: [..]s32;
    defer array_terminate(arr);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(arr, i);
    }

    assert(arr.len == 1000);

    loop arr.len > 0 {
        array_erase(arr, 0);
    }

    assert(arr.len == 0);
}

#test "cast to slice" {
    foo :: fn (sl: []s32) {
        loop i := 0; i < sl.len; i += 1 {
            assert(sl[i] == i);
        }
    };

    bar :: fn () []*s32 {
        arr: [..]*s32;
        return arr;
    };

    arr: [..]s32;
    defer array_terminate(arr);

    loop i := 0; i < 1000; i += 1 {
        array_push(arr, i);
    }

    {
        sl: []s32 = arr;

        loop i := 0; i < sl.len; i += 1 {
            assert(sl[i] == i);
        }
    }

    {
        sl : []s32 : arr;

        loop i := 0; i < sl.len; i += 1 {
            assert(sl[i] == i);
        }
    }

    foo(arr);
}
