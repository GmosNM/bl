#private
default_args_some_default :: fn () #test {
    foo :: fn (i: s32, j: s32 = 20) {
        test_s32_eq(i, 10);
        test_s32_eq(j, 20);
    };

    foo(10);
    foo(10, 20);
}

default_args_some_default2 :: fn () #test {
    foo :: fn (i: s32, j: s32, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10);
        test_s32_eq(j, 20);
        test_s32_eq(k, 30);
        test_s32_eq(l, 40);
    };

    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_all_default :: fn () #test {
    foo :: fn (i: s32 = 10, j: s32 = 20, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10);
        test_s32_eq(j, 20);
        test_s32_eq(k, 30);
        test_s32_eq(l, 40);
    };

    foo();
    foo(10);
    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_complex :: fn () #test {
    Foo :: struct {
        i: s32;
        j: s32;
    };
    foo :: fn (i: s32, j: Foo = {:Foo: 20, 30}) {
        test_s32_eq(i, 10);
        test_s32_eq(j.i, 20);
        test_s32_eq(j.j, 30);
    };

    foo(10);
    foo(10, {:Foo: 20, 30});
}

GLOBAL_10 :: 10;
GLOBAL_20 :: 20;
GLOBAL_30 :: 30;
GLOBAL_40 :: 40;

default_args_global :: fn () #test {
    foo :: fn (i: s32 = GLOBAL_10, j: s32 = GLOBAL_20, k: s32 = GLOBAL_30, l: s32 = GLOBAL_40) {
        test_s32_eq(i, GLOBAL_10);
        test_s32_eq(j, GLOBAL_20);
        test_s32_eq(k, GLOBAL_30);
        test_s32_eq(l, GLOBAL_40);
    };

    foo();
    foo(10);
    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_ptr_call :: fn () #test {
    foo :: fn (i: s32 = 10, j: s32 = 20, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10);
        test_s32_eq(j, 20);
        test_s32_eq(k, 30);
        test_s32_eq(l, 40);
    };

    p :: &foo;
    p();
    p(10);
    p(10, 20);
    p(10, 20, 30);
    p(10, 20, 30, 40);
}

default_args_fn_explicit_type :: fn () #test {
    foo : fn (s32, s32, s32, s32) : fn (i: s32 = 10, j: s32 = 20, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10);
        test_s32_eq(j, 20);
        test_s32_eq(k, 30);
        test_s32_eq(l, 40);
    };

    foo();
    foo(10);
    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_call_side_location :: fn () #test {
    foo :: fn (expected_file: string, expected_line: s32, loc: *CodeLocation = #call_location) {
        test_str_eq(loc.file, expected_file);
        test_s32_eq(loc.line, expected_line);
    };

    filename: string;
    if string_split_by_last(#file, '/', null, &filename) {
        foo(filename, #line);
    } else {
        assert(false);
    }
}

default_args_callback1 :: fn () #test {
    foo :: fn (i: s32) {
        test_s32_eq(i, 10);
    };

    // @NOTE: I'm not 100% sure if this should be possible...
    bar :: fn (callback: *fn(s32 = 10)) {
        callback();
    };

    bar(&foo);
}

default_args_callback2 :: fn () #test {
    foo :: fn (i: s32 = 20) {
        test_s32_eq(i, 666);
    };

    bar :: fn (callback: *fn(s32 = 10)) {
        callback(666);
    };

    bar(&foo);
}

default_args_callback3 :: fn () #test {
    foo :: fn (i: s32 = 20) {
        test_s32_eq(i, 10);
    };

    bar :: fn (callback: *fn(s32 = 10)) {
        callback();
    };

    bar(&foo);
}
