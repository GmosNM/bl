#private
default_args_some_default :: fn () #test {
    foo :: fn (i: s32, j: s32 = 20) {
        test_s32_eq(i, 10, #file, #line);
        test_s32_eq(j, 20, #file, #line);
    };

    foo(10);
    foo(10, 20);
}

default_args_some_default2 :: fn () #test {
    foo :: fn (i: s32, j: s32, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10, #file, #line);
        test_s32_eq(j, 20, #file, #line);
        test_s32_eq(k, 30, #file, #line);
        test_s32_eq(l, 40, #file, #line);
    };

    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_all_default :: fn () #test {
    foo :: fn (i: s32 = 10, j: s32 = 20, k: s32 = 30, l: s32 = 40) {
        test_s32_eq(i, 10, #file, #line);
        test_s32_eq(j, 20, #file, #line);
        test_s32_eq(k, 30, #file, #line);
        test_s32_eq(l, 40, #file, #line);
    };

    foo();
    foo(10);
    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}

default_args_complex :: fn () #test {
    Foo :: struct {
        i: s32;
        j: s32;
    };
    foo :: fn (i: s32, j: Foo = {:Foo: 20, 30}) {
        test_s32_eq(i, 10, #file, #line);
        test_s32_eq(j.i, 20, #file, #line);
        test_s32_eq(j.j, 30, #file, #line);
    };

    foo(10);
    foo(10, {:Foo: 20, 30});
}

GLOBAL_10 :: 10;
GLOBAL_20 :: 20;
GLOBAL_30 :: 30;
GLOBAL_40 :: 40;

default_args_global :: fn () #test {
    foo :: fn (i: s32 = GLOBAL_10, j: s32 = GLOBAL_20, k: s32 = GLOBAL_30, l: s32 = GLOBAL_40) {
        test_s32_eq(i, GLOBAL_10, #file, #line);
        test_s32_eq(j, GLOBAL_20, #file, #line);
        test_s32_eq(k, GLOBAL_30, #file, #line);
        test_s32_eq(l, GLOBAL_40, #file, #line);
    };

    foo();
    foo(10);
    foo(10, 20);
    foo(10, 20, 30);
    foo(10, 20, 30, 40);
}
