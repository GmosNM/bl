#test "sin" {
    // compare results with libc
    c_sinf :: fn (v: f32) f32 #extern "sinf";
    c_sin  :: fn (v: f64) f64 #extern "sin";

    loop i := 0; i < 3141; i += 1 {
        v :: (cast(f32) i) * 0.001f;
        test_f32_eq(sinf(v), c_sinf(v), 0.000001f);
    }

    loop i := 0; i < 3141; i += 1 {
        v :: (cast(f64) i) * 0.001;
        test_f64_eq(sin(v), c_sin(v), 0.000001);
    }
}

#test "cos" {
    // compare results with libc
    c_cosf :: fn (v: f32) f32 #extern "cosf";
    c_cos  :: fn (v: f64) f64 #extern "cos";

    loop i := 0; i < 3141; i += 1 {
        v :: (cast(f32) i) * 0.001f;
        test_f32_eq(cosf(v), c_cosf(v), 0.000001f);
    }

    loop i := 0; i < 3141; i += 1 {
        v :: (cast(f64) i) * 0.001;
        test_f64_eq(cos(v), c_cos(v), 0.000001);
    }
}

#test "floor" {
    test_f32_eq(floorf(10.12f), 10.f, 0.000001f);
    test_f32_eq(floorf(0.2f), 0.f, 0.000001f);
    test_f32_eq(floorf(999.92f), 999.f, 0.000001f);

    test_f64_eq(floor(10.12), 10., 0.000001);
    test_f64_eq(floor(0.2), 0., 0.000001);
    test_f64_eq(floor(999.92), 999., 0.000001);
}

#test "round" {
    test_f32_eq(roundf(10.12f), 10.f, 0.000001f);
    test_f32_eq(roundf(0.2f), 0.f, 0.000001f);
    test_f32_eq(roundf(999.92f), 1000.f, 0.000001f);

    test_f64_eq(round(10.12), 10., 0.000001);
    test_f64_eq(round(0.2), 0., 0.000001);
    test_f64_eq(round(999.92), 1000., 0.000001);
}

#test "pow" {
    test_f32_eq(powf(20.f, 2.f), 20.f * 20.f, 0.000001f);
    test_f64_eq(pow(20., 2.), 20.* 20., 0.000001);
}
