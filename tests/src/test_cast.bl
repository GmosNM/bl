#test "fundamental types" {
  a u8 : 10;
  (a == 10);
  assert(cast(u8)    a == 10);
  assert(cast(u16)   a == 10);
  assert(cast(u32)   a == 10);
  assert(cast(u64)   a == 10);
  assert(cast(s8)    a == 10);
  assert(cast(s16)   a == 10);
  assert(cast(s32)   a == 10);
  assert(cast(s64)   a == 10);
  assert(cast(usize) a == 10);
  assert(cast(f32)   a == 10.0f);
  assert(cast(f64)   a == 10.0);
  assert(cast(*u8)   a != null);
  cast(bool)   a;
  cast(string) a;
  cast(char)   a;

  c u64 : 10;
  (c == 10);
  assert(cast(u8)  c == 10);
  assert(cast(u16) c == 10);
  assert(cast(u32) c == 10);

  b s8 : 10;
  (b == 10);
  assert(cast(s8)    b == 10);
  assert(cast(s16)   b == 10);
  assert(cast(s32)   b == 10);
  assert(cast(s64)   b == 10);
  assert(cast(u8)    b == 10);
  assert(cast(u16)   b == 10);
  assert(cast(u32)   b == 10);
  assert(cast(u64)   b == 10);
  assert(cast(usize) b == 10);
  assert(cast(f32)   b == 10.0f);
  assert(cast(f64)   b == 10.0);
  assert(cast(*u8)   b != null);
  cast(bool)   b;
  cast(string) b;
  cast(char)   b;

  d s64 : 10;
  (d == 10);
  assert(cast(s16)   d == 10);
  assert(cast(s32)   d == 10);
  assert(cast(s64)   d == 10);
  assert(cast(s8)    d == 10);

  e f32 : 10.0f;
  (e == 10.0f);
  assert(cast(f64)   e != 0.0);
  assert(cast(s16)   e == 10);
  assert(cast(s32)   e == 10);
  assert(cast(s64)   e == 10);
  assert(cast(u8)    e == 10);
  assert(cast(u16)   e == 10);
  assert(cast(u32)   e == 10);
  assert(cast(u64)   e == 10);
  assert(cast(usize) e == 10);
  // invalid: cast(*u8) e;
  // invalid: cast(string) e;
  cast(bool) e;
  cast(char) e;

  f f64 : 10.0;
  (f == 10.0);
  assert(cast(f32)   f != 0.0f);
  assert(cast(s16)   f == 10);
  assert(cast(s32)   f == 10);
  assert(cast(s64)   f == 10);
  assert(cast(u8)    f == 10);
  assert(cast(u16)   f == 10);
  assert(cast(u32)   f == 10);
  assert(cast(u64)   f == 10);
  assert(cast(usize) f == 10);
  // invalid: cast(*u8) f;
  // invalid: cast(string) f;
  cast(bool) f;
  cast(char) f;

  k bool : true;
  assert(cast(s32)   k == 1);
  assert(cast(u32)   k == 1);
  assert(cast(usize) k == 1);
  assert(cast(f32)   k == 1.0f);
  assert(cast(f64)   k == 1.0);
  assert(cast(*u32)  k != null);
  cast(string) k;
  cast(char) k;

  l string : "hello";
  (l == "hello");
  cast(s8)     l;
  cast(s16)    l;
  cast(s32)    l;
  cast(s64)    l;
  cast(u8)     l;
  cast(u16)    l;
  cast(u32)    l;
  cast(u64)    l;
  cast(usize)  l;
  cast(*u8)    l;
  cast(bool)   l;
  cast(string) l;
  cast(char)   l;

  m char : 'c';
  (m == 'c');
  assert(cast(s8)    m == 99);
  assert(cast(s16)   m == 99);
  assert(cast(s32)   m == 99);
  assert(cast(s64)   m == 99);
  assert(cast(u8)    m == 99);
  assert(cast(u16)   m == 99);
  assert(cast(u32)   m == 99);
  assert(cast(u64)   m == 99);
  assert(cast(usize) m == 99);
  assert(cast(f32)   m == 99.0f);
  assert(cast(f64)   m == 99.0);
  cast(*u8)    m;
  cast(bool)   m;
  cast(string) m;
  cast(char)   m;
};

#test "enums" {
  Enum : enum {
    A, B, C
  };

  a s32 := Enum.A;
  e Enum := Enum.A;
};