#load "std/print.bl"
#load "std/test.bl"

#test "print int" {
    {
        v : u64 : U64_MAX;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "18446744073709551615");
    }

    {
        v : s64 : S64_MAX;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "9223372036854775807");
    }

    {
        v : s64 : S64_MIN;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "-9223372036854775808");
    }

    {
        v : s32 : S32_MAX;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "2147483647");
    }

    {
        v : s32 : S32_MIN;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "-2147483648");
    }

    {
        v : s16 : S16_MAX;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "32767");
    }

    {
        v : s16 : S16_MIN;
        str :: string_new_concatenate(v);     
        defer string_delete(str);
        test_str_eq(str, "-32768");
    }
}

#test "print bool" {
    {
        str :: string_new_concatenate(false);     
        defer string_delete(str);
        test_str_eq(str, "false");
    }

    {
        str :: string_new_concatenate(true);     
        defer string_delete(str);
        test_str_eq(str, "true");
    }
}

#test "fmt f32" {
    {
        str :: string_new_concatenate(fmt_real(0.f, 0));     
        defer string_delete(str);

        test_str_eq(str, "0");
    }

    {
        str :: string_new_concatenate(fmt_real(10.12f, 2));     
        defer string_delete(str);

        test_str_eq(str, "10.12");
    }

    {
        str :: string_new_concatenate(fmt_real(10.121234f, 0));     
        defer string_delete(str);

        test_str_eq(str, "10");
    }

    {
        str :: string_new_concatenate(fmt_real(-10.121234f, -1));     
        defer string_delete(str);

        test_str_eq(str, "-10.121234");
    }

    {
        str :: string_new_concatenate(fmt_real(121234.f, 5));     
        defer string_delete(str);

        test_str_eq(str, "121234.00000");
    }

    {
        str :: string_new_concatenate(fmt_real(0.121234f, -1));     
        defer string_delete(str);

        test_str_eq(str, "0.121234");
    }
}

#test "fmt s32 base=10" {
    {
        str :: string_new_concatenate(fmt_int(0, FmtIntBase.Dec));     
        defer string_delete(str);

        test_str_eq(str, "0");
    }

    {
        str :: string_new_concatenate(fmt_int(10, FmtIntBase.Dec));     
        defer string_delete(str);

        test_str_eq(str, "10");
    }

    {
        str :: string_new_concatenate(fmt_int(-10, FmtIntBase.Dec));     
        defer string_delete(str);

        test_str_eq(str, "-10");
    }

    {
        str :: string_new_concatenate(fmt_int(123456789, FmtIntBase.Dec));     
        defer string_delete(str);

        test_str_eq(str, "123456789");
    }
}

#test "fmt s32 base=2" {
    {
        str :: string_new_concatenate(fmt_int(0, FmtIntBase.Bin));     
        defer string_delete(str);

        test_str_eq(str, "0b0");
    }

    {
        str :: string_new_concatenate(fmt_int(0b1011, FmtIntBase.Bin));     
        defer string_delete(str);

        test_str_eq(str, "0b1011");
    }
}

#test "fmt s32 base=16" {
    {
        str :: string_new_concatenate(fmt_int(0, FmtIntBase.Hex));     
        defer string_delete(str);

        test_str_eq(str, "0x0");
    }

    {
        str :: string_new_concatenate(fmt_int(0xfa12, FmtIntBase.Hex));     
        defer string_delete(str);

        test_str_eq(str, "0xfa12");
    }
}

#test "print content simple" {
    str :: string_new_concatenate("text", 10, true);     
    defer string_delete(str);

    test_str_eq(str, "text10true");
}

#test "print array" {
    arr :: {:[3]s32: 1, 2, 3};
    str :: string_new_concatenate(arr);     
    defer string_delete(str);

    test_str_eq(str, "[1, 2, 3]");
}

#test "print struct" {
    Foo :: struct {
        i: s32;
        j: bool;
    };

    foo :: {:Foo: 666, true};
    str :: string_new_concatenate(foo);     
    defer string_delete(str);

    test_str_eq(str, "Foo {i = 666, j = true}");
}

#test "complex type" {
    Foo :: struct {
        i: s32;
        j: bool;
        arr: [3]s32;
    };

    foo :: {:Foo: 666, true, {:[3]s32: 1, 2, 3}};
    str :: string_new_concatenate(foo);     
    defer string_delete(str);

    print("%\n", str);
    test_str_eq(str, "Foo {i = 666, j = true, arr = [1, 2, 3]}");
}
