#private
compound_arrays :: fn () #test {
    validate :: fn (v: [2]s32, i: s32, j: s32) {
        test_eq(v[0], i);
        test_eq(v[1], j);
    };

    // Var initializers
    { // zero initialized
        arr := {:[2]s32: 0};
        validate(arr, 0, 0);
    }

    { // constant values
        arr := {:[2]s32: 10, 20};
        validate(arr, 10, 20);
    }

    { // variable values
        i := 10;
        j := 20;

        arr := {:[2]s32: i, j};
        validate(arr, i, j);
    }

    // Naked
    { 
        i := 10;
        j := 20;

        validate({:[2]s32: 0}, 0, 0);
        validate({:[2]s32: 10, 20}, 10, 20);
        validate({:[2]s32: i, j}, i, j);
    }
};

compound_structs :: fn () #test {
    Foo :: struct {
        i: s32;
        j: s32
    };

    validate :: fn (v: Foo, i: s32, j: s32) {
        test_eq(v.i, i);
        test_eq(v.j, j);
    };

    { // zero initialized
        foo := {:Foo: 0};
        validate(foo, 0, 0);
    }

    { // constant values
        foo := {:Foo: 10, 20};
        validate(foo, 10, 20);
    }

    { // variable values
        i := 10;
        j := 20;

        foo := {:Foo: i, j};
        validate(foo, i, j);
    }

    // Naked
    { 
        i := 10;
        j := 20;

        validate({:Foo: 0}, 0, 0);
        validate({:Foo: 10, 20}, 10, 20);
        validate({:Foo: i, j}, i, j);
    }
};

compound_fundamentals :: fn () #test {
    Days :: enum { MON; };
    
    i := 10;
    test_eq({:s32: 10},  10);
    test_eq({:s32: i}, i);
    test_eq({:s32: 0}, 0);

    b := true;
    test_true({:bool: true});
    test_true({:bool: b});

    num     :: {:s32: 10};
    real    :: {:f32: 0.5f};
    boolean :: {:bool: true};
    ptr     : *s32 : {:*s32: &num};
    day     :: {:Days: Days.MON};

    test_eq(num, 10);
    test_eq(real, 0.5f);
    test_true(boolean);
    test_true(ptr == &num);
    test_true(day == Days.MON);
};

compound_composition :: fn () #test {
    get :: fn () s32 { return 30; };
    T :: struct { slice: []u8; int: s32 };
    v :: {:T: {:[]u8: 0}, get()};
    test_eq(v.int, 30);    
    test_eq(v.slice.len, 0);
}

T1 :: struct { i: s64; j: s64 }
T2 :: struct { a: T1;  b: T1  }

g1 :: {:T2: {:T1: 10, 20}, {:T1: 30, 40}};
g2 :: {:T2: {:T1: 0}, {:T1: 30, 40}};
g3 :: {:T2: {:T1: 10, 20}, {:T1: 0}};
g4 :: {:T2: {:T1: 0}, {:T1: 0}};

compound_comptime_composition :: fn () #test {
    test_eq(g1.a.i, 10);
    test_eq(g1.a.j, 20);    
    test_eq(g1.b.i, 30);    
    test_eq(g1.b.j, 40);
    
    test_eq(g2.a.i, 0);
    test_eq(g2.a.j, 0);
    test_eq(g2.b.i, 30);
    test_eq(g2.b.j, 40);

    test_eq(g3.a.i, 10);
    test_eq(g3.a.j, 20);
    test_eq(g3.b.i, 0);
    test_eq(g3.b.j, 0);
    
    test_eq(g4.a.i, 0);
    test_eq(g4.a.j, 0);
    test_eq(g4.b.i, 0);
    test_eq(g4.b.j, 0);
}