#private
basic_init :: fn () #test {
    v: tuple { s32 };
    test_eq(v._0, 0);
}

basic_init2 :: fn () #test {
    v: tuple { s32; s32; bool };
    test_eq(v._0, 0);
    test_eq(v._1, 0);
    test_false(v._2);
}

basic_init3 :: fn () #test {
    v: tuple { s32; s32; bool } #noinit;
    v._0 = 10;
    v._1 = 20;
    v._2 = true;
    test_eq(v._0, 10);
    test_eq(v._1, 20);
    test_true(v._2);
}

nested_tuple :: fn () #test {
    v: tuple { tuple { s32; s32 }; s32 };
    test_eq(v._0._0, 0);
    test_eq(v._0._1, 0);    
    test_eq(v._1, 0);        
}