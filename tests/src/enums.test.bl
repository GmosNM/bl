#private

simple_enum :: fn () #test {
    E :: enum {
        A; B; C
    };

    test_eq(E.A, cast(E) 0);
    test_eq(E.B, cast(E) 1);
    test_eq(E.C, cast(E) 2);
};

custom_enum_type :: fn () #test {
    E :: enum u8 {
        A; B; C
    };

    test_eq(E.A, cast(E) 0);
    test_eq(E.B, cast(E) 1);
    test_eq(E.C, cast(E) 2);
};

custom_enum_values :: fn () #test {
    E :: enum {
        A :: 10;
        B :: 20;
        C
    };
    test_eq(E.A, cast(E) 10);
    test_eq(E.B, cast(E) 20);    
    test_eq(E.C, cast(E) 21);
};

enums_with_variant_references :: fn () #test {
    E :: enum {
        A :: 10;
        B :: A + 1;
        C :: A + B
    };
    test_eq(E.A, cast(E) 10);
    test_eq(E.B, cast(E) 11);
    test_eq(E.C, cast(E) 21);
};

enum_negative :: fn () #test {
    E :: enum {
        A :: -1;
        B :: -2;
        C :: -3;
    };        
    test_eq(E.A, cast(E) -1);
    test_eq(E.B, cast(E) -2);
    test_eq(E.C, cast(E) -3);
}

enum_negative_2 :: fn () #test {
    E :: enum {
        A :: -1;
        B;
        C;
    };        
    test_eq(E.A, cast(E) -1);
    test_eq(E.B, cast(E) 0);
    test_eq(E.C, cast(E) 1);
}