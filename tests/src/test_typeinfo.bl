#load "std/print.bl"

#test "typeinfo - s8" {
    info := cast(*TypeInfoInt) typeinfo(s8);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s8));
    assert(info.bit_count == auto sizeof(s8) * 8);
    assert(info.is_signed);
}

#test "typeinfo - s16" {
    info := cast(*TypeInfoInt) typeinfo(s16);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s16));
    assert(info.bit_count == auto sizeof(s16) * 8);
    assert(info.is_signed);
}

#test "typeinfo - s32" {
    info := cast(*TypeInfoInt) typeinfo(s32);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s32));
    assert(info.bit_count == auto sizeof(s32) * 8);
    assert(info.is_signed);
}

#test "typeinfo - s64" {
    info := cast(*TypeInfoInt) typeinfo(s64);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s64));
    assert(info.bit_count == auto sizeof(s64) * 8);
    assert(info.is_signed);
}

#test "typeinfo - u8" {
    info := cast(*TypeInfoInt) typeinfo(u8);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u8));
    assert(info.bit_count == auto sizeof(u8) * 8);
    assert(!info.is_signed);
}

#test "typeinfo - u16" {
    info := cast(*TypeInfoInt) typeinfo(u16);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u16));
    assert(info.bit_count == auto sizeof(u16) * 8);
    assert(!info.is_signed);
}

#test "typeinfo - u32" {
    info := cast(*TypeInfoInt) typeinfo(u32);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u32));
    assert(info.bit_count == auto sizeof(u32) * 8);
    assert(!info.is_signed);
}

#test "typeinfo - u64" {
    info := cast(*TypeInfoInt) typeinfo(u64);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u64));
    assert(info.bit_count == auto sizeof(u64) * 8);
    assert(!info.is_signed);
}

#test "typeinfo - f32" {
    info := cast(*TypeInfoReal) typeinfo(f32);
    assert(info.base.kind == TypeKind.Real);
    assert(info.base.size_bytes == sizeof(f32));
    assert(info.bit_count == auto sizeof(f32) * 8);
};

#test "typeinfo - f64" {
    info := cast(*TypeInfoReal) typeinfo(f64);
    assert(info.base.kind == TypeKind.Real);
    assert(info.base.size_bytes == sizeof(f64));
    assert(info.bit_count == auto sizeof(f64) * 8);
};

#test "typeinfo - fn" {
    T :: fn (i: s32, j: bool) s32 { return 0; };
    info := cast(*TypeInfoFn) typeinfo(T);

    assert(info.base.kind == TypeKind.Fn);
    assert(info.args.len == 2);
    assert(!info.is_vargs);
    test_str_eq(info.name, "T");
    assert(info.ret_type == typeinfo(s32));

    { // arg1
        ai :: &info.args[0];
        test_str_eq(ai.name, "i");
        assert(ai.base_type == typeinfo(s32));
    }

    { // arg2
        ai :: &info.args[1];
        test_str_eq(ai.name, "j");
        assert(ai.base_type == typeinfo(bool));
    }
};

#test "typeinfo - ptr" {
    T :: *s32;
    info := cast(*TypeInfoPtr) typeinfo(T);

    assert(info.base.kind == TypeKind.Ptr);
    assert(info.pointee_type == typeinfo(s32));
};

#test "typeinfo - array" {
    T :: [10]s32;
    info := cast(*TypeInfoArray) typeinfo(T);

    assert(info.base.kind == TypeKind.Array);
    test_str_eq(info.name, "T");
    assert(info.base.size_bytes == sizeof(T));
    assert(info.elem_type == typeinfo(s32));
    assert(info.len == 10);
};

#test "typeinfo - enum" {
    T :: enum s32 { A; B; C };
    info := cast(*TypeInfoEnum) typeinfo(T);

    assert(info.base.kind == TypeKind.Enum);
    assert(info.base_type != null);
    assert(info.variants.len == 3);
    test_str_eq(info.name, "T");
    assert(info.variants[0].value == 0);
    assert(info.variants[1].value == 1);
    assert(info.variants[2].value == 2);
};

#test "typeinfo - struct" {
    T :: struct { A: s32; B: bool; C: f32 };
    info := cast(*TypeInfoStruct) typeinfo(T);

    assert(info.base.kind == TypeKind.Struct);
    assert(info.base.size_bytes == sizeof(T));
    test_str_eq(info.name, "T");
    assert(info.members.len == 3);
    assert(info.members[0].index == 0);
    assert(info.members[1].index == 1);
    assert(info.members[2].index == 2);
};

#test "typeinfo - comparison" {
    {
        T1 :: struct {
            i: s32;
            j: bool;
        };

        T2 :: T1;

        assert(typeinfo(T1) == typeinfo(T2));
    }

    {
        T1 :: struct {
            i: s32;
            j: bool;
        };

        T2 :: struct {
            i: s32;
            j: bool;
        };

        assert(typeinfo(T1) != typeinfo(T2));
    }
}


