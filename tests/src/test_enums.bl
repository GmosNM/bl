#load "std/debug.bl"

#private
SimpleEnum :: enum {
    A; B; C
};

CustomEnumType :: enum u8 {
    A; B; C
};

CustomEnumValues :: enum {
    A :: 10;
    B :: 20;
    C
};

CustomEnumValuesDeps :: enum {
    A :: 10;
    B :: A + 1;
    C :: A + B
};

#test "simple enum" {
    assert(cast(s32) SimpleEnum.A == 0);
    assert(cast(s32) SimpleEnum.B == 1);
    assert(cast(s32) SimpleEnum.C == 2);
};

#test "custom enum type" {
    assert(cast(s32) CustomEnumType.A == 0);
    assert(cast(s32) CustomEnumType.B == 1);
    assert(cast(s32) CustomEnumType.C == 2);
};

#test "custom enum values" {
    assert(cast(s32) CustomEnumValues.A == 10);
    assert(cast(s32) CustomEnumValues.B == 20);
    assert(cast(s32) CustomEnumValues.C == 21);
};

#test "passed enum" {
    foo :: fn (value: SimpleEnum) {
        assert(value == SimpleEnum.B);
    };

    foo(SimpleEnum.B);
};

#test "enum struct" {
    Foo :: struct {
        value: SimpleEnum
    };

    foo := {:Foo: SimpleEnum.A};
    assert(foo.value == SimpleEnum.A);
};

#test "enums with variant references" {
    assert(cast(s32) CustomEnumValuesDeps.A == 10);
    assert(cast(s32) CustomEnumValuesDeps.B == 11);
    assert(cast(s32) CustomEnumValuesDeps.C == 21);
};