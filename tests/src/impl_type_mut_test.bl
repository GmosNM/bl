#load "std/utest.bl"
using std::utest;

#test
fn fund_types() i32 {
  // impl i32
  {
    mut _i32 = 0;
    if _i32 != 0 { return FAIL; }
  }

  {
    mut _i32 = 1 + 2;
    if _i32 != 3 { return FAIL; }
  }

  // impl f32
  {
    mut _f32 = 0.f;
    if _f32 != 0.f { return FAIL; }
  }

  // impl string
  {
    mut _str = "hello";
    if _str != "hello" { return FAIL; }
  }

  // impl bool
  {
    mut _bool = false;
    if _bool { return FAIL; }
  }

  return SUCCESS;
}

#test
fn custom_types() i32 {
  mut _A = A {
    .i = 10,
    .j = 20
  };

  return SUCCESS;
}

#test
fn enum_types() i32 {
  mut _e = E::A;

  if _e != E::A { return FAIL; }

  _e = E::B;
  if _e != E::B { return FAIL; }

  return SUCCESS;
}

#test
fn pointer_types() i32 {
  mut _foo i32 = 0;
  mut _foo_ptr = &_foo;

  if *_foo_ptr != 0 { return FAIL; }

  mut _A = A { .i = 0, .j = 0 };
  mut _A_ptr = &_A;

  if _A_ptr->i != 0 { return FAIL; }

  return SUCCESS;
}

struct A {
  i i32,
  j i32
}

enum E {
  A, B, C
}