#test "fundamenatal value initializers" {
  a := s32 { 666 };
  assert(a == 666);

  b := u32 { 666 };
  assert(b == 666);

  c := bool { true };
  assert(c);
};

#test "custom types const initializers" {
  Foo : struct {
    i s32,
    j s32
  };

  foo := Foo { .i = 1, .j = 2 };
  assert(foo.i == 1);
  assert(foo.j == 2);

  foo = Foo { .j = 1, .i = 2 };
  assert(foo.i == 2);
  assert(foo.j == 1);

  //a : 1;
  //foo = Foo { .j = a, .i = 2 };
};

#test "custom types variable initializers" {
  Foo : struct {
    i s32,
    j s32
  };

  i := 1;
  j := 2;

  foo := Foo { .i = i, .j = j };
  assert(foo.i == 1);
  assert(foo.j == 2);
};

#test "immutable struct instance" {
  Foo : struct {
    i s32,
    j s32
  };

  foo : Foo { .i = 1, .j = 2 };
  assert(foo.i == 1);
  assert(foo.j == 2);
};

#test "nested custom types" {
  Foo : struct {
    i s32
  };

  Bar : struct {
    foo Foo,
    j s32
  };

  bar : Bar {
    .foo = Foo { .i = 10 },
    .j = 20
  };

  assert(bar.foo.i == 10);
  assert(bar.j == 20);
};

#test "tuples" {
  foo : struct { s32, s32 } { ._0 = 10, ._1 = 20 };
};

/*#test "array initializer" {
  arr s32 [3];
  arr = s32 [3] { 0, 1, 2 };
};*/

g_test_init_Foo : struct {
  i s32,
  j s32
};

// TODO: init list must be constant, this has not been handled yet!!!
g_test_init_a := g_test_init_Foo { .i = 10, .j = 20 };

#test "global initializers" {
  assert(g_test_init_a.i == 10);
  assert(g_test_init_a.j == 20);
};