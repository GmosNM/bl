#load "std/utils.bl"

#private
test_random_number_range_1 :: fn () #test {
    random_seed_time();
    loop i := 0; i < 1000; i += 1 {
        r :: random_number();
        test_true(r >= 0);
        test_true(r <= 1);
    }
}

test_random_number_range_2 :: fn () #test {
    random_seed_time();
    loop i := 0; i < 1000; i += 1 {
        r :: random_number(1, 99);
        test_gt(r, 0);
        test_lt(r, 100);
    }
}

flags_1 :: fn () #test {
    F1 : u32 : 1;
    F2 : u32 : 2;
    F3 : u32 : 4;
    f: u32;
    test_false(is_flag(f, F1));
    test_false(is_flag(f, F2));
    test_false(is_flag(f, F3));
    
    set_flag(&f, F1);
    test_true(is_flag(f, F1));
    test_false(is_flag(f, F2));
    test_false(is_flag(f, F3));
    
    set_flag(&f, F2);
    test_true(is_flag(f, F1));
    test_true(is_flag(f, F2));
    test_false(is_flag(f, F3));
    
    set_flag(&f, F3);
    test_true(is_flag(f, F1));
    test_true(is_flag(f, F2));
    test_true(is_flag(f, F3));
    
    clr_flag(&f, F3);
    test_true(is_flag(f, F1));
    test_true(is_flag(f, F2));
    test_false(is_flag(f, F3));

    clr_flag(&f, F2);
    test_true(is_flag(f, F1));
    test_false(is_flag(f, F2));
    test_false(is_flag(f, F3));

    clr_flag(&f, F1);
    test_false(is_flag(f, F1));
    test_false(is_flag(f, F2));
    test_false(is_flag(f, F3));

    set_flags(&f, F1, F2);
    test_true(is_flag(f, F1));
    test_true(is_flag(f, F2));
    test_false(is_flag(f, F3));

    test_true(is_all_flags(f, F1, F2));
    test_true(is_all_flags(f, F2));

    clr_flags(&f, F1, F2);
    test_false(is_flag(f, F1));
    test_false(is_flag(f, F2));
    test_false(is_flag(f, F3));
}

flags_enum :: fn () #test {
    F :: enum #flags {
        F0 = 0;
        F1;
        F2;
        F3;
    };
    
    f: F;
    test_false(is_flag(f, F.F1));
    test_false(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));
    
    set_flag(&f, F.F1);
    test_true(is_flag(f, F.F1));
    test_false(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));
    
    set_flag(&f, F.F2);
    test_true(is_flag(f, F.F1));
    test_true(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));
    
    set_flag(&f, F.F3);
    test_true(is_flag(f, F.F1));
    test_true(is_flag(f, F.F2));
    test_true(is_flag(f, F.F3));
    
    clr_flag(&f, F.F3);
    test_true(is_flag(f, F.F1));
    test_true(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));

    clr_flag(&f, F.F2);
    test_true(is_flag(f, F.F1));
    test_false(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));

    clr_flag(&f, F.F1);
    test_false(is_flag(f, F.F1));
    test_false(is_flag(f, F.F2));
    test_false(is_flag(f, F.F3));
}

flags_make:: fn () {
    F1 : u32 : 1;
    F2 : u32 : 2;
    F3 : u32 : 4;
    f: u32;

    test_eq(make_flags(0), 0);
    test_eq(make_flags(F1), 1);
    test_eq(make_flags(F1, F2), F1 | F2);
    test_eq(make_flags(F1, F3), F1 | F3);
}
