#private
Foo :: struct {
    a: s32;
    b: s32;
}

poly_1 :: fn (a: ?T) {}

test_poly_1 :: fn () #test {
    poly_1(10);
    poly_1(true);
    poly_1({:Foo: 0});
}

poly_2 :: fn (a: ?T, b: T) {}

test_poly_2 :: fn () #test {
    poly_2(10, 10);
    poly_2(true, false);
    poly_2({:Foo: 0}, {:Foo: 0});
}

poly_3 :: fn (a: T, b: ?T) {}

test_poly_3 :: fn () #test {
    poly_3(10, 10);
    poly_3(true, false);
    poly_3({:Foo: 0}, {:Foo: 0});
}

swap :: fn (a: *?T, b: *T) {
    tmp :: @a;
    @a = @b;
    @b = tmp;
}

test_poly_swap_1 :: fn () #test {
    a := 10;
    b := 20;    
    swap(&a, &b);
    test_eq(a, 20);
    test_eq(b, 10);
}

test_poly_swap_2 :: fn () #test {
    a := {:Foo: 10, 10};
    b := {:Foo: 20, 20};    
    swap(&a, &b);
    test_eq(a.a, 20);
    test_eq(a.b, 20);
    test_eq(b.a, 10);
    test_eq(b.b, 10);
}

sum :: fn (values: []?T) T {
    result: T;
    loop i := 0; i < values.len; i += 1 {
        result += values[i];
    }
    return result;
}

test_poly_sum_1 :: fn () #test {
    arr :: {:[10]s32: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    test_eq(sum(arr), 45);
}

test_poly_sum_2 :: fn () #test {
    dyn: [..]s32;
    defer array_terminate(&dyn);
    loop i := 0; i < 10; i += 1 {
        array_push(&dyn, i);
    }

    test_eq(sum(dyn), 45);
}

test_poly_sum_3 :: fn () #test {
    slice: []s32;
    slice_init(&slice, 10);
    defer slice_terminate(&slice);
    loop i := 0; i < slice.len; i += 1 {
        slice[i] = i;
    }    
    test_eq(sum(slice), 45);
}

callback_1 :: fn (call_me: *fn (arg: ?T)) {
    call_me(10);
}

test_poly_callback_1 :: fn () #test {
    callback_1(&fn (arg: s32){});
    callback_1(&fn (arg: u8){});
    callback_1(&fn (arg: s64){});
}

test_poly_local_1 :: fn () #test {
    local_poly :: fn (a: ?T) T {
        return a;
    };
    test_eq(local_poly(10), 10);
}

recursive :: fn (v: ?T) T {
    if v < 10 { 
        v = recursive(v+1);
    }
    return v;
}

test_recursive_poly :: fn () #test {
    test_eq(recursive(0), 10);    
}