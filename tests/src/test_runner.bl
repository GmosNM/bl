/*
 * Unit test runner
 * ----------------
 */

module bl_tester {
  module c {
    public extern fn printf(msg string, s string) i32;
    public extern fn puts(msg string) i32;
    public extern fn system(cmd string) i32;
    public extern fn getchar() i32;
    public extern fn scanf(s string, buf ptr) i32;
    public extern fn malloc(s i32) ptr;
    public extern fn free(p ptr);
    public extern fn strcmp(a ptr, b string) i32;
  }

  const unit_count i32 = 20;
  
  struct unit_t {
    cmd string,
    name string,
    state i32
  }
  
  fn new_unit(cmd string, name string) unit_t {
    var unit unit_t;
    unit.cmd = cmd;
    unit.name = name;
    unit.state = 0;
    return unit;
  }
  
  fn print_unit_result(unit unit_t) {
    var str_state string;
    if (unit.state == 0)
      str_state = "OK";
    else  
      str_state = "FAIL";
  
    c::printf("* [%s] ", str_state);
    c::printf("%s\n", unit.name);
  }

  fn test_all(units unit_t[unit_count]) {
    var i i32;
    while (i < unit_count) {
      var cmp_result i32 = c::system(units[i].cmd);
      units[i].state = cmp_result;
      i = i + 1;
    }
  
    c::puts("*****************************************");
    c::puts("* Unit Testing Results");
    c::puts("*");
  
    i = 0;
    while (i < unit_count) {
      print_unit_result(units[i]);
      i = i + 1;
    }
  
    c::puts("*****************************************");
  }

  fn main() {
    var units unit_t[unit_count];
  
    units[0]  = new_unit("blc -run decl_def_values_test.bl", "decl def values test");
    units[1]  = new_unit("blc -run enum_test.bl", "enum test");
    units[2]  = new_unit("blc -run expression_test.bl", "expression test");
    units[3]  = new_unit("blc -run factorial_test.bl", "factorial test");
    units[4]  = new_unit("blc -run if_test.bl", "if test");
    units[5]  = new_unit("blc -run loop_test.bl", "loop test");
    units[6]  = new_unit("blc -run method_ordering_test.bl", "method ordering test");
    units[7]  = new_unit("blc -run module_test.bl", "module test");
    units[8]  = new_unit("blc -run simple_array_test.bl", "simple array test");
    units[9]  = new_unit("blc -run simple_assignment_test.bl", "simple assignment test");
    units[10] = new_unit("blc -run simple_ext_call_test.bl", "simple ext call test");
    units[11] = new_unit("blc -run simple_method_call_test.bl", "simple method call test");
    units[12] = new_unit("blc -run struct_test.bl", "struct test");
    units[13] = new_unit("blc -run sub_statement_test.bl", "sub statement test");
    units[14] = new_unit("blc -run while_test.bl", "while test");
    units[15] = new_unit("blc -run const_test.bl", "const test");
    units[16] = new_unit("blc -run eval_test.bl", "const evaluator test");
    units[17] = new_unit("blc -run unary_expr_test.bl", "unary expression test");
    units[18] = new_unit("blc -run sizeof_test.bl", "size of test");
    units[19] = new_unit("blc -run load_test.bl", "load test");
  
    c::puts("Welcome to Biscuit Language Tester");
    var cmd ptr = c::malloc(1024); 
    loop {
      c::printf(">> ", "");
      c::scanf("%s", cmd);

      if (c::strcmp(cmd, "exit") == 0)
        break;
      else if (c::strcmp(cmd, "all") == 0) {
        test_all(units);       
      } else {
        c::puts(">> unknown command");
      }
    }

    c::free(cmd);
  }
}