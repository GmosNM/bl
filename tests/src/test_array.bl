/*#test "count buildin" {
  arr s32[100];
  assert(arr.count == 100);
};

#test "fundamental types" {
  arr s32[100];
  loop (i usize := 0; i < arr.count; i += 1) {
    arr[i] = cast(s32) i;
  }

  loop (i usize := 0; i < arr.count; i += 1) {
    assert(arr[i] == cast(s32) i);
  }
};

#test "custom structure types" {
  Foo : struct {
    i s32
  };

  foos Foo[100];
  foos.count;

  loop (i usize := 0; i < foos.count; i += 1) {
    foos[i].i = cast(s32) i;
  }

  loop (i usize := 0; i < foos.count; i += 1) {
    assert(foos[i].i == cast(s32) i);
  }
};

#test "nested array" {
  Bar : struct {
    is s32[32]
  };

  bar Bar;
  loop (i usize := 0; i < bar.is.count; i += 1) {
    bar.is[i] = cast(s32) i;
  }

  loop (i usize := 0; i < bar.is.count; i += 1) {
    assert(bar.is[i] == cast(s32) i);
  }
};

#test "constant expr size" {
  B usize : 5;
  C usize : 20 + B;
  arr1 s32[cast(usize) (10 + 2 * 3) * 2];
  arr2 s32[cast(usize) 200 + 1 + C]; 

  assert(arr1.count == 32);
  assert(arr2.count == 226);
};*/

#test "size based on function call" {
/*
  get_size : fn () usize {
    return 10;
  };

  arr1 s32[#run get_size()];
  arr2 s32[#run get_size() * #run get_size()];
  assert(arr1.count == 10);
  assert(arr2.count == 100);*/
};