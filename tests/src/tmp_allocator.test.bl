#import "std/debug_allocator"
#import "std/test"
#import "std/thread"

main :: fn () s32 {
    using std;
    debug_allocator = debug_allocator_make(application_context.allocator);
    defer debug_allocator_terminate(&debug_allocator);
    application_context.allocator = &debug_allocator;

    return test_run();    
}

#private

debug_allocator: std.DebugAllocator;
allocator :: &default_temporary_allocator;

contcurent_allocation :: fn () #test {
    using std;
    WORKER_COUNT :: 8;
    workers: [WORKER_COUNT]Thread;
    loop i := 0; i < workers.len; i += 1 {
        t, err :: thread_create(&worker);
        test_ok(err);
        workers[i] = t;
    }
    loop i := 0; i < workers.len; i += 1 {
        thread_join(workers[i]);
    }
}

worker :: fn (_: *u8) s32 {
    defer temporary_release();

    TEST_COUNT :: 1000;
    loop j := 0; j < TEST_COUNT; j += 1 {
        defer temporary_reset();
        data: [TEST_COUNT]*s32;
        loop i := 0; i < data.len; i += 1 {
            mem, err :: allocate_memory(allocator, sizeof(s32));
            test_ok(err);
            data[i] = auto mem;
            @data[i] = i;
        }
        loop i := 0; i < data.len; i += 1 {
            test_eq(@data[i], i);
        }
    }
    return 0;
}

