/*
 * Unit test
 * -----------
 * Sizeof buildin test 
 */

#load "std/utest.bl"
using std::utest;

module size_of {
  struct A {
    i i32,
    f f64
  }
  
  struct B {
    a A,
    i i32
  }
  
  enum C i32 {
    Hello
  }
  
  enum D i64 {
    Hello
  }
  
  #test 
  fn sizeof_test() i32 {
    if sizeof(i8) != 1 { return FAIL; }
    if sizeof(i16) != 2 { return FAIL; }
    if sizeof(i32) != 4 { return FAIL; }
    if sizeof(i64) != 8 { return FAIL; }

    if sizeof(u8) != 1 { return FAIL; }
    if sizeof(u16) != 2 { return FAIL; }
    if sizeof(u32) != 4 { return FAIL; }
    if sizeof(u64) != 8 { return FAIL; }

    if sizeof(f32) != 4 { return FAIL; }
    if sizeof(f64) != 8 { return FAIL; }

    if sizeof(size_t) != 8 { return FAIL; }
    if sizeof(string) != 8 { return FAIL; }
    if sizeof(char) != 1 { return FAIL; }
    if sizeof(bool) != 1 { return FAIL; }

    if sizeof(A) != 16 { return FAIL; }
    if sizeof(B) != 24 { return FAIL; }
    if sizeof(C) != 4 { return FAIL; }
    if sizeof(D) != 8 { return FAIL; }
  
    return SUCCESS;
  }
}