#private

swap_test_1 :: fn () #test {
    a := 10;
    b := 20;
    swap(&a, &b);
    test_eq(a, 20);
    test_eq(b, 10);
}

swap_test_2 :: fn () #test {
    Foo :: struct { a: s64; b: s64; c: s64; };
    
    a := {:Foo: 10, 20, 30};
    b := {:Foo: 30, 20, 10};
    swap(&a, &b);
    test_eq(a.a, 30);
    test_eq(a.b, 20);
    test_eq(a.c, 10);
    
    test_eq(b.a, 10);
    test_eq(b.b, 20);
    test_eq(b.c, 30);
}

alloc_test_1 :: fn () #test {
    v :: alloc(64);
    defer free(v);
    test_not_null(v);
}

free_test_1 :: fn () #test {
    free(null);
}

range_test_1 :: fn () #test {
    arr: [10]s32;
    r :: slice_range(arr, 0);
    test_eq(r.ptr, arr.ptr);
    test_eq(r.len, arr.len);
}

range_test_2 :: fn () #test {
    arr: [10]s32;
    r :: slice_range(arr, 9);
    test_eq(r.len, 1);
}

range_test_3 :: fn () #test {
    arr :: {:[3]s32: 1, 2, 3};
    r :: slice_range(arr, 0, 1);
    test_eq(r.len, 1);
    test_eq(r[0], 1);
}

range_test_4 :: fn () #test {
    arr :: {:[5]s32: 1, 2, 3, 4, 5};
    r :: slice_range(arr, 1, arr.len-1);
    test_eq(r.len, 3);
    test_eq(r[0], 2);
    test_eq(r[1], 3);
    test_eq(r[2], 4);
}

range_test_5 :: fn () #test {
    arr :: {:[5]s32: 1, 2, 3, 4, 5};
    r :: slice_range(arr, 0, arr.len);
    test_eq(r.len, 5);
    test_eq(r[0], 1);
    test_eq(r[1], 2);
    test_eq(r[2], 3);
    test_eq(r[3], 4);
    test_eq(r[4], 5);
}