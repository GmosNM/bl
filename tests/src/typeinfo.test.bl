#private
typeinfo_s8 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(s8);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s8));
    assert(info.bit_count == auto sizeof(s8) * 8);
    assert(info.is_signed);
}

typeinfo_s16 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(s16);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s16));
    assert(info.bit_count == auto sizeof(s16) * 8);
    assert(info.is_signed);
}

typeinfo_s32 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(s32);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s32));
    assert(info.bit_count == auto sizeof(s32) * 8);
    assert(info.is_signed);
}

typeinfo_s64 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(s64);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(s64));
    assert(info.bit_count == auto sizeof(s64) * 8);
    assert(info.is_signed);
}

typeinfo_u8 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(u8);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u8));
    assert(info.bit_count == auto sizeof(u8) * 8);
    assert(!info.is_signed);
}

typeinfo_u16 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(u16);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u16));
    assert(info.bit_count == auto sizeof(u16) * 8);
    assert(!info.is_signed);
}

typeinfo_u32 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(u32);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u32));
    assert(info.bit_count == auto sizeof(u32) * 8);
    assert(!info.is_signed);
}

typeinfo_u64 :: fn () #test {
    info := cast(*TypeInfoInt) typeinfo(u64);
    assert(info.base.kind == TypeKind.Int);
    assert(info.base.size_bytes == sizeof(u64));
    assert(info.bit_count == auto sizeof(u64) * 8);
    assert(!info.is_signed);
}

typeinfo_f32 :: fn () #test {
    info := cast(*TypeInfoReal) typeinfo(f32);
    assert(info.base.kind == TypeKind.Real);
    assert(info.base.size_bytes == sizeof(f32));
    assert(info.bit_count == auto sizeof(f32) * 8);
};

typeinfo_f64 :: fn () #test {
    info := cast(*TypeInfoReal) typeinfo(f64);
    assert(info.base.kind == TypeKind.Real);
    assert(info.base.size_bytes == sizeof(f64));
    assert(info.bit_count == auto sizeof(f64) * 8);
};

typeinfo_fn1 :: fn () #test {
    T :: fn (i: s32, j: bool) s32 { return 0; };
    info := cast(*TypeInfoFn) typeinfo(T);

    assert(info.base.kind == TypeKind.Fn);
    assert(info.args.len == 2);
    assert(!info.is_vargs);
    assert(info.ret_type == typeinfo(s32));

    { // arg1
        ai :: &info.args[0];
        test_eq(ai.name, "i");
        assert(ai.base_type == typeinfo(s32));
    }

    { // arg2
        ai :: &info.args[1];
        test_eq(ai.name, "j");
        assert(ai.base_type == typeinfo(bool));
    }
};

typeinfo_fn2 :: fn () #test {
    T : fn (s32, bool) s32 : fn (i: s32, j: bool) s32 { return 0; };
    info := cast(*TypeInfoFn) typeinfo(T);

    assert(info.base.kind == TypeKind.Fn);
    assert(info.args.len == 2);
    assert(!info.is_vargs);
    assert(info.ret_type == typeinfo(s32));

    { // arg1
        ai :: &info.args[0];
        test_eq(ai.name, "i");
        assert(ai.base_type == typeinfo(s32));
    }

    { // arg2
        ai :: &info.args[1];
        test_eq(ai.name, "j");
        assert(ai.base_type == typeinfo(bool));
    }
};

typeinfo_fn3 :: fn () #test {
    ptr := &fn (i: s32, j: bool) s32 { return 0; };
    info_ptr := cast(*TypeInfoPtr) typeinfo(ptr);
    assert(info_ptr.base.kind == TypeKind.Ptr);
    info := cast(*TypeInfoFn) info_ptr.pointee_type;
    assert(info.base.kind == TypeKind.Fn);
    test_eq(info.args.len, 2);
    test_false(info.is_vargs);
    assert(info.ret_type == typeinfo(s32));

    { // arg1
        ai :: &info.args[0];
        test_eq(ai.name, "i");
        assert(ai.base_type == typeinfo(s32));
    }

    { // arg2
        ai :: &info.args[1];
        test_eq(ai.name, "j");
        assert(ai.base_type == typeinfo(bool));
    }
};

typeinfo_ptr :: fn () #test {
    T :: *s32;
    info := cast(*TypeInfoPtr) typeinfo(T);

    assert(info.base.kind == TypeKind.Ptr);
    assert(info.pointee_type == typeinfo(s32));
};

typeinfo_array :: fn () #test {
    T :: [10]s32;
    info := cast(*TypeInfoArray) typeinfo(T);

    assert(info.base.kind == TypeKind.Array);
    test_eq(info.name, "T");
    assert(info.base.size_bytes == sizeof(T));
    assert(info.elem_type == typeinfo(s32));
    assert(info.len == 10);
};

typeinfo_enum :: fn () #test {
    T :: enum s32 { A; B; C };
    info := cast(*TypeInfoEnum) typeinfo(T);

    assert(info.base.kind == TypeKind.Enum);
    assert(info.base_type != null);
    assert(info.variants.len == 3);
    assert(info.variants[0].value == 0);
    assert(info.variants[1].value == 1);
    assert(info.variants[2].value == 2);
};

typeinfo_struct1 :: fn () #test {
    T1 :: struct { A: s32; B: bool; C: f32 };
    info := cast(*TypeInfoStruct) typeinfo(T1);

    assert(info.base.kind == TypeKind.Struct);
    assert(info.base.size_bytes == sizeof(T1));
    assert(info.members.len == 3);
    assert(info.members[0].index == 0);
    assert(info.members[1].index == 1);
    assert(info.members[2].index == 2);
};

typeinfo_struct2 :: fn () #test {
    T2 :: struct { A: s32; B: bool; C: f32 };
    Alias :: T2;
    info := cast(*TypeInfoStruct) typeinfo(Alias);

    test_true(info.base.kind == TypeKind.Struct);
    test_eq(info.base.size_bytes, sizeof(T2));
    test_eq(info.members.len, 3);
    test_eq(info.members[0].index, 0);
    test_eq(info.members[1].index, 1);
    test_eq(info.members[2].index, 2);
};

typeinfo_group :: fn () #test {
    F1 :: fn (i: s32) {};
    F2 :: fn (j: string) {};
    T :: fn { F1; F2; };
    info := cast(*TypeInfoFnGroup)typeinfo(T);
    test_true(info.base.kind == TypeKind.FnGroup);
    test_eq(info.variants.len, 2);
    test_true(info.variants[0] == typeinfo(F1));
    test_true(info.variants[1] == typeinfo(F2));
}

typeinfo_comparison1 :: fn () #test {
    {
        T1 :: struct {
            i: s32;
            j: bool;
        };

        T2 :: T1;

        test_true(typeinfo(T1) == typeinfo(T2));
    }

    {
        T1 :: struct {
            i: s32;
            j: bool;
        };

        T2 :: struct {
            i: s32;
            j: bool;
        };

        test_true(typeinfo(T1) != typeinfo(T2));
    }

    test_true(typeinfo(struct { i: s32 }) == typeinfo(struct { i: s32 }));
}

typeinfo_comparison2 :: fn () #test {
    T1 :: fn () {
    };

    T2 :: fn () {
    };

    test_true(typeinfo(T1) == typeinfo(T2));
}

helpers_enum_count :: fn () #test {
    Enum :: enum {
        A; B; C;
    };

    c :: enum_count(Enum);
    test_eq(c, 3);

    // Should be comptime!
    arr: [enum_count(Enum)]s32;
    test_eq(arr.len, 3);
}

number_type_1 :: fn () #test {
    test_eq(typeinfo(number_type(1, true)), typeinfo(s8));
    test_eq(typeinfo(number_type(2, true)), typeinfo(s16));
    test_eq(typeinfo(number_type(4, true)), typeinfo(s32));
    test_eq(typeinfo(number_type(8, true)), typeinfo(s64));
    test_eq(typeinfo(number_type(1, false)), typeinfo(u8));
    test_eq(typeinfo(number_type(2, false)), typeinfo(u16));
    test_eq(typeinfo(number_type(4, false)), typeinfo(u32));
    test_eq(typeinfo(number_type(8, false)), typeinfo(u64));
}
