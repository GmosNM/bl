T :: struct {
    a: s32 #tag std.U64_MAX;
    b: s32 #tag std.U32_MAX;
    c: s32;
    d: s32 #tag 1000;
}

main :: fn () s32 {
    print("%\n", std.U64_MAX);
    print("%\n", std.U32_MAX);
    info :: cast(*TypeInfoStruct) typeinfo(T);
    loop i := 0; i < info.members.len; i += 1 {
        member :: info.members[i];
        print("% - %\n", member.name, member.tag);
    }
    return 0;
}

// rename: struct mir_instr_* -> struct instr

// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.WINDOWS {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}
*/

