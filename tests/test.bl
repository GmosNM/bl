#import "extra/glwindow"
#import "extra/draw"

main :: fn () s32 {
    using win32;

    glwindow.init();
    defer glwindow.terminate();

    opt := glwindow.make_default_create_window_options();
    opt.title  = "My Window";
    opt.width  = 1024;
    opt.height = 768;

    window, err :: glwindow.create_window(&opt);
    if err { panic(err); }
    defer glwindow.destroy_window(window);

    draw.init(opt.width, opt.height);
    defer draw.terminate();

    print("Vendor:     %\n", gl_get_vendor());
    print("Renderer:   %\n", gl_get_renderer());
    print("Version:    %\n", gl_get_version());

    position: glm.v2;
    should_quit := false;
    loop !should_quit {
        glwindow.poll_window_events();

        loop i := 0; i < glwindow.frame_events.len; i += 1 {
            event :: &glwindow.frame_events[i];
            using glwindow.EventKind;
            switch event.kind {
                QUIT { should_quit = true; }
                MOUSE_LB_DOWN { print("Down!\n"); }
                MOUSE_LB_UP   { print("Up!\n");   }
                KEY_PRESS     {
                    using glwindow;
                    key :: event.data.key_code;
                    if key == KEY_UP    { position.y -= 1.f; }
                    if key == KEY_DOWN  { position.y += 1.f; }
                    if key == KEY_LEFT  { position.x -= 1.f; }
                    if key == KEY_RIGHT { position.x += 1.f; }
                }
                default;
            }
        }

        draw.clear_color(glm.v4.{ 0.f, 1.f, 1.f, 1.f });
        draw.set_shader_color();

        draw.rect_centered(position.x, position.y, 100.f, 100.f, glm.v4.{ 1.f, 0.f, 0.f, 1.f });

        draw.flush();
        glwindow.swap_buffers(window);
    }

    print("DONE\n");
    return 0;
}
