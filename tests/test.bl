/* playground */

#load "std/print.bl"
#load "std/memory.bl"

main :: fn () s32 {
    print("% % %\n", 10, true, "hello");

    i := 10;
    ptr := &i;

    Enum :: enum u8 { A, B, C };
    e := Enum.A;

    Foo :: struct { first: s32, second: bool};
    foo := {:Foo: 0};

    print_info(typeinfo(i));
    print("\n");

    print_info(typeinfo(ptr));
    print("\n");

    print_info(typeinfo(e));
    print("\n");

    print_info(typeinfo(foo));
    print("\n");
    
    return 0;
};

print_info :: fn (info: *TypeInfo) {
    if info.kind == TypeKind.Ptr {
        print("*");
        i := cast(*TypeInfoPtr) info;
        print_info(i.pointee);

    } else if info.kind == TypeKind.Enum {
        print("enum ");
        i := cast(*TypeInfoEnum) info;
        print_info(i.base_type);

    } else if info.kind == TypeKind.Bool {
        print("bool");

    } else if info.kind == TypeKind.Struct {
        print("struct {");
        i := cast(*TypeInfoStruct) info;

        loop j := 0; j < i.members.len; j += 1 {
            tmp := i.member_names[j];
            print("%: ", tmp);
            print_info(i.members[j]);
            if j < i.members.len - 1 { print(", "); }
        }

        print("}");
    } else if info.kind == TypeKind.Int {
        i := cast(*TypeInfoInt) info;

        if i.is_signed {
            print("s");
        } else {
            print("u");
        }
        
        print("%", i.bitcount);
    }
};

