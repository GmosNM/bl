#import "std/buffer_allocator"

main :: fn () s32 {
    std.my_abort();
    std.arr_push()
    std.arr_clear()
    return 0;
}

#scope std
my_abort :: fn { _my_abort; }
arr_push :: fn () {}
arr_clear :: fn () {}

#private
_my_abort :: fn () {
    print("hello!\n");
}

// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.windows {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}
*/

