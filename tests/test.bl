// Polymorph
// Disable pointers to polymorph functions.

add :: fn (a: ?T, b: T) T {
    return a + b;
}

print_vec :: fn (v: ?T) {
    print("x = %\n", v.x);
    print("y = %\n", v.y);
    print("z = %\n", v.z);
}

maximum :: fn (a: ?T, b: T) T #inline {
    if a > b { return a; }
    return b;
}

table_insert :: fn (key: ?TKey, value: ?TValue) {
    print("[%] = %\n", key, value);
}

my_table_insert :: fn (key: ?TKey, value: ?TValue) {
    table_insert(key, value);
}

swap :: fn (a: *?T, b: *T) {
    tmp :: ^a;
    ^a = ^b;
    ^b = tmp;
}

sum :: fn (values: []?T) T {
    result: T;
    loop i := 0; i < values.len; i += 1 {
        result += values[i];
    }
    return result;
}

foo :: fn (a: ?T, b : T = 10) {
    print("a = %\nb = %\n", a, b);
}

Vec :: struct {
    x: s32;
    y: s32;
    z: s32;
}

main :: fn () s32 {
    n1 : s64 = 10;
    n2 : u32 = 20;
    n3 :: 0.5f;
    n4 :: 0.5;
    
    print("%\n", add(n1, n1));
    print("%\n", add(n2, n2));
    print("%\n", add(n3, n3));
    print("%\n", add(n4, n4));
    
    v := {:Vec: 10, 20, 30};
    print_vec(v);
    
    print("%\n", maximum(10, 20));
    print("%\n", maximum(34.4f, 20.f));
    
    table_insert(10, "hello!");
    table_insert(30, "foo!");
    table_insert(40, "bar!");
    table_insert(20, 10);
    my_table_insert(20, "My insert!");

    first := 10;
    second := 20;    
    print("Before % vs %\n", first, second);
    swap(&first, &second);
    print("After  % vs %\n", first, second);
    
    arr :: {:[10]s32: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    print("sum = %\n", sum(arr));
    
    dyn: [..]s32;
    defer array_terminate(dyn);
    loop i := 0; i < 100; i += 1 {
        array_push(dyn, i);
    }
    print("sum = %\n", sum(dyn));
    foo(20);
    
    slice: []s32;
    slice_init(slice, 10);
    defer slice_terminate(slice);
    loop i := 0; i < slice.len; i += 1 {
        slice[i] = i;
    }    
    print("sum = %\n", sum(slice));
    
    print_vec(10);
    return 0;
}

