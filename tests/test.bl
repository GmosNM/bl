/* playground */
#load "std/string.bl"
#load "std/test.bl"

/////////////////////////////////////////////////////
#load "src/intrinsics.test.bl"
#load "src/dynamic_arrays.test.bl"
#load "src/print.test.bl"
#load "src/arrtoslice.test.bl"
#load "src/casting.test.bl"
#load "src/compounds.test.bl"
#load "src/constant_composition.test.bl"
#load "src/enums.test.bl"
#load "src/fib.test.bl"
#load "src/fn.test.bl"
#load "src/fundamental_types.test.bl"
#load "src/globals.test.bl"
#load "src/hash_table.test.bl"
#load "src/ifs.test.bl"
#load "src/local_variables.test.bl"
#load "src/loops.test.bl"
#load "src/operators.test.bl"
#load "src/pointers.test.bl"
#load "src/simple_assignments.test.bl"
#load "src/sizeof.test.bl"
#load "src/slice_init.test.bl"
#load "src/strings.test.bl"
#load "src/structs.test.bl"
#load "src/type_infer.test.bl"
#load "src/union.test.bl"
#load "src/typeinfo.test.bl"
#load "src/vargs.test.bl"
/////////////////////////////////////////////////////

main :: fn () s32 {
    //return test_run(); 

    cases :: testcases();
    loop i := 0; i < cases.len; i += 1 {
        print("[%] name = %\n", i, cases[i].name);
        cases[i].func();
    }

    return 0;
} 

