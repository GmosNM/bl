Data :: struct {
    a: s32;
    b: bool;
    c: f32;
}

main :: fn () s32 {
    x := Data.{ c = 20.f, a = 10 };
    arr := [2]s32.{ 10, 20 };
    print("x %\n", x);

    return 0;
}
// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.WINDOWS {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}

Foo :: struct {
    a: s32;
    b: s32;
}

foo := Foo.{}
foo: Foo = .{};
foo := {:Foo: ... }

*/
