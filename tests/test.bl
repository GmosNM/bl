/* playground */

#load "std/print.bl"
#load "std/memory.bl"

main :: fn () s32 {
    status := init();
    defer terminate();

    if status == 1 {
        return -1;
        // defer here
    }
    
    return 0;
    // defer here
};

init :: fn () s32 {
    return 1;
};

terminate :: fn () {
};

/*

- defer must be executed at the end of the scope
- when defer has not been reached it should not be executed
- return should call all previous defers
- defers must be called after return value is evaluated
- generate only once

if_block:
    ...
    eval return value
    br defer_block

body_block:
    ...
    eval return value
    br defer_block

return_block_A:
    ret value

return_block_B:
    ret value

defer_block: 
    call terminate()
    br return_block_A or return_block_B

*/


