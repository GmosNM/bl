main :: fn () s32 {
    foo :: "Hello"; // []u8
    bar: string;

    l, r: []u8;
    str_split(foo, &l, &r);
    str_split(bar, &l, &r);
    
    return 0;
}

str_split :: fn (in: []u8, l: *[]u8, r: *[]u8) {
}

// rename: struct mir_instr_* -> struct instr

// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.WINDOWS {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}

Foo :: struct {
    a: s32;
    b: s32;
}

foo := Foo.{}
foo := {:Foo: ... }

*/

