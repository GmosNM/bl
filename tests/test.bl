/* testing playground */

#load "libc.bl"

main : fn () s32 {
  pointers();
  ifs();
  loops();
  local_fn();
  globals();
  constants();
  lambdas();
  structs();
  enums();

  return 0;
};

pointers : fn () {
  data s32;
  ptr *s32 := &data;
  ptr = &data;

  if ptr == null {
    puts("ptr is null\n");
  } else {
    puts("ptr is not null\n");
  }

  *ptr = 666;

  printf("*ptr = %d\n", *ptr); // implement should load in ir
  printf("data = %d\n", data);
};



ifs : fn () {
  a := true;
  if a {
    puts("ok");
    if !a {
      puts("INVALID");
    } else {
      puts("ok");
    }
  } else {
    puts("INVALID");
  }
};



loops : fn () {
  i := 0;
  loop {
    if i > 9 { break; }
    printf("i = %d, ", i);
    i = i + 1;
    continue;
  }
  puts("done");

  i = 0;
  while i < 10 {
    printf("i = %d, ", i);
    i = i + 1;
    continue;
  }
  puts("done");
};



local_fn : fn () {
  add : fn (a s32, b s32) s32 {
    return a + b; 
  };

  result := add(10, 20);
  printf("result = %d\n", result);
};




_global1 := 10;
_global2 := 10 + 15;

globals : fn () {
  printf("_global1 = %d\n", _global1);
  printf("_global2 = %d\n", _global2);

  _global1 = 100;

  _globals();
};

_globals : fn () {
  printf("_global1 = %d\n", _global1);
  printf("_global2 = %d\n", _global2);
};



constants : fn () {
  A : 666;
  B : A;
  C : B;

  True : true;

  if True {
    printf("A = %d\n", A);
    printf("B = %d\n", B);
    printf("C = %d\n", C);
  } else {
    puts("INVALID");
  }
};


structs : fn () {
  Local : struct {
    i s32,
    bar Bar
  };

  foo Foo;
  local Local;

  foo.i = 10;
  foo.j = 20;

  printf("foo.i = %d\n", foo.i);
  printf("foo.j = %d\n", foo.j);

  local.i = 666;
  local.bar.i = 10;
  local.bar.j = 20;
  printf("local.i = %d\n", local.i);
  printf("local.bar.i = %d\n", local.bar.i);
  printf("local.bar.j = %d\n", local.bar.j);

  foo_ptr := &foo;
  printf("foo_ptr->i = %d\n", foo_ptr->i);
  printf("foo_ptr->j = %d\n", foo_ptr->j);

  printf("(*foo_ptr).i = %d\n", (*foo_ptr).i);
  printf("(*foo_ptr).j = %d\n", (*foo_ptr).j);
};

Foo : struct {
  i s32,
  j s32,
  bar *Bar 
};

Bar : struct {
  i s32,
  j s32
};


lambdas : fn () {
  hello : fn () {
    puts("hello!!!");
  };

  bye : fn () {
    puts("bye!!!");
  };

  lambda := &hello;
  lambda();

  lambda = &bye;
  lambda();
};

enums : fn () {
  State : enum s32 {
    A : 123,
    B : 2,
    C : 3
  };

  printf("State.A = %d\n", State.A);
  printf("State.B = %d\n", State.B);
  printf("State.C = %d\n", State.C);

  State2 : enum {
    A : 123,
    B : 2,
    C : 3
  };

  printf("State2.A = %d\n", State2.A);
  printf("State2.B = %d\n", State2.B);
  printf("State2.C = %d\n", State2.C);

  State3 : enum {
    A : 2,
    B : 5,
    C,
    D,
    E : 100
  };

  printf("State3.A = %d\n", State3.A);
  printf("State3.B = %d\n", State3.B);
  printf("State3.C = %d\n", State3.C);
  printf("State3.D = %d\n", State3.D);
  printf("State3.E = %d\n", State3.E);
};