
/// Hello this is my function documentation!
this_is_my_function :: fn (i := -666) s32 {
    return i;
}

main :: fn () s32 {
    arr: [..]s32; // dynamic array
    loop i := 0; i < 10; i += 1 {
        array_push(&arr, i);
    }
    print("arr = %\n", arr);
    return 0;
}

// =================================================================================================
// TODO
// =================================================================================================

// - first_char :: fn (str: string #readonly) u8 {}
// - #using Enum + use UPPERCASE for variants.
// - #switch ?
// - polymorph struct types
// - allow static #if in global scope
// - modules should use regular load scripts written in BL executed during import
// - lazy load/import of sources (during analyze pass)
// - implement custom call stack recording for debugging purposes (probably on LLVM IR level?)
// - revalidate Fs module interface.
// - improve auto documentation to report default values of functions correctly
// - add documentation for compile-time execution debugger

// - Use markdown
// - Export to single file
// - Set output name.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.windows {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}
*/


// =================================================================================================
// Polymorph structures
// =================================================================================================

// 1) Foo :: struct {} -> generated compile time call to type resolver function in AST
//    in this case Foo is constant compile-time known variable declaration set to result
//    of compile time call (call to the type resolver).
//
// 2) Foo :: struct (T: type) {} -> generate only type resolver function in AST, in this
//    Foo symbol is function declaration (callable only in compile-time).


// Use type as variable for type resolver function call?
// Lazy type generation?
// Dont generate type directly.
// Put T1 and T2 into struct scope.
// Store already generated types for reuse.
// Generate type resolvers directly in ast as implicit function calls???
// Argument list is optional.

/*
Foo :: struct (T1: type, T2: type, Size: s32 = 10) {
    i: T1;
    data: [Size]T2;
}
*/


// =================================================================================================
// Comptime marked functions
// =================================================================================================

// Function can be called only in compile time.
// All arguments must be compile time known.
// Call is replaced by constant.

/*
get_hash :: fn () #comptime {
}
*/

