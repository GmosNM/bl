Foo :: struct {
    milan: s32;
}

main :: fn () s32 {
    foo1: Foo;
    foo2: MyScope.Foo;
    print("%", foo1);
    print("%", foo2);
    return 0;
}

#scope MyScope
Foo :: struct {
    jan: s32;
    pavel: s32;
}

// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.WINDOWS {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}

Foo :: struct {
    a: s32;
    b: s32;
}

foo := Foo.{}
foo: Foo = .{};
foo := {:Foo: ... }

*/
