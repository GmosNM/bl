/* testing playground */

printf fn (string, s32) s32 : extern;
puts fn (string) s32 : extern;

main : fn () s32 {
  pointers();
  ifs();
  loops();
  local_fn();
  structs();
  globals();
  constants();

  return 0;
};



pointers : fn () {
  data s32;
  ptr *s32 := &data;
  ptr = &data;

  if ptr == null {
    puts("ptr is null\n");
  } else {
    puts("ptr is not null\n");
  }

  *ptr = 666;

  printf("*ptr = %d\n", *ptr); // implement should load in ir
  printf("data = %d\n", data);
};



ifs : fn () {
  a := true;
  if a {
    puts("ok");
    if !a {
      puts("INVALID");
    } else {
      puts("ok");
    }
  } else {
    puts("INVALID");
  }
};



loops : fn () {
  i := 0;
  loop {
    if i > 9 { break; }
    printf("i = %d, ", i);
    i = i + 1;
    continue;
  }
  puts("done");

  i = 0;
  while i < 10 {
    printf("i = %d, ", i);
    i = i + 1;
    continue;
  }
  puts("done");
};



local_fn : fn () {
  add : fn (a s32, b s32) s32 {
    return a + b; 
  };

  result := add(10, 20);
  printf("result = %d\n", result);
};




B_t : struct {
  i s32,
  j s32
};

A_t : struct {
  i s32,
  j s32,
  a A_t
};


structs : fn () {
  _d1 A_t;
  _d2 A_t;
  _d1 = _d2;

  _d3 B_t;
};




_global1 := 10;
_global2 := 10 + 15;

globals : fn () {
  printf("_global1 = %d\n", _global1);
  printf("_global2 = %d\n", _global2);

  _global1 = 100;

  _globals();
};

_globals : fn () {
  printf("_global1 = %d\n", _global1);
  printf("_global2 = %d\n", _global2);
};



constants : fn () {
  A : 666;
  B : A;
  C : B;

  True : true;

  if True {
    printf("A = %d\n", A);
    printf("B = %d\n", B);
    printf("C = %d\n", C);
  } else {
    puts("INVALID");
  }
};