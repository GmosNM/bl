// #scope glwindow

main :: fn () s32 {
    using win32;
    window_class :: WNDCLASSA.{
        style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC,
        lpfnWndProc = &window_callback,
        hCursor = LoadCursorA(null, IDC_ARROW),
        lpszClassName = std.strtoc("WGL_dummy"),
    };
    if RegisterClassA(&window_class) == 0 {
        panic("Failed to register window.");
    }

    window := CreateWindowExA(0, window_class.lpszClassName, std.strtoc("OpenGL"), 0, CW_USEDEFAULT, CW_USEDEFAULT, 800, 600, null, null, null, null);
    if !window {
        panic("Failed to create window with error.");
    }

    ShowWindow(window, 1);
    UpdateWindow(window);

    is_running := true;
    loop is_running {
        msg: MSG;
        loop PeekMessageA(&msg, null, 0, 0, PM_REMOVE) > 0 {
            if (msg.message == WM_QUIT) {
                is_running = false;
            } else {
                TranslateMessage(&msg);
                DispatchMessageA(&msg);
            }
        }
    }
    return 0;
}

window_callback :: fn (window: win32.HWND, msg: win32.UINT, wparam: win32.WPARAM, lparam: win32.LPARAM) *s32 {
    return win32.DefWindowProcA(window, msg, wparam, lparam);
}
