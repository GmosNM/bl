Data :: struct {
    a: s32;
    b: bool;
}

main :: fn () s32 {
    // [T].{[values]}
    a := s32.{ 0 };
    b := s32.{ 1 };
    c := s32.{}; // zero initialized
    data := Data.{ 10, true };
    data2 := Foo.Data.{ "hello", true };
    data3 := Foo.Data.{};
    //data4 := Data.{ a = 10 };
    arr := [2]s32.{};
    result :: func();

    print("%\n", a);
    print("%\n", b);
    print("%\n", c);
    print("%\n", data);
    print("%\n", data2);
    print("%\n", data3);
    print("%\n", arr);
    print("%\n", result);

    return 0;
}

func :: fn () (s32, bool) {
    return 10, true;
}

#scope Foo

Data :: struct {
    a: string_view;
    b: bool;
}

// =================================================================================================
// Comptime function
// =================================================================================================
// 1) Type expressions cannot be analyzed if they are not comptime.
// 2) Execution can fail; i.e. array size is 0.

// =================================================================================================
// Module loader
// =================================================================================================

// 1) Create build assembly everytime even if build system is not used?
// 2) Create assembly only for imports?
//
// Every module importer should have uniquie name?

/*
module :: fn (bin: *Assembly) #module_entry {
    #if PLATFORM == Platform.WINDOWS {
        add_unit(bin, "_windows_impl.bl"
    } else {
        #error "Module does not support current target platform"
    }
}

Foo :: struct {
    a: s32;
    b: s32;
}

foo := Foo.{}
foo: Foo = .{};
foo := {:Foo: ... }

*/
