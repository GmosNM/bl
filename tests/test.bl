#import "std/async"

/*

TODO:

- #comptime - automatically comptime evaluated in case all the arguments are compile-time known.
- Introduce calling conventions.

- Change syntax of default argument value assignment to ':'.
- Properly handle fail of ast_expr_lit_fn while generating recipe implementation.

// To memory.bl???
bytes_to_value :: fn (TValue: type #comptime, bytes: []u8) TValue {
    tmp: TValue;
    assert(bytes.ptr);
    memcpy(auto &tmp, bytes.ptr, std.min(sizeof(TValue), auto bytes.len));
    return tmp;
}
*/
/* un-comment while fixing using propagation into local functions.
list_dir :: fn (paths: *[..]string_view, dir: string_view) {
    using std;
    foo :: fn (i: *Info) {};
}
*/

main :: fn () s32 {
    using std;
    one: Async(s32, string_view);
    two: Async(s32, string_view);

    async(&one, 5, &fn (count: s32) string_view {
        loop i := 0; i < count; i += 1 {
            tprint("Fooo");
            os_sleep_ms(5);
        }
        return "ONE IS DONE";
    });
    
    async(&two, 10, &fn (count: s32) string_view {
        loop i := 0; i < count; i += 1 {
            tprint("Booo");
            os_sleep_ms(1);
        }
        return "TWO IS DONE";
    });

    result_one :: async_wait(&one);
    print("Result = %\n", result_one);
    
    result_two :: async_wait(&two);
    print("Result = %\n", result_two);

    print("DONE\n");
    return 0;
}

number : s32 = 10 #thread_local;

