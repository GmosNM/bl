/* playground */

#load "std/print.bl"
#load "std/memory.bl"

Foo :: struct { first: s32, second: bool, third: Enum};
Enum :: enum u8 { A, B, C };

main :: fn () s32 {
    i := 10;
    ptr := &i;

    print("% % % %\n", 10, true, "hello", s32);

    e := Enum.A;

    foo := {:Foo: 0};

    print_info(typeinfo(i));
    print("\n");

    print_info(typeinfo(ptr));
    print("\n");

    print_info(typeinfo(e));
    print("\n");

    print_info(typeinfo(foo));
    print("\n");

    print_info(typeinfo(print_info));
    print("\n");

    return 0;
};

print_info :: fn (info: *TypeInfo) {
    if info.kind == TypeKind.Ptr {
        print("*");
        i := cast(*TypeInfoPtr) info;
        print_info(i.pointee);

    } else if info.kind == TypeKind.Enum {
        print("% ", info.name);
        i := cast(*TypeInfoEnum) info;
        print_info(i.base_type);

    } else if info.kind == TypeKind.Fn {
        i := cast(*TypeInfoFn) info;
        print("% (", info.name);

        loop j := 0; j < i.args.len; j += 1 {
            print_info(i.args[j]);
            if j < i.args.len - 1 { print(", "); }
        }
        print(") ");
        print_info(i.ret);

    } else if info.kind == TypeKind.Bool {
        print("% ", info.name);

    } else if info.kind == TypeKind.Struct {
        i := cast(*TypeInfoStruct) info;
        print("% {", info.name);
        loop j := 0; j < i.members.len; j += 1 {
            if i.member_names.len > 0 {
                print("%: ", i.member_names[j]);
            }

            print_info(i.members[j]);
            if j < i.members.len - 1 { print(", "); }
        }

        print("}");
    } else if info.kind == TypeKind.Int {
        print("% ", info.name);
    }
};
