#import "std/debug_allocator"
#import "std/test"
#import "std/pool"

debug_allocator: std.DebugAllocator;

main :: fn () s32 {
    using std;
    debug_allocator = debug_allocator_make(application_context.allocator);
    defer debug_allocator_terminate(&debug_allocator);
    application_context.allocator = &debug_allocator;
    application_context.print_log_fn = &my_logger;

    //debug_allocator_break(&debug_allocator, 3);

    result := test_run(false);
    if dump_memory_leaks(&debug_allocator) > 0 {
        result += 1;
    }
    return result;
}

#private
my_logger :: fn (kind: PrintLogKind, file: string_view, line: s32, format: string_view, args: ...) {
    out := OS_STDOUT;
    buf: [PRINT_MAX_LENGTH]u8 #noinit;
    tag: string_view;
    w: s32;
    switch kind {
        PrintLogKind.MESSAGE { return; }
        PrintLogKind.WARNING { return; }
        PrintLogKind.ERROR   { tag = "error";  out = OS_STDERR; }
        PrintLogKind.ASSERT  { tag = "assert"; out = OS_STDERR; }
        PrintLogKind.PANIC   { tag = "panic";  out = OS_STDERR; }
    }
    if file.len > 0 {
        w = bprint(slice_range(buf, w), "% [%:%]: ", tag, file, line);
    } else {
        w = bprint(buf, "%: ", tag);
    }
    w += bprint(slice_range(buf, w), format, args);
    w += bprint(slice_range(buf, w), "\n");
    __os_write(out, buf.ptr, auto w);
};
