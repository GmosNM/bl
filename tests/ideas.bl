/* 

STATIC IF

- code analyze is done only in case the if expression is true
- lazy #load

 */

main :: fn () s32 {
    A :: true;
    #if A {
        print("This is true\n");
    } else {
        print("This is false\n");
    }
}

/*

PTR TO BOOL 

Implicit casting for pointers to bool to avoid anoying comparations.

*/


main :: fn () s32 {
    i :: 10;
    ptr :: &i;


    if ptr { // replacement for ptr == null
        // Do something
    }
    
    return 0;
}


/*

USING 

Using on local scope variables and arguments will import used scope into current one.
This seems to be valid for structures only.

*/

Foo :: struct {
    first: s32;
    second: s32;
}

procedure :: fn () {
    using foo: Foo = {:Foo: 0};

    first = 10;
    second = 20;
}

procedure :: fn (using foo: *Foo) {
    first = 10;
    second = 20;
}






/*
   DYNAMIC ARRAY
 */

_Array :: struct #compiler {
    len: s64;
    ptr: *u8;
    _T: *TypeInfo;
    _allocated: s64;
}

arr: [..]s32;

arr.len;
arr.ptr;

arr[0] = 10;
num = arr[10];

array_push :: fn (arr: *_Array, value: Any) {
}

array_prealloc :: fn (arr: *_Array, size: usize) {
}



