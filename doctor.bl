#!/usr/local/bin/blc -rs
#import "std/fs"

BL_EXE_PATH_WIN  :: "bin/blc.exe";
BL_EXE_PATH_UNIX :: "bin/blc";

// paths
MAIN_TEST_SUITE_FILEPATH :: "tests/src/main.test.bl";
EXAMPLES_DIR :: "examples";
EXAMPLES_DOCS_DIR :: "examples/docs";
EXPECT_FAIL_DIR :: "tests/src/expect_fail";

HARDCODED_MODULES :: {:[3]string:
                      "lib/bl/api/std/fs/fs.test.bl",
                      "lib/bl/api/std/thread/thread.test.bl",
                      "lib/bl/api/std/sync/sync.test.bl",
                     };

main :: fn () s32 {
    wdir_init();
    defer wdir_terminate();
    if !parse_args() { return 1; }
    if OS_KIND == OSKind.Windows {
        _compiler_path = get_path(BL_EXE_PATH_WIN);
    } else {
        _compiler_path = get_path(BL_EXE_PATH_UNIX);
    }
    defer string_delete(_compiler_path);
        
    print("---------------------------------- BL DOCTOR -----------------------------------\n");    
    start_time_ms :: os_tick_ms();

    // general
    print("Test general suite:\n");    
    {
        path :: get_path(MAIN_TEST_SUITE_FILEPATH);
        defer string_delete(path);
        test_file(path, TestKind.Runtime);
        test_file(path, TestKind.Test);
    }

    // modules
    print("Test modules:\n");    
    loop i := 0; i < HARDCODED_MODULES.len; i += 1 {
        path :: get_path(HARDCODED_MODULES[i]);
        defer string_delete(path);
        test_file(path, TestKind.Runtime);
        //test_file(file, TestKind.Test);
    }
    
    { // examples

        path :: get_path(EXAMPLES_DIR);
        defer string_delete(path);
        test_all_in_dir(path);
    }

    // examples docs
    {
        path :: get_path(EXAMPLES_DOCS_DIR);
        defer string_delete(path);
        test_all_in_dir(path);
    }
    
    // expect fail to compile
    {
        path :: get_path(EXPECT_FAIL_DIR);
        defer string_delete(path);
        test_all_in_dir(path, true);
    }
        
    duration_ms :: os_tick_ms() - start_time_ms;
    print("\n----------------------------------- RESULTS ------------------------------------\n");
    print("Test suite count:  %\n", _suitec);
    print("Test suite failed: %\n", _errc);
    print("Finished in:       %s\n", fmt_real(duration_ms*0.001, 2));
    print("--------------------------------------------------------------------------------\n\n");
    
    
    // cleanup
    if OS_KIND == OSKind.Windows {
        fs_remove("out.exe");
        fs_remove("out.obj");
        fs_remove("out.pdb");
    } else {
        fs_remove("out");
        fs_remove("out.o");
    }        
    return _errc;
}

#private
TestKind :: enum {
    Runtime;
    CompileTime;
    Test;
    Analyze;
}

TEST_RUN_OK :: 0;
_compiler_path: string;
_wdir: string;
_suitec := 0;
_errc := 0;
_diag_mode := false;
_help_text :: 
    "Usage\n"
    "  doctor [options]\n\n"
    "Options:\n"
    "  -h, -help = Print this help and exit.\n"
    "  -d, -diag = Execute in diagnostic mode.";

wdir_init :: fn () {
    lhs: string;
    if string_split_by_last(#file, '/', &lhs, null) {
        _wdir = string_new(lhs);
    } else {
        _wdir = string_new();
    }
}

wdir_terminate :: fn () {
    string_delete(_wdir);
}

get_path :: fn (sub: string) string {
    return sprint(_wdir, "/", sub);
}

parse_args :: fn () bool {
    is_arg :: fn (arg: string, long: string, short: string) bool #inline {
        return string_compare(arg, short) || string_compare(arg, long);
    };
    
    loop i := 1; i < command_line_arguments.len; i += 1 {
        arg :: command_line_arguments[i];
        if is_arg(arg, "-diag", "-d") {
            _diag_mode = true;
        } else if is_arg(arg, "-help", "-h") {
            print(_help_text);
            return false;
        } else {
            print_err("Invalid argument '%'.", arg);
            print(_help_text);
            return false;
        }
    }
    return true;
}

get_verbosity :: fn () string #inline {
    if _diag_mode { return ""; } // print all
    if OS_KIND == OSKind.Windows {
        return "2>nul 1>nul";
    }
    
    return "1>/dev/null 2>/dev/null";
}

get_expected_error :: fn (filepath: string, out_err: *s32) bool {
    file, err1 :: fs_open(filepath, FSOpenMode.Read);
    defer fs_close(file);
    if !is_ok(err1) { print_err("%", err1); return false; }
    content, err2 :: fs_read_string(file);
    defer string_delete(content);
    if !is_ok(err2) { print_err("%", err2); return false; }
    
    tmp :: string_split_by(content, '@');
    defer slice_terminate(tmp);
    if tmp.len != 3 { return false; }
    err :: strtoerr(tmp[1]);
    if err == -1 { return false; }
    ^out_err = err;
    return true;
}

blc :: fn (file: string, args := "-no-bin -no-warning") s32 {
    cmd :: string_new(64);
    defer string_delete(cmd);
    _suitec += 1;
    string_concatenate(&cmd, _compiler_path, " ", args, " ", file, " ", get_verbosity());   
    return os_execute(cmd);
}

report_ok :: fn (msg: string, file: string, state: s32) #inline {
    print("[   OK   ] % '%' (Process exit with state: %)\n", msg, file, state);
}

report_failed :: fn (msg: string, file: string, state: s32) #inline {
    print("[ FAILED ] % '%' (Process exit with state: %)\n", msg, file, state);
    _errc += 1;
}

test_file :: fn (file: string, kind := TestKind.Runtime, expected_state := TEST_RUN_OK) {
    state: s32;
    switch kind {
        TestKind.Runtime {
            state = blc(file, "-no-warning");
            if state == expected_state {
                report_ok("Compilation", file, state);
            } else {
                report_failed("Compilation", file, state);
                return;
            }

            tmp: string;
            if OS_KIND == OSKind.Windows { 
                tmp = "out.exe 2>nul 1>nul"; 
            } else {
                tmp = "./out 1>/dev/null 2>/dev/null"; 
            }
            state = os_execute(tmp);
            if state == 0 {
                report_ok("Execution", file, state);
            } else {
                report_failed("Execution", file, state);
            } 
        }

        TestKind.CompileTime {
            state = blc(file, "-r -no-warning");
            if state == expected_state {
                report_ok("Interpretation", file, state);
            } else {
                report_failed("Interpretation", file, state);
            }
        }
        
        TestKind.Test {
            state = blc(file, "-rt -no-bin -no-warning");
            if state == expected_state {
                report_ok("Run compile time tests", file, state);
            } else {
                report_failed("Run compile time tests", file, state);
            }
        }

        TestKind.Analyze {
            state = blc(file, "-no-warning -no-bin");
            if state == expected_state {
                report_ok("Analyze", file, state);
            } else {
                report_failed("Analyze", file, state);
            }
        }
    }
}

test_all_in_dir :: fn (dir: string, expect_fail := false) {
    file :: string_new(64);
    defer string_delete(file);
    
    print("Testing files in directory '%':\n", dir);        
    list, err :: fs_dir_scan(dir);
    if !is_ok(err) {
        print_err("%", err);
    }
    defer fs_info_list_delete(list);

    loop i := 0; i < list.len; i += 1 {
        info :: &list[i];
        if info.kind != FSInfoKind.Directory {
            string_clear(&file);
            string_concatenate(&file, dir, "/", info.name);
            if expect_fail {
                error_code: s32 #noinit;
                if get_expected_error(file, &error_code) {
                    test_file(file, TestKind.Analyze, error_code);
                } else {
                    print_err("Cannot get expected error code for file '%'", file);
                }
            } else {
                test_file(file);
            }
        }
    }
}


// ERROR CODES (This must be keept in sync with src/error.h)
BlError :: enum s32 {
    NO_ERR :: 0;
    ERR_FILE_NOT_FOUND          :: 1;
    ERR_INVALID_SOURCE          :: 2;
    ERR_INVALID_TOKEN           :: 3;
    ERR_UNTERMINATED_COMMENT    :: 4;
    ERR_UNTERMINATED_STRING     :: 5;
    ERR_MISSING_SEMICOLON       :: 6;
    ERR_MISSING_BRACKET         :: 7;
    ERR_UNEXPECTED_DECL         :: 8;
    ERR_EXPECTED_EXPR           :: 9;
    ERR_MISSING_COMMA           :: 10;
    ERR_EXPECTED_BODY           :: 11;
    ERR_EXPECTED_BODY_END       :: 12;
    ERR_EXPECTED_STMT           :: 13;
    ERR_BREAK_OUTSIDE_LOOP      :: 14;
    ERR_CONTINUE_OUTSIDE_LOOP   :: 15;
    ERR_UNEXPECTED_DIRECTIVE    :: 16;
    ERR_DUPLICATE_SYMBOL        :: 17;
    ERR_UNKNOWN_SYMBOL          :: 18;
    ERR_EXPECTED_TYPE           :: 19;
    ERR_EXPECTED_NAME           :: 20;
    ERR_EXPECTED_BINOP          :: 21;
    ERR_DUPLICATE_ENTRY         :: 22;
    ERR_NOT_VERIFIED            :: 23;
    ERR_CANNOT_WRITE_BC         :: 24;
    ERR_CANNOT_LINK             :: 25;
    ERR_DIFF_KIND_OF_SYMBOL     :: 26;
    ERR_INVALID_PARAM_COUNT     :: 27;
    ERR_UNKNOWN_TYPE            :: 28;
    ERR_PRIVATE                 :: 29;
    ERR_UNCOMPATIBLE_MODIF      :: 30;
    ERR_NO_MAIN_METHOD          :: 31;
    ERR_INVALID_RESULT          :: 32;
    ERR_INVALID_ARG_COUNT       :: 33;
    ERR_INVALID_ARG_TYPE        :: 34;
    ERR_INVALID_TYPE            :: 35;
    ERR_INVALID_EXPR            :: 36;
    ERR_JIT_RUN_FAILED          :: 37;
    ERR_EXPECTED_STRING         :: 38;
    ERR_EXPECTED_MODULE         :: 39;
    ERR_EXPECTED_FUNC           :: 40;
    ERR_MISSING_RETURN          :: 41;
    ERR_EMPTY                   :: 42;
    ERR_UNEXPECTED_SYMBOL       :: 43;
    ERR_MULTIPLE_MAIN           :: 44;
    ERR_EXPECTED_INITIALIZATION :: 45;
    ERR_EXPECTED_TYPE_REF       :: 46;
    ERR_EXPECTED_TYPE_STRUCT    :: 47;
    ERR_INVALID_MUTABILITY      :: 48;
    ERR_INVALID_NAME            :: 49;
    ERR_INVALID_MEMBER_ACCESS   :: 50;
    ERR_UNIMPLEMENTED           :: 51;
    ERR_EXPECTED_CONST          :: 52;
    ERR_EXPECTED_DECL           :: 53;
    ERR_FILE_READ               :: 54;
    ERR_FILE_EMPTY              :: 55;
    ERR_INVALID_INITIALIZER     :: 56;
    ERR_INVALID_CAST            :: 57;
    ERR_INVALID_ADM             :: 58;
    ERR_DIV_BY_ZERO             :: 59;
    ERR_LIB_NOT_FOUND           :: 60;
    ERR_LIB_SYMBOL_NOT_FOUND    :: 61;
    ERR_EXPECTED_TEST_DESC      :: 62;
    ERR_NULL_POINTER            :: 63;
    ERR_INVALID_ARR_SIZE        :: 64;
    ERR_BOUND_CHECK_FAILED      :: 65;
    ERR_EMPTY_STRUCT            :: 66;
    ERR_UNINITIALIZED           :: 67;
    ERR_INVALID_ADDRES_MODE     :: 68;
    ERR_EMPTY_ENUM              :: 69;
    ERR_INVALID_DIRECTIVE       :: 70;
    ERR_UNEXPECTED_EXPR         :: 71;
    ERR_EXPECTED_COMPTIME       :: 72;
    ERR_NUM_LIT_OVERFLOW        :: 73;
    ERR_INVALID_SWITCH_CASE     :: 74;
    ERR_DUPLICIT_SWITCH_CASE    :: 75;
    ERR_INVALID_REFERENCE       :: 76;
    ERR_UNEXPECTED_RETURN       :: 77;
    ERR_AMBIGUOUS_OVERLOAD      :: 78;
    ERR_MISSING_PLATFORM        :: 79;
}

strtoerr :: fn (s: string) s32 {
    info :: cast(*TypeInfoEnum) typeinfo(BlError);
    loop i := 0; i < info.variants.len; i += 1 {
        variant :: &info.variants[i];
        if string_compare(variant.name, s) { return auto variant.value; }
    }
    return -1;
}
