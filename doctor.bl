#!/usr/local/bin/blc -rs
#import "std/fs"
#import "std/arg_parser"

BL_EXE_PATH_WIN  :: "bin/blc.exe";
BL_EXE_PATH_UNIX :: "bin/blc";

// paths
MAIN_TEST_SUITE_FILEPATH :: "tests/src/main.test.bl";
EXAMPLES_DIR :: "examples";
EXAMPLES_DOCS_DIR :: "examples/docs";
EXPECT_FAIL_DIR :: "tests/src/expect_fail";
ISSUES_DIR :: "tests/issues/closed";

HARDCODED_MODULES :: {:[10]string:
                      "lib/bl/api/std/arg_parser/arg_parser.test.bl",
                      "lib/bl/api/std/array/array.test.bl",
                      "lib/bl/api/std/debug_allocator/debug_allocator.test.bl",
                      "lib/bl/api/std/dlib/dlib.test.bl",
                      "lib/bl/api/std/fs/fs.test.bl",
                      "lib/bl/api/std/print/print.test.bl",
                      "lib/bl/api/std/string/string.test.bl",
                      "lib/bl/api/std/sync/sync.test.bl",
                      "lib/bl/api/std/thread/thread.test.bl",
                      "lib/bl/api/std/tmp_allocator/tmp_allocator.test.bl",
                     };

main :: fn () s32 {
    defer temporary_release();
    
    wdir_init();
    _args.test_count = 1;
    if !parse_args() { return 1; }
    if OS_KIND == OSKind.Windows {
        _compiler_path = get_path(BL_EXE_PATH_WIN);
    } else {
        _compiler_path = get_path(BL_EXE_PATH_UNIX);
    }
    start_time_ms :: os_tick_ms();

    loop c := 0; c < _args.test_count; c += 1 {
        defer temporary_reset();
        print("---------------------------------- BL DOCTOR -----------------------------------\n");    

        // general
        print("Test general suite:\n");    
        {
            path :: get_path(MAIN_TEST_SUITE_FILEPATH);
            test_file(path, TestKind.Runtime);
            test_file(path, TestKind.Test);
        }

        // modules
        print("Test modules:\n");    
        loop i := 0; i < HARDCODED_MODULES.len; i += 1 {
            path :: get_path(HARDCODED_MODULES[i]);
            test_file(path, TestKind.Runtime);
            //test_file(file, TestKind.Test);
        }

        { // examples

            path :: get_path(EXAMPLES_DIR);
            test_all_in_dir(path);
        }

        // examples docs
        {
            path :: get_path(EXAMPLES_DOCS_DIR);
            test_all_in_dir(path);
        }
        
        { 
            path :: get_path(ISSUES_DIR);
            test_all_in_dir(path);
        }


        print("Test misc:\n");    
        { // gen-docs
            path :: get_path("gen-docs.bl");
            test_file(path, TestKind.Analyze);
        }

        { // baker
            path :: get_path("baker.bl");
            test_file(path, TestKind.Analyze);
        }

        // expect fail to compile
        {
            path :: get_path(EXPECT_FAIL_DIR);
            test_all_in_dir(path, true);
        }

        duration_ms :: os_tick_ms() - start_time_ms;
        print("\n----------------------------------- RESULTS ------------------------------------\n");
        print("Test suite count:  %\n", _suitec);
        print("Test suite failed: %\n", _errc);
        print("Finished in:       %s\n", fmt_real(duration_ms*0.001, 2));
        print("--------------------------------------------------------------------------------\n\n");
    }
    
    
    // cleanup
    if OS_KIND == OSKind.Windows {
        Fs.remove("out.exe");
        Fs.remove("out.obj");
        Fs.remove("out.pdb");
    } else {
        Fs.remove("out");
        Fs.remove("out.o");
    }        
    return _errc;
}

#private
TestKind :: enum {
    Runtime;
    CompileTime;
    Test;
    Analyze;
}

Args :: struct #base ArgParser.Ctx {
    diag_mode: bool;
    no_vcvars: bool;
    stop_on_fail: bool;
    test_count: s32;
}

TEST_RUN_OK :: 0;
_args: Args;
_compiler_path: string;
_wdir: string;
_suitec := 0;
_errc := 0;

wdir_init :: fn () {
    lhs: string;
    if String.split_by_last(#file, '/', &lhs, null) {
        _wdir = String.new(lhs, &temporary_allocator);
    } else {
        _wdir = String.new(&temporary_allocator);
    }
}

get_path :: fn (sub: string) string {
    return tprint("%/%", _wdir, sub);
}

parse_args :: fn () bool {
    parser :: ArgParser.new();
    defer ArgParser.delete(parser);

    ArgParser.add(
        parser,
        "-d",
        "--diag",
        "Diagnostic mode.",
        &fn (parser: ArgParser.Parser, args: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            a.diag_mode = true;
            return 1, ok();
        });

    ArgParser.add(
        parser,
        "-nv",
        "--no-vcvars",
        "Disable injection of Visual Studio environment on Windows.",
        &fn (parser: ArgParser.Parser, args: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            a.no_vcvars = true;
            return 1, ok();
        });

    ArgParser.add(
        parser,
        "-sf",
        "--stop-on-fail",
        "Stop testing on fail.",
        &fn (parser: ArgParser.Parser, args: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            a.stop_on_fail = true;
            return 1, ok();
        });

    ArgParser.add(
        parser,
        "-c",
        "--count",
        "<N> Specify test repeat count.",
        &fn (parser: ArgParser.Parser, args: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            if (args.len < 2) {
                return 0, error("Expected count of test repeat!");
            }
            c :: String.to_s64(args[1]);
            if c < 1 {  
                return 0, error("Test count is expected to be at least 1 not %!", c);
            }
            a.test_count = auto c;
            return 2, ok();
        });

    state :: ArgParser.run(parser, command_line_arguments, &_args, 1);   
    if !is_ok(state) {
        print_err("%", state);
        ArgParser.print_help(parser);
        return false;
    }
    if _args.help { return false; }
    return true;
}

get_verbosity :: fn () string #inline {
    if _args.diag_mode { return ""; } // print all
    if OS_KIND == OSKind.Windows {
        return "2>nul 1>nul";
    }
    
    return "1>/dev/null 2>/dev/null";
}

get_expected_error :: fn (filepath: string, out_err: *s32) bool {
    file, err1 :: Fs.open(filepath, Fs.OpenMode.Read);
    defer Fs.close(file);
    if !is_ok(err1) { print_err("%", err1); return false; }
    content, err2 :: Fs.read_string(file);
    defer String.delete(content);
    if !is_ok(err2) { print_err("%", err2); return false; }
    
    tmp :: String.split_by(content, '@');
    defer slice_terminate(&tmp);
    if tmp.len != 3 { return false; }
    err :: strtoerr(tmp[1]);
    if err == -1 { return false; }
    ^out_err = err;
    return true;
}

blc :: fn (file: string, args := "--no-bin --no-warning") s32 {
    cmd :: String.new(64);
    defer String.delete(cmd);
    _suitec += 1;
    String.concatenate(&cmd, _compiler_path, " ", args, " ");   
    if _args.no_vcvars { String.append(&cmd, "--no-vcvars "); }
    String.append(&cmd, file);
    String.append(&cmd, " ");
    String.append(&cmd, get_verbosity());
    return os_execute(cmd);
}

report_ok :: fn (msg: string, file: string, state: s32) #inline {
    print("[   OK   ] % '%' (Process exit with state: %)\n", msg, file, state);
}

report_failed :: fn (msg: string, file: string, state: s32) #inline {
    print("[ FAILED ] % '%' (Process exit with state: %)\n", msg, file, state);
    if _args.stop_on_fail { panic("Abort on fail!"); }
    _errc += 1;
}

test_file :: fn (file: string, kind := TestKind.Runtime, expected_state := TEST_RUN_OK) {
    state: s32;
    switch kind {
        TestKind.Runtime {
            state = blc(file, "--no-warning");
            if state == expected_state {
                report_ok("Compilation", file, state);
            } else {
                report_failed("Compilation", file, state);
                return;
            }

            tmp := String.new();
            defer String.delete(tmp);
            if OS_KIND == OSKind.Windows { 
                String.append(&tmp, "out.exe ");
            } else {
                String.append(&tmp, "./out ");
            }
            String.append(&tmp, get_verbosity());
            state = os_execute(tmp);
            if state == 0 {
                report_ok("Execution", file, state);
            } else {
                report_failed("Execution", file, state);
            } 
        }

        TestKind.CompileTime {
            state = blc(file, "-r --no-warning");
            if state == expected_state {
                report_ok("Interpretation", file, state);
            } else {
                report_failed("Interpretation", file, state);
            }
        }
        
        TestKind.Test {
            state = blc(file, "-rt --no-bin --no-warning");
            if state == expected_state {
                report_ok("Run compile time tests", file, state);
            } else {
                report_failed("Run compile time tests", file, state);
            }
        }

        TestKind.Analyze {
            state = blc(file, "--no-warning --no-bin");
            if state == expected_state {
                report_ok("Analyze", file, state);
            } else {
                report_failed("Analyze", file, state);
            }
        }
    }
}

test_all_in_dir :: fn (dir: string, expect_fail := false) {
    file :: String.new(64);
    defer String.delete(file);
    
    print("Testing files in directory '%':\n", dir);        
    list, err :: Fs.dir_scan(dir);
    if !is_ok(err) {
        print_err("%", err);
    }
    defer Fs.info_list_delete(list);

    loop i := 0; i < list.len; i += 1 {
        info :: &list[i];
        if info.kind != Fs.InfoKind.Directory {
            String.clear(&file);
            String.concatenate(&file, dir, "/", info.name);
            if expect_fail {
                error_code: s32 #noinit;
                if get_expected_error(file, &error_code) {
                    test_file(file, TestKind.Analyze, error_code);
                } else {
                    print_err("Cannot get expected error code for file '%'", file);
                }
            } else {
                test_file(file);
            }
        }
    }
}


// ERROR CODES (This must be keept in sync with src/error.h)
BlError :: enum s32 {
    NO_ERR :: 0;
    ERR_FILE_NOT_FOUND          :: 1;
    ERR_INVALID_SOURCE          :: 2;
    ERR_INVALID_TOKEN           :: 3;
    ERR_UNTERMINATED_COMMENT    :: 4;
    ERR_UNTERMINATED_STRING     :: 5;
    ERR_MISSING_SEMICOLON       :: 6;
    ERR_MISSING_BRACKET         :: 7;
    ERR_UNEXPECTED_DECL         :: 8;
    ERR_EXPECTED_EXPR           :: 9;
    ERR_MISSING_COMMA           :: 10;
    ERR_EXPECTED_BODY           :: 11;
    ERR_EXPECTED_BODY_END       :: 12;
    ERR_EXPECTED_STMT           :: 13;
    ERR_BREAK_OUTSIDE_LOOP      :: 14;
    ERR_CONTINUE_OUTSIDE_LOOP   :: 15;
    ERR_UNEXPECTED_DIRECTIVE    :: 16;
    ERR_DUPLICATE_SYMBOL        :: 17;
    ERR_UNKNOWN_SYMBOL          :: 18;
    ERR_EXPECTED_TYPE           :: 19;
    ERR_EXPECTED_NAME           :: 20;
    ERR_EXPECTED_BINOP          :: 21;
    ERR_DUPLICATE_ENTRY         :: 22;
    ERR_NOT_VERIFIED            :: 23;
    ERR_CANNOT_WRITE_BC         :: 24;
    ERR_CANNOT_LINK             :: 25;
    ERR_DIFF_KIND_OF_SYMBOL     :: 26;
    ERR_INVALID_PARAM_COUNT     :: 27;
    ERR_UNKNOWN_TYPE            :: 28;
    ERR_PRIVATE                 :: 29;
    ERR_UNCOMPATIBLE_MODIF      :: 30;
    ERR_NO_MAIN_METHOD          :: 31;
    ERR_INVALID_RESULT          :: 32;
    ERR_INVALID_ARG_COUNT       :: 33;
    ERR_INVALID_ARG_TYPE        :: 34;
    ERR_INVALID_TYPE            :: 35;
    ERR_INVALID_EXPR            :: 36;
    ERR_JIT_RUN_FAILED          :: 37;
    ERR_EXPECTED_STRING         :: 38;
    ERR_EXPECTED_MODULE         :: 39;
    ERR_EXPECTED_FUNC           :: 40;
    ERR_MISSING_RETURN          :: 41;
    ERR_EMPTY                   :: 42;
    ERR_UNEXPECTED_SYMBOL       :: 43;
    ERR_MULTIPLE_MAIN           :: 44;
    ERR_EXPECTED_INITIALIZATION :: 45;
    ERR_EXPECTED_TYPE_REF       :: 46;
    ERR_EXPECTED_TYPE_STRUCT    :: 47;
    ERR_INVALID_MUTABILITY      :: 48;
    ERR_INVALID_NAME            :: 49;
    ERR_INVALID_MEMBER_ACCESS   :: 50;
    ERR_UNIMPLEMENTED           :: 51;
    ERR_EXPECTED_CONST          :: 52;
    ERR_EXPECTED_DECL           :: 53;
    ERR_FILE_READ               :: 54;
    ERR_FILE_EMPTY              :: 55;
    ERR_INVALID_INITIALIZER     :: 56;
    ERR_INVALID_CAST            :: 57;
    ERR_INVALID_ADM             :: 58;
    ERR_DIV_BY_ZERO             :: 59;
    ERR_LIB_NOT_FOUND           :: 60;
    ERR_LIB_SYMBOL_NOT_FOUND    :: 61;
    ERR_EXPECTED_TEST_DESC      :: 62;
    ERR_NULL_POINTER            :: 63;
    ERR_INVALID_ARR_SIZE        :: 64;
    ERR_BOUND_CHECK_FAILED      :: 65;
    ERR_EMPTY_STRUCT            :: 66;
    ERR_UNINITIALIZED           :: 67;
    ERR_INVALID_ADDRES_MODE     :: 68;
    ERR_EMPTY_ENUM              :: 69;
    ERR_INVALID_DIRECTIVE       :: 70;
    ERR_UNEXPECTED_EXPR         :: 71;
    ERR_EXPECTED_COMPTIME       :: 72;
    ERR_NUM_LIT_OVERFLOW        :: 73;
    ERR_INVALID_SWITCH_CASE     :: 74;
    ERR_DUPLICIT_SWITCH_CASE    :: 75;
    ERR_INVALID_REFERENCE       :: 76;
    ERR_UNEXPECTED_RETURN       :: 77;
    ERR_AMBIGUOUS_OVERLOAD      :: 78;
    ERR_MISSING_PLATFORM        :: 79;
    ERR_UNEXPECTED_FUNCTION_BODY :: 80;
    ERR_INVALID_POLY_MATCH       :: 81;
}

strtoerr :: fn (s: string) s32 {
    info :: cast(*TypeInfoEnum) typeinfo(BlError);
    loop i := 0; i < info.variants.len; i += 1 {
        variant :: &info.variants[i];
        if String.compare(variant.name, s) { return auto variant.value; }
    }
    return -1;
}
