//************************************************************************************************
// bl
//
// File:   vulkan.bl
// Author: Martin Dorazil
// Date:   4/9/19
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#link "vulkan"

VK_API_VERSION_1_0 : u32 : 0x400000000;
VK_MAX_PHYSICAL_DEVICE_NAME_SIZE :: 256;
VK_UUID_SIZE :: 16;
VK_MAX_MEMORY_TYPES :: 32;
VK_MAX_MEMORY_HEAPS :: 16;
VK_MAX_EXTENSION_NAME_SIZE :: 256;
VK_MAX_DESCRIPTION_SIZE :: 256;
VK_KHR_SWAPCHAIN_EXTENSION_NAME :: "VK_KHR_swapchain";
VK_TRUE : u32 : 1;
VK_FALSE : u32 : 0;

VkInstance :: *u8;
VkPhysicalDevice :: *u8;
VkDevice :: *u8;
VkQueue :: *u8;
VkSurfaceKHR :: *u8;
VkSwapchainKHR :: *u8;
VkImage :: *u8;
VkImageView :: *u8;
VkShaderModule :: *u8;
VkPipelineLayout :: *u8;
VkDescriptorSetLayout :: *u8;
VkRenderPass :: *u8;
VkPipeline :: *u8;
VkPipelineCache :: *u8;
VkFramebuffer :: *u8;
VkCommandPool :: *u8;
VkCommandBuffer :: *u8;
VkSemaphore :: *u8;
VkFence :: *u8;

VkFlags :: u32;
VkBool32 :: u32;
VkDeviceSize :: u64;
VkSampleMask :: u32;

VkInstanceCreateFlags :: VkFlags;
VkQueueFlags :: VkFlags;
VkDeviceQueueCreateFlags :: VkFlags;
VkDeviceCreateFlags :: VkFlags;
VkSurfaceTransformFlagsKHR :: VkFlags;
VkCompositeAlphaFlagsKHR :: VkFlags;
VkImageUsageFlags :: VkFlags;
VkSwapchainCreateFlagsKHR :: VkFlags;
VkImageViewCreateFlags :: VkFlags;
VkImageAspectFlags :: VkFlags;
VkShaderModuleCreateFlags :: VkFlags;
VkPipelineShaderStageCreateFlags :: VkFlags;
VkPipelineVertexInputStateCreateFlags :: VkFlags;
VkPipelineInputAssemblyStateCreateFlags :: VkFlags;
VkPipelineTessellationStateCreateFlags :: VkFlags;
VkPipelineViewportStateCreateFlags :: VkFlags;
VkPipelineRasterizationStateCreateFlags :: VkFlags;
VkCullModeFlags :: VkFlags;
VkPipelineMultisampleStateCreateFlags :: VkFlags;
VkPipelineDepthStencilStateCreateFlags :: VkFlags;
VkPipelineColorBlendStateCreateFlags :: VkFlags;
VkColorComponentFlags :: VkFlags;
VkPipelineDynamicStateCreateFlags :: VkFlags;
VkPipelineLayoutCreateFlags :: VkFlags;
VkShaderStageFlags :: VkFlags;
VkAttachmentDescriptionFlags :: VkFlags;
VkSubpassDescriptionFlags :: VkFlags; 
VkFramebufferCreateFlags :: VkFlags;
VkRenderPassCreateFlags :: VkFlags;
VkPipelineStageFlags  :: VkFlags;
VkMemoryMapFlags :: VkFlags;
VkAccessFlags :: VkFlags;
VkDependencyFlags :: VkFlags;
VkPipelineCreateFlags :: VkFlags;
VkCommandPoolCreateFlags :: VkFlags;
VkBufferUsageFlags :: VkFlags;
VkBufferViewCreateFlags :: VkFlags;
VkCommandBufferUsageFlags :: VkFlags;
VkQueryControlFlags :: VkFlags;
VkQueryPipelineStatisticFlags :: VkFlags;
VkSemaphoreCreateFlags :: VkFlags;
VkFenceCreateFlags :: VkFlags;

// allocation callbacks types
PFN_vkAllocationFunction :: * fn (pUserData: *u8, size: usize, alignment: usize, allocationScope: VkSystemAllocationScope);
PFN_vkReallocationFunction :: * fn (pUserData: *u8, pOriginal: *u8, size: usize, alignment: usize, allocationScope: VkSystemAllocationScope);
PFN_vkFreeFunction :: * fn (pUserData: *u8, pMemory: *u8);
PFN_vkInternalAllocationNotification :: * fn (pUserData: *u8, size: usize, allocationType: VkInternalAllocationType, allocationScope: VkSystemAllocationScope);
PFN_vkInternalFreeNotification :: * fn (pUserData: *u8, size: usize, allocationType: VkInternalAllocationType, allocationScope: VkSystemAllocationScope);

VkResult :: enum {
    SUCCESS :: 0,
    NOT_READY :: 1,
    TIMEOUT :: 2,
    EVENT_SET :: 3,
    EVENT_RESET :: 4,
    INCOMPLETE :: 5,
    ERROR_OUT_OF_HOST_MEMORY :: -1,
    ERROR_OUT_OF_DEVICE_MEMORY :: -2,
    ERROR_INITIALIZATION_FAILED :: -3,
    ERROR_DEVICE_LOST :: -4,
    ERROR_MEMORY_MAP_FAILED :: -5,
    ERROR_LAYER_NOT_PRESENT :: -6,
    ERROR_EXTENSION_NOT_PRESENT :: -7,
    ERROR_FEATURE_NOT_PRESENT :: -8,
    ERROR_INCOMPATIBLE_DRIVER :: -9,
    ERROR_TOO_MANY_OBJECTS :: -10,
    ERROR_FORMAT_NOT_SUPPORTED :: -11,
    ERROR_FRAGMENTED_POOL :: -12,
    ERROR_OUT_OF_POOL_MEMORY :: -1000069000,
    ERROR_INVALID_EXTERNAL_HANDLE :: -1000072003,
    ERROR_SURFACE_LOST_KHR :: -1000000000,
    ERROR_NATIVE_WINDOW_IN_USE_KHR :: -1000000001,
    SUBOPTIMAL_KHR :: 1000001003,
    ERROR_OUT_OF_DATE_KHR :: -1000001004,
    ERROR_INCOMPATIBLE_DISPLAY_KHR :: -1000003001,
    ERROR_VALIDATION_FAILED_EXT :: -1000011001,
    ERROR_INVALID_SHADER_NV :: -1000012000,
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT :: -1000158000,
    ERROR_FRAGMENTATION_EXT :: -1000161000,
    ERROR_NOT_PERMITTED_EXT :: -1000174001,
    ERROR_INVALID_DEVICE_ADDRESS_EXT :: -1000244000,
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT :: -1000255000,
    ERROR_OUT_OF_POOL_MEMORY_KHR :: ERROR_OUT_OF_POOL_MEMORY,
    ERROR_INVALID_EXTERNAL_HANDLE_KHR :: ERROR_INVALID_EXTERNAL_HANDLE,
    RESULT_BEGIN_RANGE :: ERROR_FRAGMENTED_POOL,
    RESULT_END_RANGE :: INCOMPLETE,
    RESULT_RANGE_SIZE :: (INCOMPLETE - ERROR_FRAGMENTED_POOL + 1),
    RESULT_MAX_ENUM :: 0x7FFFFFFF
};

VkSubpassContents :: enum {
    INLINE :: 0,
    SECONDARY_COMMAND_BUFFERS :: 1,
    BEGIN_RANGE :: INLINE,
    END_RANGE :: SECONDARY_COMMAND_BUFFERS,
    RANGE_SIZE :: (SECONDARY_COMMAND_BUFFERS - INLINE + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkSurfaceTransformFlagBitsKHR :: enum {
    IDENTITY_BIT_KHR :: 0x00000001,
    ROTATE_90_BIT_KHR :: 0x00000002,
    ROTATE_180_BIT_KHR :: 0x00000004,
    ROTATE_270_BIT_KHR :: 0x00000008,
    HORIZONTAL_MIRROR_BIT_KHR :: 0x00000010,
    HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR :: 0x00000020,
    HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR :: 0x00000040,
    HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR :: 0x00000080,
    INHERIT_BIT_KHR :: 0x00000100,
    FLAG_BITS_MAX_ENUM_KHR :: 0x7FFFFFFF
};

VkFenceCreateFlagBits :: enum {
    SIGNALED_BIT :: 0x00000001,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkQueryPipelineStatisticFlagBits :: enum {
    INPUT_ASSEMBLY_VERTICES_BIT :: 0x00000001,
    INPUT_ASSEMBLY_PRIMITIVES_BIT :: 0x00000002,
    VERTEX_SHADER_INVOCATIONS_BIT :: 0x00000004,
    GEOMETRY_SHADER_INVOCATIONS_BIT :: 0x00000008,
    GEOMETRY_SHADER_PRIMITIVES_BIT :: 0x00000010,
    CLIPPING_INVOCATIONS_BIT :: 0x00000020,
    CLIPPING_PRIMITIVES_BIT :: 0x00000040,
    FRAGMENT_SHADER_INVOCATIONS_BIT :: 0x00000080,
    TESSELLATION_CONTROL_SHADER_PATCHES_BIT :: 0x00000100,
    TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT :: 0x00000200,
    COMPUTE_SHADER_INVOCATIONS_BIT :: 0x00000400,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkQueryControlFlagBits :: enum {
    PRECISE_BIT :: 0x00000001,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkCommandBufferUsageFlagBits :: enum {
    ONE_TIME_SUBMIT_BIT :: 0x00000001,
    RENDER_PASS_CONTINUE_BIT :: 0x00000002,
    SIMULTANEOUS_USE_BIT :: 0x00000004,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkCommandPoolCreateFlagBits :: enum {
    TRANSIENT_BIT :: 0x00000001,
    RESET_COMMAND_BUFFER_BIT :: 0x00000002,
    PROTECTED_BIT :: 0x00000004,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkDependencyFlagBits :: enum {
    BY_REGION_BIT :: 0x00000001,
    DEVICE_GROUP_BIT :: 0x00000004,
    VIEW_LOCAL_BIT :: 0x00000002,
    VIEW_LOCAL_BIT_KHR :: VIEW_LOCAL_BIT,
    DEVICE_GROUP_BIT_KHR :: DEVICE_GROUP_BIT,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkPipelineCreateFlagBits :: enum {
    DISABLE_OPTIMIZATION_BIT :: 0x00000001,
    ALLOW_DERIVATIVES_BIT :: 0x00000002,
    DERIVATIVE_BIT :: 0x00000004,
    VIEW_INDEX_FROM_DEVICE_INDEX_BIT :: 0x00000008,
    DISPATCH_BASE :: 0x00000010,
    DEFER_COMPILE_BIT_NV :: 0x00000020,
    VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR :: VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    DISPATCH_BASE_KHR :: DISPATCH_BASE,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkBufferUsageFlagBits :: enum {
    TRANSFER_SRC_BIT :: 0x00000001,
    TRANSFER_DST_BIT :: 0x00000002,
    UNIFORM_TEXEL_BUFFER_BIT :: 0x00000004,
    STORAGE_TEXEL_BUFFER_BIT :: 0x00000008,
    UNIFORM_BUFFER_BIT :: 0x00000010,
    STORAGE_BUFFER_BIT :: 0x00000020,
    INDEX_BUFFER_BIT :: 0x00000040,
    VERTEX_BUFFER_BIT :: 0x00000080,
    INDIRECT_BUFFER_BIT :: 0x00000100,
    TRANSFORM_FEEDBACK_BUFFER_BIT_EXT :: 0x00000800,
    TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT :: 0x00001000,
    CONDITIONAL_RENDERING_BIT_EXT :: 0x00000200,
    RAY_TRACING_BIT_NV :: 0x00000400,
    SHADER_DEVICE_ADDRESS_BIT_EXT :: 0x00020000,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkAccessFlagBits :: enum {
    INDIRECT_COMMAND_READ_BIT :: 0x00000001,
    INDEX_READ_BIT :: 0x00000002,
    VERTEX_ATTRIBUTE_READ_BIT :: 0x00000004,
    UNIFORM_READ_BIT :: 0x00000008,
    INPUT_ATTACHMENT_READ_BIT :: 0x00000010,
    SHADER_READ_BIT :: 0x00000020,
    SHADER_WRITE_BIT :: 0x00000040,
    COLOR_ATTACHMENT_READ_BIT :: 0x00000080,
    COLOR_ATTACHMENT_WRITE_BIT :: 0x00000100,
    DEPTH_STENCIL_ATTACHMENT_READ_BIT :: 0x00000200,
    DEPTH_STENCIL_ATTACHMENT_WRITE_BIT :: 0x00000400,
    TRANSFER_READ_BIT :: 0x00000800,
    TRANSFER_WRITE_BIT :: 0x00001000,
    HOST_READ_BIT :: 0x00002000,
    HOST_WRITE_BIT :: 0x00004000,
    MEMORY_READ_BIT :: 0x00008000,
    MEMORY_WRITE_BIT :: 0x00010000,
    TRANSFORM_FEEDBACK_WRITE_BIT_EXT :: 0x02000000,
    TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT :: 0x04000000,
    TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT :: 0x08000000,
    CONDITIONAL_RENDERING_READ_BIT_EXT :: 0x00100000,
    COMMAND_PROCESS_READ_BIT_NVX :: 0x00020000,
    COMMAND_PROCESS_WRITE_BIT_NVX :: 0x00040000,
    COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT :: 0x00080000,
    SHADING_RATE_IMAGE_READ_BIT_NV :: 0x00800000,
    ACCELERATION_STRUCTURE_READ_BIT_NV :: 0x00200000,
    ACCELERATION_STRUCTURE_WRITE_BIT_NV :: 0x00400000,
    FRAGMENT_DENSITY_MAP_READ_BIT_EXT :: 0x01000000,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkFramebufferCreateFlagBits :: enum {
    IMAGELESS_BIT_KHR :: 0x00000001,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkSubpassDescriptionFlagBits :: enum {
    PER_VIEW_ATTRIBUTES_BIT_NVX :: 0x00000001,
    PER_VIEW_POSITION_X_ONLY_BIT_NVX :: 0x00000002,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkPipelineStageFlagBits :: enum {
    TOP_OF_PIPE_BIT :: 0x00000001,
    DRAW_INDIRECT_BIT :: 0x00000002,
    VERTEX_INPUT_BIT :: 0x00000004,
    VERTEX_SHADER_BIT :: 0x00000008,
    TESSELLATION_CONTROL_SHADER_BIT :: 0x00000010,
    TESSELLATION_EVALUATION_SHADER_BIT :: 0x00000020,
    GEOMETRY_SHADER_BIT :: 0x00000040,
    FRAGMENT_SHADER_BIT :: 0x00000080,
    EARLY_FRAGMENT_TESTS_BIT :: 0x00000100,
    LATE_FRAGMENT_TESTS_BIT :: 0x00000200,
    COLOR_ATTACHMENT_OUTPUT_BIT :: 0x00000400,
    COMPUTE_SHADER_BIT :: 0x00000800,
    TRANSFER_BIT :: 0x00001000,
    BOTTOM_OF_PIPE_BIT :: 0x00002000,
    HOST_BIT :: 0x00004000,
    ALL_GRAPHICS_BIT :: 0x00008000,
    ALL_COMMANDS_BIT :: 0x00010000,
    TRANSFORM_FEEDBACK_BIT_EXT :: 0x01000000,
    CONDITIONAL_RENDERING_BIT_EXT :: 0x00040000,
    COMMAND_PROCESS_BIT_NVX :: 0x00020000,
    SHADING_RATE_IMAGE_BIT_NV :: 0x00400000,
    RAY_TRACING_SHADER_BIT_NV :: 0x00200000,
    ACCELERATION_STRUCTURE_BUILD_BIT_NV :: 0x02000000,
    TASK_SHADER_BIT_NV :: 0x00080000,
    MESH_SHADER_BIT_NV :: 0x00100000,
    FRAGMENT_DENSITY_PROCESS_BIT_EXT :: 0x00800000,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkPipelineBindPoint :: enum {
    GRAPHICS :: 0,
    COMPUTE :: 1,
    RAY_TRACING_NV :: 1000165000,
    BEGIN_RANGE :: GRAPHICS,
    END_RANGE :: COMPUTE,
    RANGE_SIZE :: (COMPUTE - GRAPHICS + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkStencilOp :: enum {
    KEEP :: 0,
    ZERO :: 1,
    REPLACE :: 2,
    INCREMENT_AND_CLAMP :: 3,
    DECREMENT_AND_CLAMP :: 4,
    INVERT :: 5,
    INCREMENT_AND_WRAP :: 6,
    DECREMENT_AND_WRAP :: 7,
    BEGIN_RANGE :: KEEP,
    END_RANGE :: DECREMENT_AND_WRAP,
    RANGE_SIZE :: (DECREMENT_AND_WRAP - KEEP + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkLogicOp :: enum {
    CLEAR :: 0,
    AND :: 1,
    AND_REVERSE :: 2,
    COPY :: 3,
    AND_INVERTED :: 4,
    NO_OP :: 5,
    XOR :: 6,
    OR :: 7,
    NOR :: 8,
    EQUIVALENT :: 9,
    INVERT :: 10,
    OR_REVERSE :: 11,
    COPY_INVERTED :: 12,
    OR_INVERTED :: 13,
    NAND :: 14,
    SET :: 15,
    BEGIN_RANGE :: CLEAR,
    END_RANGE :: SET,
    RANGE_SIZE :: (SET - CLEAR + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkCommandBufferLevel :: enum {
    PRIMARY :: 0,
    SECONDARY :: 1,
    BEGIN_RANGE :: PRIMARY,
    END_RANGE :: SECONDARY,
    RANGE_SIZE :: (SECONDARY - PRIMARY + 1),
    MAX_ENUM :: 0x7FFFFFFF
};


VkCompositeAlphaFlagBitsKHR :: enum {
    OPAQUE_BIT_KHR :: 0x00000001,
    PRE_MULTIPLIED_BIT_KHR :: 0x00000002,
    POST_MULTIPLIED_BIT_KHR :: 0x00000004,
    INHERIT_BIT_KHR :: 0x00000008,
    FLAG_BITS_MAX_ENUM_KHR :: 0x7FFFFFFF
};

VkAttachmentStoreOp :: enum {
    STORE :: 0,
    DONT_CARE :: 1,
    BEGIN_RANGE :: STORE,
    END_RANGE :: DONT_CARE,
    RANGE_SIZE :: (DONT_CARE - STORE + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkCompareOp :: enum {
    NEVER :: 0,
    LESS :: 1,
    EQUAL :: 2,
    LESS_OR_EQUAL :: 3,
    GREATER :: 4,
    NOT_EQUAL :: 5,
    GREATER_OR_EQUAL :: 6,
    ALWAYS :: 7,
    BEGIN_RANGE :: NEVER,
    END_RANGE :: ALWAYS,
    RANGE_SIZE :: (ALWAYS - NEVER + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkAttachmentDescriptionFlagBits :: enum {
    MAY_ALIAS_BIT :: 0x00000001,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkDynamicState :: enum {
    VIEWPORT :: 0,
    SCISSOR :: 1,
    LINE_WIDTH :: 2,
    DEPTH_BIAS :: 3,
    BLEND_CONSTANTS :: 4,
    DEPTH_BOUNDS :: 5,
    STENCIL_COMPARE_MASK :: 6,
    STENCIL_WRITE_MASK :: 7,
    STENCIL_REFERENCE :: 8,
    VIEWPORT_W_SCALING_NV :: 1000087000,
    DISCARD_RECTANGLE_EXT :: 1000099000,
    SAMPLE_LOCATIONS_EXT :: 1000143000,
    VIEWPORT_SHADING_RATE_PALETTE_NV :: 1000164004,
    VIEWPORT_COARSE_SAMPLE_ORDER_NV :: 1000164006,
    EXCLUSIVE_SCISSOR_NV :: 1000205001,
    BEGIN_RANGE :: VIEWPORT,
    END_RANGE :: STENCIL_REFERENCE,
    RANGE_SIZE :: (STENCIL_REFERENCE - VIEWPORT + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkAttachmentLoadOp :: enum {
    LOAD :: 0,
    CLEAR :: 1,
    DONT_CARE :: 2,
    BEGIN_RANGE :: LOAD,
    END_RANGE :: DONT_CARE,
    RANGE_SIZE :: (DONT_CARE - LOAD + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkColorComponentFlagBits :: enum {
    R_BIT :: 0x00000001,
    G_BIT :: 0x00000002,
    B_BIT :: 0x00000004,
    A_BIT :: 0x00000008,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFE
};

VkImageUsageFlagBits :: enum  {
    TRANSFER_SRC_BIT :: 0x00000001,
    TRANSFER_DST_BIT :: 0x00000002,
    SAMPLED_BIT :: 0x00000004,
    STORAGE_BIT :: 0x00000008,
    COLOR_ATTACHMENT_BIT :: 0x00000010,
    DEPTH_STENCIL_ATTACHMENT_BIT :: 0x00000020,
    TRANSIENT_ATTACHMENT_BIT :: 0x00000040,
    INPUT_ATTACHMENT_BIT :: 0x00000080,
    SHADING_RATE_IMAGE_BIT_NV :: 0x00000100,
    FRAGMENT_DENSITY_MAP_BIT_EXT :: 0x00000200,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkSampleCountFlagBits :: enum {
    _1_BIT :: 0x00000001,
    _2_BIT :: 0x00000002,
    _4_BIT :: 0x00000004,
    _8_BIT :: 0x00000008,
    _16_BIT :: 0x00000010,
    _32_BIT :: 0x00000020,
    _64_BIT :: 0x00000040,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkImageAspectFlagBits :: enum {
    COLOR_BIT :: 0x00000001,
    DEPTH_BIT :: 0x00000002,
    STENCIL_BIT :: 0x00000004,
    METADATA_BIT :: 0x00000008,
    PLANE_0_BIT :: 0x00000010,
    PLANE_1_BIT :: 0x00000020,
    PLANE_2_BIT :: 0x00000040,
    MEMORY_PLANE_0_BIT_EXT :: 0x00000080,
    MEMORY_PLANE_1_BIT_EXT :: 0x00000100,
    MEMORY_PLANE_2_BIT_EXT :: 0x00000200,
    MEMORY_PLANE_3_BIT_EXT :: 0x00000400,
    PLANE_0_BIT_KHR :: PLANE_0_BIT,
    PLANE_1_BIT_KHR :: PLANE_1_BIT,
    PLANE_2_BIT_KHR :: PLANE_2_BIT,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkCullModeFlagBits :: enum {
    NONE :: 0,
    FRONT_BIT :: 0x00000001,
    BACK_BIT :: 0x00000002,
    FRONT_AND_BACK :: 0x00000003,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkImageLayout :: enum {
    UNDEFINED :: 0,
    GENERAL :: 1,
    COLOR_ATTACHMENT_OPTIMAL :: 2,
    DEPTH_STENCIL_ATTACHMENT_OPTIMAL :: 3,
    DEPTH_STENCIL_READ_ONLY_OPTIMAL :: 4,
    SHADER_READ_ONLY_OPTIMAL :: 5,
    TRANSFER_SRC_OPTIMAL :: 6,
    TRANSFER_DST_OPTIMAL :: 7,
    PREINITIALIZED :: 8,
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL :: 1000117000,
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL :: 1000117001,
    PRESENT_SRC_KHR :: 1000001002,
    SHARED_PRESENT_KHR :: 1000111000,
    SHADING_RATE_OPTIMAL_NV :: 1000164003,
    FRAGMENT_DENSITY_MAP_OPTIMAL_EXT :: 1000218000,
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR :: DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR :: DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    BEGIN_RANGE :: UNDEFINED,
    END_RANGE :: PREINITIALIZED,
    RANGE_SIZE :: (PREINITIALIZED - UNDEFINED + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkBlendFactor :: enum {
    ZERO :: 0,
    ONE :: 1,
    SRC_COLOR :: 2,
    ONE_MINUS_SRC_COLOR :: 3,
    DST_COLOR :: 4,
    ONE_MINUS_DST_COLOR :: 5,
    SRC_ALPHA :: 6,
    ONE_MINUS_SRC_ALPHA :: 7,
    DST_ALPHA :: 8,
    ONE_MINUS_DST_ALPHA :: 9,
    CONSTANT_COLOR :: 10,
    ONE_MINUS_CONSTANT_COLOR :: 11,
    CONSTANT_ALPHA :: 12,
    ONE_MINUS_CONSTANT_ALPHA :: 13,
    SRC_ALPHA_SATURATE :: 14,
    SRC1_COLOR :: 15,
    ONE_MINUS_SRC1_COLOR :: 16,
    SRC1_ALPHA :: 17,
    ONE_MINUS_SRC1_ALPHA :: 18,
    BEGIN_RANGE :: ZERO,
    END_RANGE :: ONE_MINUS_SRC1_ALPHA,
    RANGE_SIZE :: (ONE_MINUS_SRC1_ALPHA - ZERO + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkBlendOp :: enum {
    ADD :: 0,
    SUBTRACT :: 1,
    REVERSE_SUBTRACT :: 2,
    MIN :: 3,
    MAX :: 4,
    ZERO_EXT :: 1000148000,
    SRC_EXT :: 1000148001,
    DST_EXT :: 1000148002,
    SRC_OVER_EXT :: 1000148003,
    DST_OVER_EXT :: 1000148004,
    SRC_IN_EXT :: 1000148005,
    DST_IN_EXT :: 1000148006,
    SRC_OUT_EXT :: 1000148007,
    DST_OUT_EXT :: 1000148008,
    SRC_ATOP_EXT :: 1000148009,
    DST_ATOP_EXT :: 1000148010,
    XOR_EXT :: 1000148011,
    MULTIPLY_EXT :: 1000148012,
    SCREEN_EXT :: 1000148013,
    OVERLAY_EXT :: 1000148014,
    DARKEN_EXT :: 1000148015,
    LIGHTEN_EXT :: 1000148016,
    COLORDODGE_EXT :: 1000148017,
    COLORBURN_EXT :: 1000148018,
    HARDLIGHT_EXT :: 1000148019,
    SOFTLIGHT_EXT :: 1000148020,
    DIFFERENCE_EXT :: 1000148021,
    EXCLUSION_EXT :: 1000148022,
    INVERT_EXT :: 1000148023,
    INVERT_RGB_EXT :: 1000148024,
    LINEARDODGE_EXT :: 1000148025,
    LINEARBURN_EXT :: 1000148026,
    VIVIDLIGHT_EXT :: 1000148027,
    LINEARLIGHT_EXT :: 1000148028,
    PINLIGHT_EXT :: 1000148029,
    HARDMIX_EXT :: 1000148030,
    HSL_HUE_EXT :: 1000148031,
    HSL_SATURATION_EXT :: 1000148032,
    HSL_COLOR_EXT :: 1000148033,
    HSL_LUMINOSITY_EXT :: 1000148034,
    PLUS_EXT :: 1000148035,
    PLUS_CLAMPED_EXT :: 1000148036,
    PLUS_CLAMPED_ALPHA_EXT :: 1000148037,
    PLUS_DARKER_EXT :: 1000148038,
    MINUS_EXT :: 1000148039,
    MINUS_CLAMPED_EXT :: 1000148040,
    CONTRAST_EXT :: 1000148041,
    INVERT_OVG_EXT :: 1000148042,
    RED_EXT :: 1000148043,
    GREEN_EXT :: 1000148044,
    BLUE_EXT :: 1000148045,
    BEGIN_RANGE :: ADD,
    END_RANGE :: MAX,
    RANGE_SIZE :: (MAX - ADD + 1),
    MAX_ENUM :: 0x7FFFFFFF
};


VkFrontFace :: enum {
    COUNTER_CLOCKWISE :: 0,
    CLOCKWISE :: 1,
    BEGIN_RANGE :: COUNTER_CLOCKWISE,
    END_RANGE :: CLOCKWISE,
    RANGE_SIZE :: (CLOCKWISE - COUNTER_CLOCKWISE + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkPrimitiveTopology :: enum {
    POINT_LIST :: 0,
    LINE_LIST :: 1,
    LINE_STRIP :: 2,
    TRIANGLE_LIST :: 3,
    TRIANGLE_STRIP :: 4,
    TRIANGLE_FAN :: 5,
    LINE_LIST_WITH_ADJACENCY :: 6,
    LINE_STRIP_WITH_ADJACENCY :: 7,
    TRIANGLE_LIST_WITH_ADJACENCY :: 8,
    TRIANGLE_STRIP_WITH_ADJACENCY :: 9,
    PATCH_LIST :: 10,
    BEGIN_RANGE :: POINT_LIST,
    END_RANGE :: PATCH_LIST,
    RANGE_SIZE :: (PATCH_LIST - POINT_LIST + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkPolygonMode :: enum {
    FILL :: 0,
    LINE :: 1,
    POINT :: 2,
    FILL_RECTANGLE_NV :: 1000153000,
    BEGIN_RANGE :: FILL,
    END_RANGE :: POINT,
    RANGE_SIZE :: (POINT - FILL + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkSharingMode :: enum {
    EXCLUSIVE :: 0,
    CONCURRENT :: 1,
    BEGIN_RANGE :: EXCLUSIVE,
    END_RANGE :: CONCURRENT,
    RANGE_SIZE :: (CONCURRENT - EXCLUSIVE + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkQueueFlagBits :: enum {
    GRAPHICS_BIT :: 0x00000001,
    COMPUTE_BIT :: 0x00000002,
    TRANSFER_BIT :: 0x00000004,
    SPARSE_BINDING_BIT :: 0x00000008,
    PROTECTED_BIT :: 0x00000010,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkSystemAllocationScope :: enum  {
    COMMAND :: 0,
    OBJECT :: 1,
    CACHE :: 2,
    DEVICE :: 3,
    INSTANCE :: 4,
    BEGIN_RANGE :: COMMAND,
    END_RANGE :: INSTANCE,
    RANGE_SIZE :: (INSTANCE - COMMAND + 1),
    MAX_ENUM :: 0x7FFFFFFF
};
                                            
VkInternalAllocationType :: enum {
    EXECUTABLE :: 0,
    BEGIN_RANGE :: EXECUTABLE,
    END_RANGE :: EXECUTABLE,
    RANGE_SIZE :: (EXECUTABLE - EXECUTABLE + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkDeviceQueueCreateFlagBits :: enum {
    PROTECTED_BIT :: 0x00000001,
    MAX_ENUM :: 0x7FFFFFFF
};

VkSwapchainCreateFlagBitsKHR :: enum {
    SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR :: 0x00000001,
    PROTECTED_BIT_KHR :: 0x00000002,
    MUTABLE_FORMAT_BIT_KHR :: 0x00000004,
    FLAG_BITS_MAX_ENUM_KHR :: 0x7FFFFFFF
};

VkVertexInputRate :: enum {
    VERTEX :: 0,
    INSTANCE :: 1,
    BEGIN_RANGE :: VERTEX,
    END_RANGE :: INSTANCE,
    RANGE_SIZE :: (INSTANCE - VERTEX + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkStructureType :: enum {
    APPLICATION_INFO :: 0,
    INSTANCE_CREATE_INFO :: 1,
    DEVICE_QUEUE_CREATE_INFO :: 2,
    DEVICE_CREATE_INFO :: 3,
    SUBMIT_INFO :: 4,
    MEMORY_ALLOCATE_INFO :: 5,
    MAPPED_MEMORY_RANGE :: 6,
    BIND_SPARSE_INFO :: 7,
    FENCE_CREATE_INFO :: 8,
    SEMAPHORE_CREATE_INFO :: 9,
    EVENT_CREATE_INFO :: 10,
    QUERY_POOL_CREATE_INFO :: 11,
    BUFFER_CREATE_INFO :: 12,
    BUFFER_VIEW_CREATE_INFO :: 13,
    IMAGE_CREATE_INFO :: 14,
    IMAGE_VIEW_CREATE_INFO :: 15,
    SHADER_MODULE_CREATE_INFO :: 16,
    PIPELINE_CACHE_CREATE_INFO :: 17,
    PIPELINE_SHADER_STAGE_CREATE_INFO :: 18,
    PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO :: 19,
    PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO :: 20,
    PIPELINE_TESSELLATION_STATE_CREATE_INFO :: 21,
    PIPELINE_VIEWPORT_STATE_CREATE_INFO :: 22,
    PIPELINE_RASTERIZATION_STATE_CREATE_INFO :: 23,
    PIPELINE_MULTISAMPLE_STATE_CREATE_INFO :: 24,
    PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO :: 25,
    PIPELINE_COLOR_BLEND_STATE_CREATE_INFO :: 26,
    PIPELINE_DYNAMIC_STATE_CREATE_INFO :: 27,
    GRAPHICS_PIPELINE_CREATE_INFO :: 28,
    COMPUTE_PIPELINE_CREATE_INFO :: 29,
    PIPELINE_LAYOUT_CREATE_INFO :: 30,
    SAMPLER_CREATE_INFO :: 31,
    DESCRIPTOR_SET_LAYOUT_CREATE_INFO :: 32,
    DESCRIPTOR_POOL_CREATE_INFO :: 33,
    DESCRIPTOR_SET_ALLOCATE_INFO :: 34,
    WRITE_DESCRIPTOR_SET :: 35,
    COPY_DESCRIPTOR_SET :: 36,
    FRAMEBUFFER_CREATE_INFO :: 37,
    RENDER_PASS_CREATE_INFO :: 38,
    COMMAND_POOL_CREATE_INFO :: 39,
    COMMAND_BUFFER_ALLOCATE_INFO :: 40,
    COMMAND_BUFFER_INHERITANCE_INFO :: 41,
    COMMAND_BUFFER_BEGIN_INFO :: 42,
    RENDER_PASS_BEGIN_INFO :: 43,
    BUFFER_MEMORY_BARRIER :: 44,
    IMAGE_MEMORY_BARRIER :: 45,
    MEMORY_BARRIER :: 46,
    LOADER_INSTANCE_CREATE_INFO :: 47,
    LOADER_DEVICE_CREATE_INFO :: 48,
    PHYSICAL_DEVICE_SUBGROUP_PROPERTIES :: 1000094000,
    BIND_BUFFER_MEMORY_INFO :: 1000157000,
    BIND_IMAGE_MEMORY_INFO :: 1000157001,
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES :: 1000083000,
    MEMORY_DEDICATED_REQUIREMENTS :: 1000127000,
    MEMORY_DEDICATED_ALLOCATE_INFO :: 1000127001,
    MEMORY_ALLOCATE_FLAGS_INFO :: 1000060000,
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO :: 1000060003,
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO :: 1000060004,
    DEVICE_GROUP_SUBMIT_INFO :: 1000060005,
    DEVICE_GROUP_BIND_SPARSE_INFO :: 1000060006,
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO :: 1000060013,
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO :: 1000060014,
    PHYSICAL_DEVICE_GROUP_PROPERTIES :: 1000070000,
    DEVICE_GROUP_DEVICE_CREATE_INFO :: 1000070001,
    BUFFER_MEMORY_REQUIREMENTS_INFO_2 :: 1000146000,
    IMAGE_MEMORY_REQUIREMENTS_INFO_2 :: 1000146001,
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 :: 1000146002,
    MEMORY_REQUIREMENTS_2 :: 1000146003,
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 :: 1000146004,
    PHYSICAL_DEVICE_FEATURES_2 :: 1000059000,
    PHYSICAL_DEVICE_PROPERTIES_2 :: 1000059001,
    FORMAT_PROPERTIES_2 :: 1000059002,
    IMAGE_FORMAT_PROPERTIES_2 :: 1000059003,
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 :: 1000059004,
    QUEUE_FAMILY_PROPERTIES_2 :: 1000059005,
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 :: 1000059006,
    SPARSE_IMAGE_FORMAT_PROPERTIES_2 :: 1000059007,
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 :: 1000059008,
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES :: 1000117000,
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO :: 1000117001,
    IMAGE_VIEW_USAGE_CREATE_INFO :: 1000117002,
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO :: 1000117003,
    RENDER_PASS_MULTIVIEW_CREATE_INFO :: 1000053000,
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES :: 1000053001,
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES :: 1000053002,
    PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES :: 1000120000,
    PROTECTED_SUBMIT_INFO :: 1000145000,
    PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES :: 1000145001,
    PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES :: 1000145002,
    DEVICE_QUEUE_INFO_2 :: 1000145003,
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO :: 1000156000,
    SAMPLER_YCBCR_CONVERSION_INFO :: 1000156001,
    BIND_IMAGE_PLANE_MEMORY_INFO :: 1000156002,
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO :: 1000156003,
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES :: 1000156004,
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES :: 1000156005,
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO :: 1000085000,
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO :: 1000071000,
    EXTERNAL_IMAGE_FORMAT_PROPERTIES :: 1000071001,
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO :: 1000071002,
    EXTERNAL_BUFFER_PROPERTIES :: 1000071003,
    PHYSICAL_DEVICE_ID_PROPERTIES :: 1000071004,
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO :: 1000072000,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO :: 1000072001,
    EXPORT_MEMORY_ALLOCATE_INFO :: 1000072002,
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO :: 1000112000,
    EXTERNAL_FENCE_PROPERTIES :: 1000112001,
    EXPORT_FENCE_CREATE_INFO :: 1000113000,
    EXPORT_SEMAPHORE_CREATE_INFO :: 1000077000,
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO :: 1000076000,
    EXTERNAL_SEMAPHORE_PROPERTIES :: 1000076001,
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES :: 1000168000,
    DESCRIPTOR_SET_LAYOUT_SUPPORT :: 1000168001,
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES :: 1000063000,
    SWAPCHAIN_CREATE_INFO_KHR :: 1000001000,
    PRESENT_INFO_KHR :: 1000001001,
    DEVICE_GROUP_PRESENT_CAPABILITIES_KHR :: 1000060007,
    IMAGE_SWAPCHAIN_CREATE_INFO_KHR :: 1000060008,
    BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR :: 1000060009,
    ACQUIRE_NEXT_IMAGE_INFO_KHR :: 1000060010,
    DEVICE_GROUP_PRESENT_INFO_KHR :: 1000060011,
    DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR :: 1000060012,
    DISPLAY_MODE_CREATE_INFO_KHR :: 1000002000,
    DISPLAY_SURFACE_CREATE_INFO_KHR :: 1000002001,
    DISPLAY_PRESENT_INFO_KHR :: 1000003000,
    XLIB_SURFACE_CREATE_INFO_KHR :: 1000004000,
    XCB_SURFACE_CREATE_INFO_KHR :: 1000005000,
    WAYLAND_SURFACE_CREATE_INFO_KHR :: 1000006000,
    ANDROID_SURFACE_CREATE_INFO_KHR :: 1000008000,
    WIN32_SURFACE_CREATE_INFO_KHR :: 1000009000,
    DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT :: 1000011000,
    PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD :: 1000018000,
    DEBUG_MARKER_OBJECT_NAME_INFO_EXT :: 1000022000,
    DEBUG_MARKER_OBJECT_TAG_INFO_EXT :: 1000022001,
    DEBUG_MARKER_MARKER_INFO_EXT :: 1000022002,
    DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV :: 1000026000,
    DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV :: 1000026001,
    DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV :: 1000026002,
    PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT :: 1000028000,
    PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT :: 1000028001,
    PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT :: 1000028002,
    IMAGE_VIEW_HANDLE_INFO_NVX :: 1000030000,
    TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD :: 1000041000,
    STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP :: 1000049000,
    PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV :: 1000050000,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV :: 1000056000,
    EXPORT_MEMORY_ALLOCATE_INFO_NV :: 1000056001,
    IMPORT_MEMORY_WIN32_HANDLE_INFO_NV :: 1000057000,
    EXPORT_MEMORY_WIN32_HANDLE_INFO_NV :: 1000057001,
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV :: 1000058000,
    VALIDATION_FLAGS_EXT :: 1000061000,
    VI_SURFACE_CREATE_INFO_NN :: 1000062000,
    IMAGE_VIEW_ASTC_DECODE_MODE_EXT :: 1000067000,
    PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT :: 1000067001,
    IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR :: 1000073000,
    EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR :: 1000073001,
    MEMORY_WIN32_HANDLE_PROPERTIES_KHR :: 1000073002,
    MEMORY_GET_WIN32_HANDLE_INFO_KHR :: 1000073003,
    IMPORT_MEMORY_FD_INFO_KHR :: 1000074000,
    MEMORY_FD_PROPERTIES_KHR :: 1000074001,
    MEMORY_GET_FD_INFO_KHR :: 1000074002,
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR :: 1000075000,
    IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR :: 1000078000,
    EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR :: 1000078001,
    D3D12_FENCE_SUBMIT_INFO_KHR :: 1000078002,
    SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR :: 1000078003,
    IMPORT_SEMAPHORE_FD_INFO_KHR :: 1000079000,
    SEMAPHORE_GET_FD_INFO_KHR :: 1000079001,
    PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR :: 1000080000,
    COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT :: 1000081000,
    PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT :: 1000081001,
    CONDITIONAL_RENDERING_BEGIN_INFO_EXT :: 1000081002,
    PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR :: 1000082000,
    PRESENT_REGIONS_KHR :: 1000084000,
    OBJECT_TABLE_CREATE_INFO_NVX :: 1000086000,
    INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX :: 1000086001,
    CMD_PROCESS_COMMANDS_INFO_NVX :: 1000086002,
    CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX :: 1000086003,
    DEVICE_GENERATED_COMMANDS_LIMITS_NVX :: 1000086004,
    DEVICE_GENERATED_COMMANDS_FEATURES_NVX :: 1000086005,
    PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV :: 1000087000,
    SURFACE_CAPABILITIES_2_EXT :: 1000090000,
    DISPLAY_POWER_INFO_EXT :: 1000091000,
    DEVICE_EVENT_INFO_EXT :: 1000091001,
    DISPLAY_EVENT_INFO_EXT :: 1000091002,
    SWAPCHAIN_COUNTER_CREATE_INFO_EXT :: 1000091003,
    PRESENT_TIMES_INFO_GOOGLE :: 1000092000,
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX :: 1000097000,
    PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV :: 1000098000,
    PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT :: 1000099000,
    PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT :: 1000099001,
    PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT :: 1000101000,
    PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT :: 1000101001,
    PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT :: 1000102000,
    PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT :: 1000102001,
    HDR_METADATA_EXT :: 1000105000,
    ATTACHMENT_DESCRIPTION_2_KHR :: 1000109000,
    ATTACHMENT_REFERENCE_2_KHR :: 1000109001,
    SUBPASS_DESCRIPTION_2_KHR :: 1000109002,
    SUBPASS_DEPENDENCY_2_KHR :: 1000109003,
    RENDER_PASS_CREATE_INFO_2_KHR :: 1000109004,
    SUBPASS_BEGIN_INFO_KHR :: 1000109005,
    SUBPASS_END_INFO_KHR :: 1000109006,
    SHARED_PRESENT_SURFACE_CAPABILITIES_KHR :: 1000111000,
    IMPORT_FENCE_WIN32_HANDLE_INFO_KHR :: 1000114000,
    EXPORT_FENCE_WIN32_HANDLE_INFO_KHR :: 1000114001,
    FENCE_GET_WIN32_HANDLE_INFO_KHR :: 1000114002,
    IMPORT_FENCE_FD_INFO_KHR :: 1000115000,
    FENCE_GET_FD_INFO_KHR :: 1000115001,
    PHYSICAL_DEVICE_SURFACE_INFO_2_KHR :: 1000119000,
    SURFACE_CAPABILITIES_2_KHR :: 1000119001,
    SURFACE_FORMAT_2_KHR :: 1000119002,
    DISPLAY_PROPERTIES_2_KHR :: 1000121000,
    DISPLAY_PLANE_PROPERTIES_2_KHR :: 1000121001,
    DISPLAY_MODE_PROPERTIES_2_KHR :: 1000121002,
    DISPLAY_PLANE_INFO_2_KHR :: 1000121003,
    DISPLAY_PLANE_CAPABILITIES_2_KHR :: 1000121004,
    IOS_SURFACE_CREATE_INFO_MVK :: 1000122000,
    MACOS_SURFACE_CREATE_INFO_MVK :: 1000123000,
    DEBUG_UTILS_OBJECT_NAME_INFO_EXT :: 1000128000,
    DEBUG_UTILS_OBJECT_TAG_INFO_EXT :: 1000128001,
    DEBUG_UTILS_LABEL_EXT :: 1000128002,
    DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT :: 1000128003,
    DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT :: 1000128004,
    ANDROID_HARDWARE_BUFFER_USAGE_ANDROID :: 1000129000,
    ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID :: 1000129001,
    ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID :: 1000129002,
    IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID :: 1000129003,
    MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID :: 1000129004,
    EXTERNAL_FORMAT_ANDROID :: 1000129005,
    PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT :: 1000130000,
    SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT :: 1000130001,
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT :: 1000138000,
    PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT :: 1000138001,
    WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT :: 1000138002,
    DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT :: 1000138003,
    SAMPLE_LOCATIONS_INFO_EXT :: 1000143000,
    RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT :: 1000143001,
    PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT :: 1000143002,
    PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT :: 1000143003,
    MULTISAMPLE_PROPERTIES_EXT :: 1000143004,
    IMAGE_FORMAT_LIST_CREATE_INFO_KHR :: 1000147000,
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT :: 1000148000,
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT :: 1000148001,
    PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT :: 1000148002,
    PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV :: 1000149000,
    PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV :: 1000152000,
    DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT :: 1000158000,
    DRM_FORMAT_MODIFIER_PROPERTIES_EXT :: 1000158001,
    PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT :: 1000158002,
    IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT :: 1000158003,
    IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT :: 1000158004,
    IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT :: 1000158005,
    VALIDATION_CACHE_CREATE_INFO_EXT :: 1000160000,
    SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT :: 1000160001,
    DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT :: 1000161000,
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT :: 1000161001,
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT :: 1000161002,
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT :: 1000161003,
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT :: 1000161004,
    PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV :: 1000164000,
    PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV :: 1000164001,
    PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV :: 1000164002,
    PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV :: 1000164005,
    RAY_TRACING_PIPELINE_CREATE_INFO_NV :: 1000165000,
    ACCELERATION_STRUCTURE_CREATE_INFO_NV :: 1000165001,
    GEOMETRY_NV :: 1000165003,
    GEOMETRY_TRIANGLES_NV :: 1000165004,
    GEOMETRY_AABB_NV :: 1000165005,
    BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV :: 1000165006,
    WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV :: 1000165007,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV :: 1000165008,
    PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV :: 1000165009,
    RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV :: 1000165011,
    ACCELERATION_STRUCTURE_INFO_NV :: 1000165012,
    PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV :: 1000166000,
    PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV :: 1000166001,
    PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT :: 1000170000,
    FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT :: 1000170001,
    DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT :: 1000174000,
    PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR :: 1000177000,
    IMPORT_MEMORY_HOST_POINTER_INFO_EXT :: 1000178000,
    MEMORY_HOST_POINTER_PROPERTIES_EXT :: 1000178001,
    PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT :: 1000178002,
    PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR :: 1000180000,
    CALIBRATED_TIMESTAMP_INFO_EXT :: 1000184000,
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD :: 1000185000,
    DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD :: 1000189000,
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT :: 1000190000,
    PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT :: 1000190001,
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT :: 1000190002,
    PRESENT_FRAME_TOKEN_GGP :: 1000191000,
    PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT :: 1000192000,
    PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR :: 1000196000,
    PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR :: 1000197000,
    PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR :: 1000199000,
    SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR :: 1000199001,
    PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV :: 1000201000,
    PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV :: 1000202000,
    PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV :: 1000202001,
    PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV :: 1000203000,
    PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV :: 1000204000,
    PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV :: 1000205000,
    PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV :: 1000205002,
    CHECKPOINT_DATA_NV :: 1000206000,
    QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV :: 1000206001,
    PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR :: 1000211000,
    PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT :: 1000212000,
    DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD :: 1000213000,
    SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD :: 1000213001,
    IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA :: 1000214000,
    METAL_SURFACE_CREATE_INFO_EXT :: 1000217000,
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT :: 1000218000,
    PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT :: 1000218001,
    RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT :: 1000218002,
    PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT :: 1000221000,
    PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT :: 1000237000,
    PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT :: 1000238000,
    MEMORY_PRIORITY_ALLOCATE_INFO_EXT :: 1000238001,
    SURFACE_PROTECTED_CAPABILITIES_KHR :: 1000239000,
    PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV :: 1000240000,
    PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT :: 1000244000,
    BUFFER_DEVICE_ADDRESS_INFO_EXT :: 1000244001,
    BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT :: 1000244002,
    IMAGE_STENCIL_USAGE_CREATE_INFO_EXT :: 1000246000,
    VALIDATION_FEATURES_EXT :: 1000247000,
    PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV :: 1000249000,
    COOPERATIVE_MATRIX_PROPERTIES_NV :: 1000249001,
    PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV :: 1000249002,
    PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT :: 1000252000,
    SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT :: 1000255000,
    SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT :: 1000255002,
    SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT :: 1000255001,
    PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT :: 1000261000,
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES :: PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES :: PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    DEBUG_REPORT_CREATE_INFO_EXT :: DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR :: RENDER_PASS_MULTIVIEW_CREATE_INFO,
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR :: PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR :: PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    PHYSICAL_DEVICE_FEATURES_2_KHR :: PHYSICAL_DEVICE_FEATURES_2,
    PHYSICAL_DEVICE_PROPERTIES_2_KHR :: PHYSICAL_DEVICE_PROPERTIES_2,
    FORMAT_PROPERTIES_2_KHR :: FORMAT_PROPERTIES_2,
    IMAGE_FORMAT_PROPERTIES_2_KHR :: IMAGE_FORMAT_PROPERTIES_2,
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR :: PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    QUEUE_FAMILY_PROPERTIES_2_KHR :: QUEUE_FAMILY_PROPERTIES_2,
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR :: PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR :: SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR :: PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    MEMORY_ALLOCATE_FLAGS_INFO_KHR :: MEMORY_ALLOCATE_FLAGS_INFO,
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR :: DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR :: DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    DEVICE_GROUP_SUBMIT_INFO_KHR :: DEVICE_GROUP_SUBMIT_INFO,
    DEVICE_GROUP_BIND_SPARSE_INFO_KHR :: DEVICE_GROUP_BIND_SPARSE_INFO,
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR :: BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR :: BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR :: PHYSICAL_DEVICE_GROUP_PROPERTIES,
    DEVICE_GROUP_DEVICE_CREATE_INFO_KHR :: DEVICE_GROUP_DEVICE_CREATE_INFO,
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR :: PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR :: EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR :: PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    EXTERNAL_BUFFER_PROPERTIES_KHR :: EXTERNAL_BUFFER_PROPERTIES,
    PHYSICAL_DEVICE_ID_PROPERTIES_KHR :: PHYSICAL_DEVICE_ID_PROPERTIES,
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR :: EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR :: EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    EXPORT_MEMORY_ALLOCATE_INFO_KHR :: EXPORT_MEMORY_ALLOCATE_INFO,
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR :: PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    EXTERNAL_SEMAPHORE_PROPERTIES_KHR :: EXTERNAL_SEMAPHORE_PROPERTIES,
    EXPORT_SEMAPHORE_CREATE_INFO_KHR :: EXPORT_SEMAPHORE_CREATE_INFO,
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR :: PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR :: DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    SURFACE_CAPABILITIES2_EXT :: SURFACE_CAPABILITIES_2_EXT,
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR :: PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    EXTERNAL_FENCE_PROPERTIES_KHR :: EXTERNAL_FENCE_PROPERTIES,
    EXPORT_FENCE_CREATE_INFO_KHR :: EXPORT_FENCE_CREATE_INFO,
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR :: PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR :: RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    IMAGE_VIEW_USAGE_CREATE_INFO_KHR :: IMAGE_VIEW_USAGE_CREATE_INFO,
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR :: PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR :: PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR :: PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    MEMORY_DEDICATED_REQUIREMENTS_KHR :: MEMORY_DEDICATED_REQUIREMENTS,
    MEMORY_DEDICATED_ALLOCATE_INFO_KHR :: MEMORY_DEDICATED_ALLOCATE_INFO,
    BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR :: BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR :: IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR :: IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    MEMORY_REQUIREMENTS_2_KHR :: MEMORY_REQUIREMENTS_2,
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR :: SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR :: SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    SAMPLER_YCBCR_CONVERSION_INFO_KHR :: SAMPLER_YCBCR_CONVERSION_INFO,
    BIND_IMAGE_PLANE_MEMORY_INFO_KHR :: BIND_IMAGE_PLANE_MEMORY_INFO,
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR :: IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR :: PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR :: SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    BIND_BUFFER_MEMORY_INFO_KHR :: BIND_BUFFER_MEMORY_INFO,
    BIND_IMAGE_MEMORY_INFO_KHR :: BIND_IMAGE_MEMORY_INFO,
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR :: PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR :: DESCRIPTOR_SET_LAYOUT_SUPPORT,
    PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT :: PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    BEGIN_RANGE :: APPLICATION_INFO,
    END_RANGE :: LOADER_DEVICE_CREATE_INFO,
    RANGE_SIZE :: (LOADER_DEVICE_CREATE_INFO - APPLICATION_INFO + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkFormat :: enum {
    UNDEFINED :: 0,
    R4G4_UNORM_PACK8 :: 1,
    R4G4B4A4_UNORM_PACK16 :: 2,
    B4G4R4A4_UNORM_PACK16 :: 3,
    R5G6B5_UNORM_PACK16 :: 4,
    B5G6R5_UNORM_PACK16 :: 5,
    R5G5B5A1_UNORM_PACK16 :: 6,
    B5G5R5A1_UNORM_PACK16 :: 7,
    A1R5G5B5_UNORM_PACK16 :: 8,
    R8_UNORM :: 9,
    R8_SNORM :: 10,
    R8_USCALED :: 11,
    R8_SSCALED :: 12,
    R8_UINT :: 13,
    R8_SINT :: 14,
    R8_SRGB :: 15,
    R8G8_UNORM :: 16,
    R8G8_SNORM :: 17,
    R8G8_USCALED :: 18,
    R8G8_SSCALED :: 19,
    R8G8_UINT :: 20,
    R8G8_SINT :: 21,
    R8G8_SRGB :: 22,
    R8G8B8_UNORM :: 23,
    R8G8B8_SNORM :: 24,
    R8G8B8_USCALED :: 25,
    R8G8B8_SSCALED :: 26,
    R8G8B8_UINT :: 27,
    R8G8B8_SINT :: 28,
    R8G8B8_SRGB :: 29,
    B8G8R8_UNORM :: 30,
    B8G8R8_SNORM :: 31,
    B8G8R8_USCALED :: 32,
    B8G8R8_SSCALED :: 33,
    B8G8R8_UINT :: 34,
    B8G8R8_SINT :: 35,
    B8G8R8_SRGB :: 36,
    R8G8B8A8_UNORM :: 37,
    R8G8B8A8_SNORM :: 38,
    R8G8B8A8_USCALED :: 39,
    R8G8B8A8_SSCALED :: 40,
    R8G8B8A8_UINT :: 41,
    R8G8B8A8_SINT :: 42,
    R8G8B8A8_SRGB :: 43,
    B8G8R8A8_UNORM :: 44,
    B8G8R8A8_SNORM :: 45,
    B8G8R8A8_USCALED :: 46,
    B8G8R8A8_SSCALED :: 47,
    B8G8R8A8_UINT :: 48,
    B8G8R8A8_SINT :: 49,
    B8G8R8A8_SRGB :: 50,
    A8B8G8R8_UNORM_PACK32 :: 51,
    A8B8G8R8_SNORM_PACK32 :: 52,
    A8B8G8R8_USCALED_PACK32 :: 53,
    A8B8G8R8_SSCALED_PACK32 :: 54,
    A8B8G8R8_UINT_PACK32 :: 55,
    A8B8G8R8_SINT_PACK32 :: 56,
    A8B8G8R8_SRGB_PACK32 :: 57,
    A2R10G10B10_UNORM_PACK32 :: 58,
    A2R10G10B10_SNORM_PACK32 :: 59,
    A2R10G10B10_USCALED_PACK32 :: 60,
    A2R10G10B10_SSCALED_PACK32 :: 61,
    A2R10G10B10_UINT_PACK32 :: 62,
    A2R10G10B10_SINT_PACK32 :: 63,
    A2B10G10R10_UNORM_PACK32 :: 64,
    A2B10G10R10_SNORM_PACK32 :: 65,
    A2B10G10R10_USCALED_PACK32 :: 66,
    A2B10G10R10_SSCALED_PACK32 :: 67,
    A2B10G10R10_UINT_PACK32 :: 68,
    A2B10G10R10_SINT_PACK32 :: 69,
    R16_UNORM :: 70,
    R16_SNORM :: 71,
    R16_USCALED :: 72,
    R16_SSCALED :: 73,
    R16_UINT :: 74,
    R16_SINT :: 75,
    R16_SFLOAT :: 76,
    R16G16_UNORM :: 77,
    R16G16_SNORM :: 78,
    R16G16_USCALED :: 79,
    R16G16_SSCALED :: 80,
    R16G16_UINT :: 81,
    R16G16_SINT :: 82,
    R16G16_SFLOAT :: 83,
    R16G16B16_UNORM :: 84,
    R16G16B16_SNORM :: 85,
    R16G16B16_USCALED :: 86,
    R16G16B16_SSCALED :: 87,
    R16G16B16_UINT :: 88,
    R16G16B16_SINT :: 89,
    R16G16B16_SFLOAT :: 90,
    R16G16B16A16_UNORM :: 91,
    R16G16B16A16_SNORM :: 92,
    R16G16B16A16_USCALED :: 93,
    R16G16B16A16_SSCALED :: 94,
    R16G16B16A16_UINT :: 95,
    R16G16B16A16_SINT :: 96,
    R16G16B16A16_SFLOAT :: 97,
    R32_UINT :: 98,
    R32_SINT :: 99,
    R32_SFLOAT :: 100,
    R32G32_UINT :: 101,
    R32G32_SINT :: 102,
    R32G32_SFLOAT :: 103,
    R32G32B32_UINT :: 104,
    R32G32B32_SINT :: 105,
    R32G32B32_SFLOAT :: 106,
    R32G32B32A32_UINT :: 107,
    R32G32B32A32_SINT :: 108,
    R32G32B32A32_SFLOAT :: 109,
    R64_UINT :: 110,
    R64_SINT :: 111,
    R64_SFLOAT :: 112,
    R64G64_UINT :: 113,
    R64G64_SINT :: 114,
    R64G64_SFLOAT :: 115,
    R64G64B64_UINT :: 116,
    R64G64B64_SINT :: 117,
    R64G64B64_SFLOAT :: 118,
    R64G64B64A64_UINT :: 119,
    R64G64B64A64_SINT :: 120,
    R64G64B64A64_SFLOAT :: 121,
    B10G11R11_UFLOAT_PACK32 :: 122,
    E5B9G9R9_UFLOAT_PACK32 :: 123,
    D16_UNORM :: 124,
    X8_D24_UNORM_PACK32 :: 125,
    D32_SFLOAT :: 126,
    S8_UINT :: 127,
    D16_UNORM_S8_UINT :: 128,
    D24_UNORM_S8_UINT :: 129,
    D32_SFLOAT_S8_UINT :: 130,
    BC1_RGB_UNORM_BLOCK :: 131,
    BC1_RGB_SRGB_BLOCK :: 132,
    BC1_RGBA_UNORM_BLOCK :: 133,
    BC1_RGBA_SRGB_BLOCK :: 134,
    BC2_UNORM_BLOCK :: 135,
    BC2_SRGB_BLOCK :: 136,
    BC3_UNORM_BLOCK :: 137,
    BC3_SRGB_BLOCK :: 138,
    BC4_UNORM_BLOCK :: 139,
    BC4_SNORM_BLOCK :: 140,
    BC5_UNORM_BLOCK :: 141,
    BC5_SNORM_BLOCK :: 142,
    BC6H_UFLOAT_BLOCK :: 143,
    BC6H_SFLOAT_BLOCK :: 144,
    BC7_UNORM_BLOCK :: 145,
    BC7_SRGB_BLOCK :: 146,
    ETC2_R8G8B8_UNORM_BLOCK :: 147,
    ETC2_R8G8B8_SRGB_BLOCK :: 148,
    ETC2_R8G8B8A1_UNORM_BLOCK :: 149,
    ETC2_R8G8B8A1_SRGB_BLOCK :: 150,
    ETC2_R8G8B8A8_UNORM_BLOCK :: 151,
    ETC2_R8G8B8A8_SRGB_BLOCK :: 152,
    EAC_R11_UNORM_BLOCK :: 153,
    EAC_R11_SNORM_BLOCK :: 154,
    EAC_R11G11_UNORM_BLOCK :: 155,
    EAC_R11G11_SNORM_BLOCK :: 156,
    ASTC_4x4_UNORM_BLOCK :: 157,
    ASTC_4x4_SRGB_BLOCK :: 158,
    ASTC_5x4_UNORM_BLOCK :: 159,
    ASTC_5x4_SRGB_BLOCK :: 160,
    ASTC_5x5_UNORM_BLOCK :: 161,
    ASTC_5x5_SRGB_BLOCK :: 162,
    ASTC_6x5_UNORM_BLOCK :: 163,
    ASTC_6x5_SRGB_BLOCK :: 164,
    ASTC_6x6_UNORM_BLOCK :: 165,
    ASTC_6x6_SRGB_BLOCK :: 166,
    ASTC_8x5_UNORM_BLOCK :: 167,
    ASTC_8x5_SRGB_BLOCK :: 168,
    ASTC_8x6_UNORM_BLOCK :: 169,
    ASTC_8x6_SRGB_BLOCK :: 170,
    ASTC_8x8_UNORM_BLOCK :: 171,
    ASTC_8x8_SRGB_BLOCK :: 172,
    ASTC_10x5_UNORM_BLOCK :: 173,
    ASTC_10x5_SRGB_BLOCK :: 174,
    ASTC_10x6_UNORM_BLOCK :: 175,
    ASTC_10x6_SRGB_BLOCK :: 176,
    ASTC_10x8_UNORM_BLOCK :: 177,
    ASTC_10x8_SRGB_BLOCK :: 178,
    ASTC_10x10_UNORM_BLOCK :: 179,
    ASTC_10x10_SRGB_BLOCK :: 180,
    ASTC_12x10_UNORM_BLOCK :: 181,
    ASTC_12x10_SRGB_BLOCK :: 182,
    ASTC_12x12_UNORM_BLOCK :: 183,
    ASTC_12x12_SRGB_BLOCK :: 184,
    G8B8G8R8_422_UNORM :: 1000156000,
    B8G8R8G8_422_UNORM :: 1000156001,
    G8_B8_R8_3PLANE_420_UNORM :: 1000156002,
    G8_B8R8_2PLANE_420_UNORM :: 1000156003,
    G8_B8_R8_3PLANE_422_UNORM :: 1000156004,
    G8_B8R8_2PLANE_422_UNORM :: 1000156005,
    G8_B8_R8_3PLANE_444_UNORM :: 1000156006,
    R10X6_UNORM_PACK16 :: 1000156007,
    R10X6G10X6_UNORM_2PACK16 :: 1000156008,
    R10X6G10X6B10X6A10X6_UNORM_4PACK16 :: 1000156009,
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 :: 1000156010,
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 :: 1000156011,
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 :: 1000156012,
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 :: 1000156013,
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 :: 1000156014,
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 :: 1000156015,
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 :: 1000156016,
    R12X4_UNORM_PACK16 :: 1000156017,
    R12X4G12X4_UNORM_2PACK16 :: 1000156018,
    R12X4G12X4B12X4A12X4_UNORM_4PACK16 :: 1000156019,
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 :: 1000156020,
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 :: 1000156021,
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 :: 1000156022,
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 :: 1000156023,
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 :: 1000156024,
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 :: 1000156025,
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 :: 1000156026,
    G16B16G16R16_422_UNORM :: 1000156027,
    B16G16R16G16_422_UNORM :: 1000156028,
    G16_B16_R16_3PLANE_420_UNORM :: 1000156029,
    G16_B16R16_2PLANE_420_UNORM :: 1000156030,
    G16_B16_R16_3PLANE_422_UNORM :: 1000156031,
    G16_B16R16_2PLANE_422_UNORM :: 1000156032,
    G16_B16_R16_3PLANE_444_UNORM :: 1000156033,
    PVRTC1_2BPP_UNORM_BLOCK_IMG :: 1000054000,
    PVRTC1_4BPP_UNORM_BLOCK_IMG :: 1000054001,
    PVRTC2_2BPP_UNORM_BLOCK_IMG :: 1000054002,
    PVRTC2_4BPP_UNORM_BLOCK_IMG :: 1000054003,
    PVRTC1_2BPP_SRGB_BLOCK_IMG :: 1000054004,
    PVRTC1_4BPP_SRGB_BLOCK_IMG :: 1000054005,
    PVRTC2_2BPP_SRGB_BLOCK_IMG :: 1000054006,
    PVRTC2_4BPP_SRGB_BLOCK_IMG :: 1000054007,
    G8B8G8R8_422_UNORM_KHR :: G8B8G8R8_422_UNORM,
    B8G8R8G8_422_UNORM_KHR :: B8G8R8G8_422_UNORM,
    G8_B8_R8_3PLANE_420_UNORM_KHR :: G8_B8_R8_3PLANE_420_UNORM,
    G8_B8R8_2PLANE_420_UNORM_KHR :: G8_B8R8_2PLANE_420_UNORM,
    G8_B8_R8_3PLANE_422_UNORM_KHR :: G8_B8_R8_3PLANE_422_UNORM,
    G8_B8R8_2PLANE_422_UNORM_KHR :: G8_B8R8_2PLANE_422_UNORM,
    G8_B8_R8_3PLANE_444_UNORM_KHR :: G8_B8_R8_3PLANE_444_UNORM,
    R10X6_UNORM_PACK16_KHR :: R10X6_UNORM_PACK16,
    R10X6G10X6_UNORM_2PACK16_KHR :: R10X6G10X6_UNORM_2PACK16,
    R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR :: R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR :: G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR :: B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR :: G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR :: G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR :: G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    R12X4_UNORM_PACK16_KHR :: R12X4_UNORM_PACK16,
    R12X4G12X4_UNORM_2PACK16_KHR :: R12X4G12X4_UNORM_2PACK16,
    R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR :: R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR :: G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR :: B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR :: G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR :: G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR :: G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    G16B16G16R16_422_UNORM_KHR :: G16B16G16R16_422_UNORM,
    B16G16R16G16_422_UNORM_KHR :: B16G16R16G16_422_UNORM,
    G16_B16_R16_3PLANE_420_UNORM_KHR :: G16_B16_R16_3PLANE_420_UNORM,
    G16_B16R16_2PLANE_420_UNORM_KHR :: G16_B16R16_2PLANE_420_UNORM,
    G16_B16_R16_3PLANE_422_UNORM_KHR :: G16_B16_R16_3PLANE_422_UNORM,
    G16_B16R16_2PLANE_422_UNORM_KHR :: G16_B16R16_2PLANE_422_UNORM,
    G16_B16_R16_3PLANE_444_UNORM_KHR :: G16_B16_R16_3PLANE_444_UNORM,
    BEGIN_RANGE :: UNDEFINED,
    END_RANGE :: ASTC_12x12_SRGB_BLOCK,
    RANGE_SIZE :: (ASTC_12x12_SRGB_BLOCK - UNDEFINED + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkColorSpaceKHR :: enum {
    SRGB_NONLINEAR_KHR :: 0,
    DISPLAY_P3_NONLINEAR_EXT :: 1000104001,
    EXTENDED_SRGB_LINEAR_EXT :: 1000104002,
    DISPLAY_P3_LINEAR_EXT :: 1000104003,
    DCI_P3_NONLINEAR_EXT :: 1000104004,
    BT709_LINEAR_EXT :: 1000104005,
    BT709_NONLINEAR_EXT :: 1000104006,
    BT2020_LINEAR_EXT :: 1000104007,
    HDR10_ST2084_EXT :: 1000104008,
    DOLBYVISION_EXT :: 1000104009,
    HDR10_HLG_EXT :: 1000104010,
    ADOBERGB_LINEAR_EXT :: 1000104011,
    ADOBERGB_NONLINEAR_EXT :: 1000104012,
    PASS_THROUGH_EXT :: 1000104013,
    EXTENDED_SRGB_NONLINEAR_EXT :: 1000104014,
    DISPLAY_NATIVE_AMD :: 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR :: SRGB_NONLINEAR_KHR,
    DCI_P3_LINEAR_EXT :: DISPLAY_P3_LINEAR_EXT,
    BEGIN_RANGE_KHR :: SRGB_NONLINEAR_KHR,
    END_RANGE_KHR :: SRGB_NONLINEAR_KHR,
    RANGE_SIZE_KHR :: (SRGB_NONLINEAR_KHR - SRGB_NONLINEAR_KHR + 1),
    MAX_ENUM_KHR :: 0x7FFFFFFF
};

VkPresentModeKHR :: enum {
    IMMEDIATE_KHR :: 0,
    MAILBOX_KHR :: 1,
    FIFO_KHR :: 2,
    FIFO_RELAXED_KHR :: 3,
    SHARED_DEMAND_REFRESH_KHR :: 1000111000,
    SHARED_CONTINUOUS_REFRESH_KHR :: 1000111001,
    BEGIN_RANGE_KHR :: IMMEDIATE_KHR,
    END_RANGE_KHR :: FIFO_RELAXED_KHR,
    RANGE_SIZE_KHR :: (FIFO_RELAXED_KHR - IMMEDIATE_KHR + 1),
    MAX_ENUM_KHR :: 0x7FFFFFFF
};

VkImageViewType :: enum {
    _1D :: 0,
    _2D :: 1,
    _3D :: 2,
    CUBE :: 3,
    _1D_ARRAY :: 4,
    _2D_ARRAY :: 5,
    CUBE_ARRAY :: 6,
    BEGIN_RANGE :: _1D,
    END_RANGE :: CUBE_ARRAY,
    RANGE_SIZE :: (CUBE_ARRAY - _1D + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

VkShaderStageFlagBits :: enum {
    VERTEX_BIT :: 0x00000001,
    TESSELLATION_CONTROL_BIT :: 0x00000002,
    TESSELLATION_EVALUATION_BIT :: 0x00000004,
    GEOMETRY_BIT :: 0x00000008,
    FRAGMENT_BIT :: 0x00000010,
    COMPUTE_BIT :: 0x00000020,
    ALL_GRAPHICS :: 0x0000001F,
    ALL :: 0x7FFFFFFF,
    RAYGEN_BIT_NV :: 0x00000100,
    ANY_HIT_BIT_NV :: 0x00000200,
    CLOSEST_HIT_BIT_NV :: 0x00000400,
    MISS_BIT_NV :: 0x00000800,
    INTERSECTION_BIT_NV :: 0x00001000,
    CALLABLE_BIT_NV :: 0x00002000,
    TASK_BIT_NV :: 0x00000040,
    MESH_BIT_NV :: 0x00000080,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkImageViewCreateFlagBits :: enum {
    FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT :: 0x00000001,
    FLAG_BITS_MAX_ENUM :: 0x7FFFFFFF
};

VkComponentSwizzle :: enum {
    IDENTITY :: 0,
    ZERO :: 1,
    ONE :: 2,
    R :: 3,
    G :: 4,
    B :: 5,
    A :: 6,
    BEGIN_RANGE :: IDENTITY,
    END_RANGE :: A,
    RANGE_SIZE :: (A - IDENTITY + 1),
    MAX_ENUM :: 0x7FFFFFFF
};

/*
typedef union VkClearColorValue {
    float       float32[4];
    int32_t     int32[4];
    uint32_t    uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
    float       depth;
    uint32_t    stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
    VkClearColorValue           color;
    VkClearDepthStencilValue    depthStencil;
};
*/

// HACK: original declaration is union
VkClearValue :: [4]f32;

VkExtent3D :: struct {
    width: u32,
    height: u32,
    depth: u32
};

VkExtent2D :: struct {
    width: u32,
    height: u32,
};

VkOffset2D :: struct {
    x: s32, 
    y: s32
};

VkRect2D :: struct {
    offset: VkOffset2D,
    extent: VkExtent2D 
};

VkPushConstantRange :: struct {
    stageFlags: VkShaderStageFlags,
    offset: u32, 
    size: u32,
};

VkViewport :: struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    minDepth: f32,
    maxDepth: f32,
};

VkStencilOpState :: struct {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32, 
    writeMask: u32,
    reference: u32
};

VkPhysicalDeviceFeatures :: struct {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
};

VkExtensionProperties :: struct {
    extensionName : [VK_MAX_EXTENSION_NAME_SIZE]u8,
    specVersion : u32
};

VkSurfaceFormatKHR :: struct {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR
};

VkAttachmentDescription :: struct {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
};

VkSubpassDescription :: struct {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: *VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: *VkAttachmentReference,
    pResolveAttachments: *VkAttachmentReference,
    pDepthStencilAttachment: *VkAttachmentReference,
    preserveAttachmentCount: u32, 
    pPreserveAttachments: u32,
};

VkSubpassDependency :: struct {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags
};

VkAttachmentReference :: struct {
    attachment: u32,
    layout: VkImageLayout
};

VkApplicationInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    pApplicationName: *u8, 
    applicationVersion: u32,
    pEngineName: *u8,
    engineVersion: u32,
    apiVersion: u32
};

VkPresentInfoKHR :: struct {
    sType: VkStructureType,
    pNext: *u8,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *VkSemaphore,
    swapchainCount: u32,
    pSwapchains: *VkSwapchainKHR,
    pImageIndices: *u32, 
    pResults: *VkResult
};


VkSubmitInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *VkSemaphore,
    pWaitDstStageMask: *VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: *VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *VkSemaphore
};

VkSemaphoreCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkSemaphoreCreateFlags,
};

VkFenceCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkFenceCreateFlags,
};


VkRenderPassBeginInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: *VkClearValue,
};

VkCommandBufferInheritanceInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    renderPass: VkRenderPass,
    subpass: u32, 
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
};

VkCommandBufferBeginInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: *VkCommandBufferInheritanceInfo
};

VkCommandBufferAllocateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
};

VkCommandPoolCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkCommandPoolCreateFlags, 
    queueFamilyIndex: u32 
};

VkFramebufferCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32, 
    pAttachments: *VkImageView,
    width: u32, 
    height: u32,
    layers: u32 
};

VkPipelineColorBlendStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32, 
    pAttachments: *VkPipelineColorBlendAttachmentState,
    blendConstants: [4]f32,
};

VkPipelineTessellationStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
};

VkPipelineDepthStencilStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: f32,
    maxDepthBounds: f32 
};

VkRenderPassCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: *VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: *VkSubpassDependency
};

VkPipelineLayoutCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: *VkDescriptorSetLayout,
    pushConstantRangeCount: u32, 
    pPushConstantRanges: *VkPushConstantRange,
};


VkPipelineColorBlendAttachmentState :: struct {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
};

VkPipelineMultisampleStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: f32,
    pSampleMask: *VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
};

VkPipelineDynamicStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32, 
    pDynamicStates: *VkDynamicState
};

VkInstanceCreateInfo :: struct {
    sType: VkStructureType, 
    pNext: *u8,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: *VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *u8 
};

VkPipelineRasterizationStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: f32,
    depthBiasClamp: f32,
    depthBiasSlopeFactor: f32,
    lineWidth: f32,
};

VkPipelineViewportStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32, 
    pViewports: *VkViewport,
    scissorCount: u32,
    pScissors: *VkRect2D
};

VkSpecializationMapEntry :: struct {
    constantID: u32,
    offset: u32, 
    size: usize
};

VkSpecializationInfo :: struct {
    mapEntryCount: u32,
    pMapEntries: *VkSpecializationMapEntry,
    dataSize: usize, 
    pData: *u8, 
};

VkDeviceQueueCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: *f32
};

VkDeviceCreateInfo :: struct {
    sType: VkStructureType,  
    pNext: *u8,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: *VkDeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *u8,
    pEnabledFeatures: *VkPhysicalDeviceFeatures
};

VkImageViewCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange
};

VkSwapchainCreateInfoKHR :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,                        
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices:   *u32,     
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
};

VkPipelineShaderStageCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: *u8,
    pSpecializationInfo: *VkSpecializationInfo,
};

VkPipelineInputAssemblyStateCreateInfo :: struct {
	sType: VkStructureType,
	pNext: *u8, 
	flags: VkPipelineInputAssemblyStateCreateFlags,
	topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32
};

VkShaderModuleCreateInfo :: struct {
   sType: VkStructureType,
   pNext: *u8,                  
   flags: VkShaderModuleCreateFlags,
   codeSize: usize, 
   pCode: *u8
};

VkPipelineVertexInputStateCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8, 
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: *VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,  
    pVertexAttributeDescriptions: *VkVertexInputAttributeDescription
};

VkGraphicsPipelineCreateInfo :: struct {
    sType: VkStructureType,
    pNext: *u8,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *VkPipelineShaderStageCreateInfo,
    pVertexInputState: *VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: *VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: *VkPipelineTessellationStateCreateInfo, 
    pViewportState: *VkPipelineViewportStateCreateInfo,
    pRasterizationState: *VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: *VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: *VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: *VkPipelineColorBlendStateCreateInfo,
    pDynamicState: *VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: u32 
};

VkVertexInputBindingDescription :: struct {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate
};

VkVertexInputAttributeDescription :: struct {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32
};

VkComponentMapping :: struct {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
};

VkImageSubresourceRange :: struct {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};

VkAllocationCallbacks :: struct {
    pUserData: *u8,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification 
};

VkSurfaceCapabilitiesKHR :: struct {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
};

VkLayerProperties :: struct {
    layerName: [VK_MAX_EXTENSION_NAME_SIZE]u8,
    specVersion: u32,
    implementationVersion: u32,
    description: [VK_MAX_DESCRIPTION_SIZE]u8
};

VkQueueFamilyProperties :: struct {
    queueFlags: VkQueueFlags, 
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D
};

vkEnumerateInstanceLayerProperties :: fn (pPropertyCount: *u32, pProperties: *VkLayerProperties) VkResult #extern;
vkEnumeratePhysicalDevices :: fn (instance: VkInstance, pPhysicalDeviceCount: *u32, pPhysicalDevices: *VkPhysicalDevice) VkResult #extern;
vkEnumerateInstanceExtensionProperties :: fn (pLayerName: *u8, pPropertyCount: *u32, pProperties: *VkExtensionProperties) VkResult #extern;
vkCreateInstance :: fn (pCreateInfo: *VkInstanceCreateInfo, pAllocator: *VkAllocationCallbacks, pInstance: *VkInstance) VkResult #extern;
vkDestroyInstance :: fn (instance: VkInstance, pAllocator: *VkAllocationCallbacks) #extern;
vkGetPhysicalDeviceQueueFamilyProperties :: fn (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *u32, pQueueFamilyProperties: *VkQueueFamilyProperties) #extern;
vkCreateDevice :: fn (physicalDevice: VkPhysicalDevice, pCreateInfo: *VkDeviceCreateInfo, pAllocator: *VkAllocationCallbacks, pDevice: *VkDevice) VkResult #extern;
vkDestroyDevice :: fn (device: VkDevice, pAllocator: *VkAllocationCallbacks) #extern;
vkGetDeviceQueue :: fn (device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: *VkQueue) #extern;
vkDestroySurfaceKHR :: fn (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: *VkAllocationCallbacks) #extern;
vkGetPhysicalDeviceSurfaceSupportKHR :: fn (physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: *VkBool32) VkResult #extern;
vkEnumerateDeviceExtensionProperties :: fn (physicalDevice: VkPhysicalDevice, pLayerName: *u8, pPropertyCount: *u32, pProperties: *VkExtensionProperties) VkResult #extern;
vkGetPhysicalDeviceSurfaceCapabilitiesKHR :: fn (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: *VkSurfaceCapabilitiesKHR) VkResult #extern;
vkGetPhysicalDeviceSurfaceFormatsKHR :: fn (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: *u32, pSurfaceFormats: *VkSurfaceFormatKHR) VkResult #extern;
vkGetPhysicalDeviceSurfacePresentModesKHR :: fn (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: *u32, pPresentModes: *VkPresentModeKHR) VkResult #extern;
vkCreateSwapchainKHR :: fn (device: VkDevice, pCreateInfo: *VkSwapchainCreateInfoKHR, pAllocator: *VkAllocationCallbacks, pSwapchain: *VkSwapchainKHR) VkResult #extern;
vkDestroySwapchainKHR :: fn (device: VkDevice,  swapchain: VkSwapchainKHR, pAllocator: *VkAllocationCallbacks) #extern;
vkGetSwapchainImagesKHR :: fn (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: *u32, pSwapchainImages: *VkImage) VkResult #extern;
vkCreateImageView :: fn (device: VkDevice, pCreateInfo: *VkImageViewCreateInfo, pAllocator: *VkAllocationCallbacks, pView: *VkImageView) VkResult #extern;
vkDestroyImageView :: fn (device: VkDevice, imageView: VkImageView, pAllocator: *VkAllocationCallbacks) #extern;
vkCreateShaderModule :: fn (device: VkDevice, pCreateInfo: *VkShaderModuleCreateInfo, pAllocator: *VkAllocationCallbacks, pShaderModule: *VkShaderModule) VkResult #extern;
vkDestroyShaderModule :: fn (device: VkDevice, shaderModule: VkShaderModule, pAllocator: *VkAllocationCallbacks) #extern;
vkCreatePipelineLayout :: fn (device: VkDevice, pCreateInfo: *VkPipelineLayoutCreateInfo, pAllocator: *VkAllocationCallbacks,pPipelineLayout: *VkPipelineLayout) VkResult #extern;
vkDestroyPipelineLayout :: fn (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *VkAllocationCallbacks) #extern;
vkCreateRenderPass :: fn (device: VkDevice, pCreateInfo: *VkRenderPassCreateInfo, pAllocator: *VkAllocationCallbacks, pRenderPass: *VkRenderPass) VkResult #extern;
vkDestroyRenderPass :: fn (device: VkDevice, renderPass: VkRenderPass, pAllocator: *VkAllocationCallbacks) #extern;
vkCreateGraphicsPipelines :: fn (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *VkGraphicsPipelineCreateInfo, pAllocator: *VkAllocationCallbacks, pPipelines: *VkPipeline) VkResult #extern;
vkDestroyPipeline :: fn (device: VkDevice, pipeline: VkPipeline, pAllocator: *VkAllocationCallbacks) #extern;
vkCreateFramebuffer :: fn (device: VkDevice, pCreateInfo: *VkFramebufferCreateInfo, pAllocator: *VkAllocationCallbacks, pFramebuffer: *VkFramebuffer) VkResult #extern; 
vkDestroyFramebuffer :: fn (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *VkAllocationCallbacks) #extern;
vkCreateCommandPool :: fn (device: VkDevice, pCreateInfo: *VkCommandPoolCreateInfo, pAllocator: *VkAllocationCallbacks, pCommandPool: *VkCommandPool) VkResult #extern;
vkDestroyCommandPool :: fn (device: VkDevice, commandPool: VkCommandPool, pAllocator: *VkAllocationCallbacks) #extern;
vkAllocateCommandBuffers :: fn (device: VkDevice, pAllocateInfo: *VkCommandBufferAllocateInfo, pCommandBuffers: *VkCommandBuffer) VkResult #extern;
vkBeginCommandBuffer :: fn (commandBuffer: VkCommandBuffer, pBeginInfo: *VkCommandBufferBeginInfo) VkResult #extern;
vkCmdBeginRenderPass :: fn (commandBuffer: VkCommandBuffer, pRenderPassBegin: *VkRenderPassBeginInfo, contents: VkSubpassContents) #extern;
vkCmdBindPipeline :: fn (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) #extern;
vkCmdDraw :: fn (commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) #extern;
vkCmdEndRenderPass :: fn (commandBuffer: VkCommandBuffer) #extern;
vkEndCommandBuffer :: fn (commandBuffer: VkCommandBuffer) VkResult #extern;
vkCreateSemaphore :: fn (device: VkDevice, pCreateInfo: *VkSemaphoreCreateInfo, pAllocator: *VkAllocationCallbacks, pSemaphore: *VkSemaphore) VkResult #extern;
vkDestroySemaphore:: fn (device: VkDevice, semaphore: VkSemaphore, pAllocator: *VkAllocationCallbacks) #extern;
vkAcquireNextImageKHR :: fn (device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: *u32) VkResult #extern;
vkQueueSubmit :: fn (queue: VkQueue, submitCount: u32, pSubmits: *VkSubmitInfo, fence: VkFence) VkResult #extern;
vkQueuePresentKHR :: fn (queue: VkQueue, pPresentInfo: *VkPresentInfoKHR) VkResult #extern;
vkDeviceWaitIdle :: fn (device: VkDevice) VkResult #extern;
vkCreateFence :: fn (device: VkDevice, pCreateInfo: *VkFenceCreateInfo, pAllocator: *VkAllocationCallbacks, pFence: *VkFence) VkResult #extern;
vkDestroyFence :: fn (device: VkDevice, fence: VkFence, pAllocator: *VkAllocationCallbacks) #extern;
vkResetFences :: fn (device: VkDevice, fenceCount: u32, pFences: *VkFence) VkResult #extern;
vkGetFenceStatus :: fn (device: VkDevice, fence: VkFence) VkResult #extern;
vkWaitForFences :: fn (device: VkDevice, fenceCount: u32, pFences: *VkFence, waitAll: VkBool32, timeout: u64) VkResult #extern;

VK_MAKE_VERSION :: fn (major: u32, minor: u32, patch: u32) u32 #inline {
    return ((major) << 22) | ((minor) << 12) | (patch);
};
