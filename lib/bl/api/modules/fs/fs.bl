//! ===========
//! File System
//! ===========
//! 
//! ::
//! 
//!    #import "std/fs"
//! 
//! File system module for manipulation with files and directories.
//! 
//! .. warning:: This module is experimental and not fully supported across all platforms.

/// File handle type.
FSFile :: _FSImplFile;
FS_FILE_INVALID :: _FS_IMPL_FILE_INVALID;

/// Specify operation with opened file.
FSFileOpenMode :: enum {
    /// Open file for reading.
    Read;
    /// Open file for writing.
    Write;
}

/// Specify kind of file system entry.
FSInfoKind :: enum {
    File;
    Directory;
}

/// Helper container to hold information about file system entry.
FSInfo :: struct {
    kind: FSInfoKind;
    name: string;
}

FSInfoList :: []FSInfo;

/// Check whether file or directory exists.
fs_exist :: fn (filepath: string) bool #inline {
    return _fs_impl_exist(filepath);
}

/// Open an existing file specified by `filepath`. Function return file handle and `OK` status
/// when file was openned, otherwise return invalid handle and proper error. File must be closed
/// by :ref:`fs_file_close` call.
///
/// File open `mode` is optional, any combination of :ref:`FSFileOpenMode` can be used. Default
/// `mode` for `Read` and `Write` is used when not specified.
///
/// Example
/// -------
/// .. literalinclude:: /examples/docs/004.bl
///    :language: bl
fs_file_open :: fn (filepath: string, mode: ...FSFileOpenMode) (FSFile, Error) #inline {
    return _fs_impl_file_open(filepath, mode);
}

/// Create new file specified by `filepath`. Function return handle and `OK` status when
/// file was created, otherwise return invalid handle and proper error. File must be closed
/// by :ref:`fs_file_close` call.
///
/// File open `mode` is optional, any combination of :ref:`FSFileOpenMode` can be used. Default
/// `mode` for `Read` and `Write` is used when not specified.
fs_file_create :: fn (filepath: string, mode: ...FSFileOpenMode) (FSFile, Error) #inline {
    return _fs_impl_file_create(filepath, mode);
}

/// Try to remove file specified by `filepath` and return `OK` on success, otherwise
/// return error.
fs_file_remove :: fn (filepath: string) Error #inline {
    return _fs_impl_file_remove(filepath);
}

/// Close previously openned file. Does nothing when `handle` is not valid.
fs_file_close :: fn (handle: FSFile) #inline {
    _fs_impl_file_close(handle);
}

/// Return file content size in bytes and `OK` status on success, otherwise
/// return zero and proper error.
fs_file_size :: fn (handle: FSFile) (usize, Error) #inline {
    return _fs_impl_file_size(handle);
}

/// Read whole file content into string. Return new string instance containting
/// file data and `OK` status on success, otherwise return empty string and error.
/// Returned string is expected to be released by :ref:`string_delete` call if
/// there was no error reported by function.
///
/// Example
/// -------
/// .. literalinclude:: /examples/docs/005.bl
///    :language: bl
fs_file_read_string :: fn (handle: FSFile) (string, Error) #inline {
    return _fs_impl_file_read_string(handle);
}

/// Read whole file content into slice array. Return new slice instance containting
/// file data and `OK` status on success, otherwise return empty slice and error.
/// Returned slice is expected to be released by :ref:`slice_terminatr` call if
/// there was no error reported by function.
fs_file_read_slice :: fn (handle: FSFile) ([]u8, Error) #inline {
    return _fs_impl_file_read_slice(handle);
}


/// Read `size` bytes from file into raw `dest` buffer. Return count of bytes
/// written into buffer and `OK` status when there was no error. `dest` buffer
/// must be allocated to handle at least `size` bytes. There is no overflow
/// check.
fs_file_read :: fn (handle: FSFile, dest: *u8, size: s64) (s64, Error) #inline {
    return _fs_impl_file_read(handle, dest, size);
}

/// Write `size` bytes from raw buffer `src` into the file. Return count of
/// bytes written into the buffer and `OK` on success, otherwise return error.
/// `src` buffer size must be at least `size` bytes. No overflow checking
/// is done.
fs_file_write :: fn (handle: FSFile, src: *u8, size: s64) (s64, Error) #inline {
    return _fs_impl_file_write(handle, src, size);
}

/// Write content of `str` into the file, return count of written bytes and `OK` if
/// there is no error, otherwise return 0 and error.
fs_file_write_string :: fn (handle: FSFile, str: string) (s64, Error) #inline {
    return _fs_impl_file_write_string(handle, str);
}

/// Write content of `v` slice into the file, return count of written bytes and `OK` if
/// there is no error, otherwise return 0 and error.
fs_file_write_slice :: fn (handle: FSFile, v: []u8) (s64, Error) #inline {
    return _fs_impl_file_write_slice(handle, v);
}

/// Create new directory and return `OK` on success. This function does not
/// create directories recursively.
fs_dir_create :: fn (dirpath: string) Error #inline {
    return _fs_impl_dir_create(dirpath);
}

/// Remove directory specified by `dirpath` and return `OK` on success,
/// otherwise return an error.
fs_dir_remove :: fn (dirpath: string) Error #inline {
    return _fs_impl_dir_remove(dirpath);
}

/// Remove non-empty directory specified by `dirpath` and return `OK` on success,
/// otherwise return an error.
///
/// .. note:: This function recursively remove all nested folders and files in specified
///           sub tree so it can be expensive.
fs_dir_remove_all :: fn (dirpath: string) Error #inline {
    return _fs_impl_dir_remove_all(dirpath);
}

/// Check whether `path` points to valid directory and return true with `OK` state,
/// otherwise return `false` and error.
fs_is_directory :: fn (path: string) (bool, Error) #inline {
    return _fs_impl_is_directory(path);
}

/// Type of `fs_dir_scan` filter function.
FSDirScanFilterFn :: *fn(info: *FSInfo) bool;

/// Scan `dirpath` directory and return list of information for every file system
/// entry found on success. Otherwise return empty list and error. Use :ref:`fs_info_list_terminate`
/// to release list when there was no error reported by this function.
///
/// Optional `filter` funtion :ref:`FSDirScanFilterFn` can be used to filter scan results
/// directly during scanning, it's called for every found entry and only those for
/// whose filter yealds true are added into the output list.
fs_dir_scan :: fn (dirpath: string, filter: FSDirScanFilterFn = null) (FSInfoList, Error) #inline {
    return _fs_impl_dir_scan(dirpath, filter);
}

/// Release allocated file system entry info list.
fs_info_list_terminate :: fn (list: FSInfoList) #inline {
    _fs_impl_info_list_terminate(list);
}

/// Checks whether `name` is valid file name on current platform.
fs_validate_filename :: fn (name: string) bool #inline {
    return _fs_impl_validate_filename(name);
}

/// Return current working directory, result must be released by
/// :ref:`string_delete`.
fs_cwd :: fn () string #inline {
    return _fs_impl_cwd();
}

/// Return home directory, result must be released by
/// :ref:`string_delete`.
fs_home :: fn () string #inline {
    return _fs_impl_home();
}

/// Return temporary directory, result must be released by
/// :ref:`string_delete`.
fs_tmp :: fn () string #inline {
    return _fs_impl_tmp();
}

/// Try to normalize file path, basically try to remove all relative path
/// nodes `..` and `.`. Path must be valid path (existing) on system.
fs_normalize :: fn (filepath: *string) bool #inline {
    return _fs_impl_normalize(filepath);
}

/// Remove file extension (token after first `.`) from the `filename` and
/// return the rest. Function does not create copy of original `filepath`.
fs_remove_extension :: fn (filename: string) string #inline {
    return _fs_impl_remove_extension(filename);
}

/// Get file extension (token after first `.`) from the `filename`.
/// Function does not create copy of original `filepath`.
/// The `.` separator is not included into result string.
fs_get_extension :: fn (filename: string) string #inline {
    return _fs_impl_get_extension(filename);
}