#load "interface.bl"

/// File handle type.
FSFile :: *u8;
FS_FILE_INVALID : FSFile : null;

_fs_impl_exist :: fn (filepath: string) bool #inline {
    if filepath.len == 0 { return false; }
    return _PathFileExistsA(auto filepath.ptr) > 0;
}

_fs_impl_file_open :: fn (filepath: string, mode: ...FSFileOpenMode) (FSFile, Error) {
    if string_is_empty(filepath) { return null, error(ERR_INVALID_HANDLE, "File path is empty!"); }
    access :: modes_to_flags(mode);
    handle :: _CreateFile(auto filepath.ptr, access, 0, null, _OPEN_EXISTING, _FILE_ATTRIBUTE_NORMAL, null);
    if handle == _INVALID_HANDLE_VALUE {
        ec, estr :: os_get_last_error();
        return null, error(ec, "Cannot open file '%': %.", filepath, estr);
    }
    return handle, ok();
}

_fs_impl_file_create :: fn (filepath: string, mode: ...FSFileOpenMode) (FSFile, Error) {
    if string_is_empty(filepath) { return null, error(ERR_INVALID_HANDLE, "File path is empty!"); }
    access :: modes_to_flags(mode);
    handle :: _CreateFile(auto filepath.ptr, access, 0, null, _CREATE_NEW, _FILE_ATTRIBUTE_NORMAL, null);
    if handle == _INVALID_HANDLE_VALUE {
        ec, estr :: os_get_last_error();
        return null, error(ec, "Cannot create file '%': %.", filepath, estr);
    }
    return handle, ok();
}

_fs_impl_file_remove :: fn (filepath: string) Error #inline {
    if string_is_empty(filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    tmp :: _DeleteFileA(auto filepath.ptr);
    if tmp == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove file '%': %.", filepath, estr);
    }
    return ok();
}

_fs_impl_file_close :: fn (handle: FSFile) #inline {
    if !handle { return; }
    _CloseHandle(handle);
}

_fs_impl_file_size :: fn (handle: FSFile) (usize, Error) #inline {
    size: _LARGE_INTEGER #noinit;
    if _GetFileSizeEx(auto handle, &size) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot get file size: %.", estr);
    }
    return auto size, ok();
}

_fs_impl_file_read_string :: fn (handle: FSFile) (string, Error) {
    size, err :: _fs_impl_file_size(handle);
    if !is_ok(err) {
        return string_empty, err;
    }
    buf := string_new(cast(usize) size);
    read, err2 :: _fn_impl_file_read(handle, buf.ptr, auto size);
    if !is_ok(err2) {
        string_delete(buf);
        return string_empty, err2;                
    }
    buf.len = auto read;
    return buf, ok();
}

_fs_impl_file_read_slice :: fn (handle: FSFile) ([]u8, Error) {
    invalid: []u8;
    size, err :: _fs_impl_file_size(handle);
    if !is_ok(err) {
        return invalid, err;
    }
    buf: []u8;
    slice_init(buf, auto size);
    read, err2 :: _fs_impl_file_read(handle, buf.ptr, auto size);
    if !is_ok(err2) {
        slice_terminate(buf);
        return invalid, err2;                
    }
    buf.len = read;
    return buf, ok();
}


_fs_impl_file_read :: fn (handle: FSFile, dest: *u8, size: s64) (s64, Error) {
    if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
    read_bytes: _DWORD #noinit;
    if _ReadFile(handle, dest, auto size, &read_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot read file: %", estr);
    }
    return auto read_bytes, ok();
}

_fs_impl_file_write :: fn (handle: FSFile, src: *u8, size: s64) (s64, Error) {
    if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
    written_bytes: _DWORD #noinit;
    if _WriteFile(handle, src, auto size, &written_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot write to file: %.", estr);
    }
    return auto written_bytes, ok();
}

_fs_impl_file_write_string :: fn (handle: FSFile, str: string) (s64, Error) #inline {
    written_bytes, err :: _file_write(handle, str.ptr, str.len);
    if !is_ok(err) { return 0, err; }
    return auto written_bytes, ok();    
}

_fs_impl_file_write_slice :: fn (handle: FSFile, v: []u8) (s64, Error) #inline {
    written_bytes, err :: _file_write(handle, v.ptr, v.len);
    if !is_ok(err) { return 0, err; }
    return auto written_bytes, ok();
}

_fs_impl_dir_create :: fn (dirpath: string) Error {
    if string_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot create directory, dirpath is empty."); }
    if _CreateDirectoryA(auto dirpath.ptr, null) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot create directory '%': %.", dirpath, estr);
    }
    return ok();
}

_fs_impl_dir_remove :: fn (dirpath: string) Error {
    if string_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot remove directory, dirpath is empty."); }
    if _RemoveDirectoryA(auto dirpath.ptr) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove directory '%': %.", dirpath, estr);
    }
    return ok();
}

_fs_impl_dir_remove_all :: fn (dirpath: string) Error {
    tmp :: string_new(cast(usize) dirpath.len);
    defer string_delete(tmp);
    list, err :: _fn_impl_dir_scan(dirpath, &fn (item: *FSInfo) bool {
        return string_compare(item.name, ".") == false && string_compare(item.name, "..") == false;
    });
    if !is_ok(err) { return err; }
    defer fs_info_list_terminate(list);
    loop i := 0; i < list.len; i += 1 {
        node :: &list[i];
        string_concatenate(&tmp, dirpath, "/", node.name);
        switch node.kind {
            FSInfoKind.Directory {
                err :: _fs_impl_dir_remove_all(tmp);
                if !is_ok(err) { return err; }
            }            
            FSInfoKind.File {
                err :: _fs_impl_file_remove(tmp);
                if !is_ok(err) { return err; }
            }
        }
        string_clear(&tmp);
    }
    return _dir_remove(dirpath);
}

_fs_impl_is_directory :: fn (path: string) (bool, Error) #inline {
    if string_is_empty(path) { return false, error(ERR_INVALID_HANDLE, "Path is empty."); }
    attributes :: _GetFileAttributesA(auto path.ptr);
    if attributes == _INVALID_FILE_ATTRIBUTES {
        ec, estr :: os_get_last_error();
        return false, error(ec, "Cannot check directory '%': %.", path, estr);
    }
    return is_flag_u32(attributes, auto _FILE_ATTRIBUTE_DIRECTORY), ok();
}

_fs_impl_dir_scan :: fn (dirpath: string, filter: FSDirScanFilterFn) (FSInfoList, Error) {
    invalid: FSInfoList;
    if dirpath.len > (_MAX_PATH-3) { return invalid, error("Path too long!"); }
    tmp := string_new(dirpath);
    defer string_delete(tmp);
    string_append(&tmp, "\\*");

    ffd: _FIND_DATA;
    h_find := _FindFirstFile(auto tmp.ptr, &ffd);
    if h_find == _INVALID_HANDLE_VALUE {
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }

    fc := 0;
    loop {
        fc += 1;
        if _FindNextFile(h_find, &ffd) == 0 { break; }
    }

    if _FindClose(h_find) == 0 {
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }
    buf: FSInfoList;
    slice_init(buf, fc);
    if fc == 0 { return buf, ok(); }

    h_find = _FindFirstFile(auto tmp.ptr, &ffd);
    if h_find == _INVALID_HANDLE_VALUE { 
        slice_terminate(buf);
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }
    defer _FindClose(h_find);

    buf.len = 0;
    loop {
        kind: FSInfoKind #noinit;
        name: string;
        if is_flag_u32(ffd.dwFileAttributes, auto _FILE_ATTRIBUTE_DIRECTORY) {
            kind = FSInfoKind.Directory;
            name = string_new(ffd.cFileName.ptr);
        } else {
            kind = FSInfoKind.File;
            name = string_new(ffd.cFileName.ptr);
        }
        push := true;
        info :: {:FSInfo: kind, name};
        if filter { push = filter(&info); }
        if push {
            buf.len += 1;
            buf[buf.len-1] = info;
        } else {
            string_delete(name);
        }
        if _FindNextFile(h_find, &ffd) == 0 { break; }
    }
    return buf, ok();
}

_fs_impl_info_list_terminate :: fn (list: FSInfoList) {
    loop i := 0; i < list.len; i += 1 {
        string_delete(list[i].name);
    }
    slice_terminate(list);
}

_fs_impl_validate_filename :: fn (name: string) bool {
    if name.len == 0 { return false; }
    invalid :: "<>:\"/\\|?*\t";
    loop i := 0; i < invalid.len; i += 1 {
        if string_count(name, invalid[i]) > 0 { return false; }
    }
    return true;
}

_fs_impl_cwd :: fn () string #inline {
    buf: [OS_PATH_MAX]u8;
    written :: _GetCurrentDirectoryA(auto buf.len, auto buf.ptr);
    if written == 0 { return string_new(); }
    out :: string_new(buf.ptr);
    string_replace_all(&out, '\\', '/');
    return out;
}

_fs_impl_home :: fn () string #inline {
    tmp :: "USERPROFILE";
    cdir :: cast(*u8) c_getenv(auto tmp.ptr);
    if !cdir { return string_new(); }
    return string_new(cdir);
}

_fs_impl_tmp :: fn () string #inline {
    buf: [OS_PATH_MAX]u8;
    written :: _GetTempPathA(auto buf.len, auto buf.ptr);
    if written == 0 { return string_new(); }
    out :: string_new(buf.ptr);
    string_replace_all(&out, '\\', '/');
    return out;
}

_fs_impl_normalize :: fn (filepath: *string) bool {
    buf : [OS_PATH_MAX]u8 #noinit;
    if _GetFullPathNameA(auto filepath.ptr, auto buf.len, buf.ptr, null) > 0 {
        if _PathFileExistsA(auto filepath.ptr) == 0 { return false; }
        string_clear(filepath);
        string_append(filepath, cstr_to_str(buf.ptr));
        string_replace_all(filepath, '\\', '/');
        return true;
    }
    return false;
}

_fs_impl_remove_extension :: fn (filename: string) string #inline {
    if string_is_empty(filename) { return string_empty; }
    tmp := filename;
    tmp.len = 0;
    loop i := 0; i < filename.len; i += 1 {
        c :: filename[i];
        if c == '.' && i > 0 { break; }
        tmp.len += 1;
    }
    return tmp;
}

_fs_impl_get_extension :: fn (filename: string) string #inline {
    if string_is_empty(filename) { return string_empty; }
    if filename[0] == '.' {
        if filename.len == 1 { return string_empty; }
        filename.len -= 1; filename.ptr = &filename[1]; 
    }
    rhs: string;
    if string_split_by_first(filename, '.', null, &rhs) {
        return rhs;
    }
    return string_empty;
}

#private
modes_to_flags :: fn (modes: []FSFileOpenMode) u32 #inline {
    if modes.len == 0 { return _GENERIC_READ | _GENERIC_WRITE; }
    flags: u32;
    loop i := 0; i < modes.len; i += 1 {
        switch modes[i] {
            FSFileOpenMode.Read    { flags = flags | _GENERIC_READ;  }            
            FSFileOpenMode.Write   { flags = flags | _GENERIC_WRITE; }
            default { panic(); }
        }
    }
    return flags;
}