//************************************************************************************************
// Adaonia 
//
// File:   string_stream.bl
// Author: Martin Dorazil
// Date:   1/25/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#import "std/fs"

END_OF_STREAM :: '\0';

StringStream :: struct {
    _data: string;
    i: s64;
}

ss_new :: fn () *StringStream {
    ss :: cast(*StringStream) alloc(sizeof(StringStream));
    ss_init(ss);
    return ss;
}

ss_new_from_file :: fn (file: fs.File) *StringStream {
    ss :: cast(*StringStream) alloc(sizeof(StringStream));
    ss_init_from_file(ss, file);
    return ss;
}

ss_delete :: fn (ss: *StringStream) {
    if !ss { return; }
    ss_terminate(ss);
    free(auto ss);
}

ss_init_from_file :: fn (ss: *StringStream, file: fs.File) {
    if file == fs.FILE_INVALID { panic(); }
    data :: fs.read_string(file);
    ss._data = data;
    ss.i = 0;
}

ss_init :: fn (ss: *StringStream) {
    ss._data = String.empty;
    ss.i = 0;
}

ss_terminate :: fn (ss: *StringStream) {
    String.delete(ss._data);
}

ss_write_to_file :: fn (ss: *StringStream, file: fs.File) usize {
    written :: fs.write_string(file, ss._data);
    return auto written;
}

ss_peek :: fn (ss: *StringStream) u8 {
    if ss.i >= ss._data.len { return END_OF_STREAM; }
    return ss._data[ss.i];
}

ss_get :: fn (ss: *StringStream) u8 {
    if ss.i >= ss._data.len { return END_OF_STREAM; }
    tmp :: ss._data[ss.i];
    ss.i += 1;
    return tmp;
}

ss_push :: fn (ss: *StringStream, v: Any) {
    if String.is_null(ss._data) { ss._data = String.new(); }
    String.append(&ss._data, v);
}

ss_rewind :: fn (ss: *StringStream) {
    ss.i = 0;
}
