// =================================================================================================
// bl
//
// File:   arena.bl
// Author: Martin Dorazil
// Date:   14/1/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================


/*
 * Description:
 *   Arena data container store elements of the same size in preallocated chunk.
 */

Arena :: struct {
    len: s64;
    chunk_elem_count: usize;
    top: *Chunk; 
    current: *Chunk; 
    T: *TypeInfo;
    elem_dtor: ArenaElemDtor;
}

ArenaElemDtor :: * fn (elem: *u8);

arena_new :: fn (T: Any, chunk_elem_count: usize, elem_dtor: ArenaElemDtor) *Arena {
    if T.type_info.kind != TypeKind.Type {
        panic("Arena expects type passed as T not '%'", T.type_info.kind);
    }

    if chunk_elem_count == 0 {
        panic("Arena invalid arena size.", T.type_info.kind);
    }

    arr := cast(*Arena) alloc(sizeof(Arena));
    arr.len = 0;
    arr.chunk_elem_count = chunk_elem_count;
    arr.top = null;
    arr.current = null;
    arr.elem_dtor = elem_dtor;
    arr.T = cast(*TypeInfo) T.data;

    return arr;
}

arena_delete :: fn (arr: *Arena) {
    free_chunks(arr);
    free(auto arr);
}

arena_push :: fn (arr: *Arena, v: Any) {
    if (v.type_info != arr.T) {
        panic("Invalid value type '%', expected is '%'.",
              @v.type_info,
              @arr.T);
    }

    if v.data == null {
        panic("Invalid value (null).");
    }

    arr.len += 1;
    if arr.current == null { add_chunk(arr); }
    if arr.current.count + 1 > arr.chunk_elem_count { add_chunk(arr); }

    arena := arr.current;
    assert(arena != null);

    dest_ptr := get_elem_ptr(arr, arena, arena.count);
    memcpy(dest_ptr, v.data, arr.T.size_bytes); 
    arena.count += 1;
}

arena_reset :: fn (arr: *Arena) {
    free_chunks(arr);
    arr.len = 0;
    arr.top = null;
    arr.current = null;
}

#private
Chunk :: struct {
    next: *Chunk;
    count: usize;
}

add_chunk :: fn (arr: *Arena) {
    size :: sizeof(Chunk) + arr.chunk_elem_count * arr.T.size_bytes;
    new_chunk := cast(*Chunk) alloc(size);
    new_chunk.next = null;
    new_chunk.count = 0;

    if arr.current == null {
        arr.top = new_chunk;
    } else {
        arr.current.next = new_chunk;
    }

    arr.current = new_chunk;
}

free_chunks :: fn (arr: *Arena) {
    if arr.top == null { return; }

    current := arr.top;
    loop current != null {
        if arr.elem_dtor != null {
            loop i : usize = 0; i < current.count; i += 1 {
                elem_ptr :: get_elem_ptr(arr, current, i);
                arr.elem_dtor(elem_ptr);
            }
        }
        
        next :: current.next; 
        free(auto current);

        current = next;
    }
}

get_elem_ptr :: fn (arr: *Arena, chunk: *Chunk, elem: usize) *u8 #inline {
    offset :: sizeof(Chunk) + arr.T.size_bytes * elem; 
    return ptr_shift_bytes(auto chunk, auto offset);
}
