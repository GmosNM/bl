//************************************************************************************************
// bl
//
// File:   _builtin.bl
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/memory.bl"
#load "std/debug.bl"
#load "std/utils.bl"

//! =======
//! Builtin
//! =======
//! 
//! Compiler builtins are automatically loaded into every assembly.

/// Describe supported platforms.
OSKind :: enum {
    Windows;
    Linux;
    MacOS;
}

/// TypeKind describes kind of BL type returned in TypeInfo structure. This value can be used for 
/// safe casting.
TypeKind :: enum #compiler {
    /// Base type of all types in type system.
    Type    :: 1;
    /// Void type. (Implicitly used for functions without return value)
    Void    :: 2;
    /// Any integer type: `s8`, `s16`, `s32`, `s64`, `u8`, `u16`, `u32`, `u64`, `usize`.
    Int     :: 3;
    /// Any real type: `f32`, `f64`.
    Real    :: 4;
    /// Function type. 
    Fn      :: 5;
    /// Pointer type. 
    Ptr     :: 6;
    /// Boolean type. 
    Bool    :: 7;
    /// Array type. 
    Array   :: 8;
    /// Structure type. 
    Struct  :: 9;
    /// Enumerator type. 
    Enum    :: 10;
    /// Null-value type. 
    Null    :: 11;
    /// String type. 
    String  :: 12;
    /// Function group type. 
    FnGroup :: 16;
};

/// Base `TypeInfo` structure returned by `typeinfo` operator. This structure pointer can be casted to 
/// child type to get more descriptive information about the type.
TypeInfo :: struct #compiler {
    /// Type info kind.
    kind: TypeKind;
    /// Size of type in bytes.
    size_bytes: usize
};

/// Detailed information about integer types: `s8`, `s16`, `s32`, `s64`, `u8`, `u16`, `u32`, `u64`, `usize`.
TypeInfoInt :: struct #base TypeInfo #compiler {
    /// Size of type in bits.
    bit_count: s32; 
    /// True when type is signed integer type.
    is_signed: bool;
};

/// Detailed information about real types: `f32`, `f64`.
TypeInfoReal :: struct #base TypeInfo  #compiler {
    /// Size of type in bits.
    bit_count: s32 
};

/// Detailed information about function types.
TypeInfoFn :: struct #base TypeInfo #compiler {
    /// Slice of argument type infos.
    args: []TypeInfoFnArg; 
    /// Return type info.
    ret_type: *TypeInfo;
    /// True when function has variable argument list.
    is_vargs: bool; 
};


/// Detailed information about function group and contained possible overloads.
TypeInfoFnGroup :: struct #base TypeInfo #compiler {
    /// Group content. 
    variants: []*TypeInfoFn; 
}

/// Detailed information about pointer types.
TypeInfoPtr :: struct #base TypeInfo #compiler {
    /// Underlaying pointed type info.
    pointee_type: *TypeInfo
};

/// Detailed information about array types.
TypeInfoArray :: struct #base TypeInfo #compiler {
    /// Array name.
    name: string;
    /// Array element type info.
    elem_type: *TypeInfo; 
    /// Array element count.
    len: s64 
};

/// Detailed information about structure types.
TypeInfoStruct :: struct #base TypeInfo #compiler {
    /// Structure type name.
    name: string; 
    /// Slice of structure member infos.
    members: []TypeInfoStructMember; 
    /// True when structure is slice.
    is_slice: bool;
    /// True when structure is union.
    is_union: bool;
    /// True when structure is dynamic array.
    is_dynamic_array: bool;

    // @CLEANUP: slice cannot be union, better way will be create separate type
    // kind for struct, slice and union, dynamic array could act like regular
    // array in type info.
};

/// Detailed information about enumerator types.
TypeInfoEnum :: struct #base TypeInfo #compiler {
    /// Enumerator type name.
    name: string;
    /// Base type info.
    base_type: *TypeInfo; 
    /// Slice of all enumerator variants.
    variants: []TypeInfoEnumVariant
};

/// Placeholer for information about `void` type.
TypeInfoVoid :: struct #base TypeInfo #compiler {
};

/// Placeholer for information about `null` type.
TypeInfoNull :: struct #base TypeInfo #compiler {
};

/// Placeholer for information about `string` type.
TypeInfoString :: struct #base TypeInfo #compiler {
};

/// Placeholer for information about `type` type.
TypeInfoType :: struct #base TypeInfo  #compiler {
};

/// Placeholer for information about `bool` type.
TypeInfoBool :: struct #base TypeInfo #compiler {
};

/// Detailed information about structure member.
TypeInfoStructMember :: struct #compiler {
    /// Member type name.
    name: string;
    /// Member type info.
    base_type: *TypeInfo;
    /// Byte-offset of member inside structure ABI.
    offset_bytes: s32;
    /// Order in structure.
    index: s32;
    /// User tags contains merge of all tag values assigned to member in structure declaration.
    /// Basically tags behave like a flags value, merge is done by binary `or` of all defined tag values.
    /// User tags can be defined by `#tags` hash directive written after member type in following way:
    /// 
    /// ::
    /// 
    ///       Foo :: struct {
    ///           i: s32 #tags TAG1;
    ///           j: s32 #tags TAG1, TAG2;
    ///       };
    /// 
    /// Where tags must be `compile-time` constant of `s32` type.
    /// 
    /// .. code-block:: text
    /// 
    ///       TAG1 :: 0x1;
    ///       TAG2 :: 0x2;
    /// 
    tags: s32;
    /// True when member is inherrited base of the parent structure type.
    is_base: bool;
};

/// Detailed information about enumerator variant.
TypeInfoEnumVariant :: struct #compiler {
    /// Member type name.
    name: string;
    /// Variant value.
    value: s64
};

/// Detailed information about function's argument.
TypeInfoFnArg :: struct #compiler {
    /// Member type name.
    name: string;
    /// Argument type info.
    base_type: *TypeInfo
};

/// Any type is special builtin type used for passing value of "any" type as function argument. 
Any :: struct #compiler {
    /// Type info associated to data type.
    type_info: *TypeInfo;
    /// Data pointer. (not owner!)
    data: *u8
};

/// Type of test case record found during compilation.
TestCase :: struct #compiler {
    /// Pointer to test case function.
    func: *fn();
    /// Name of the test case. 
    name: string;
}

/// Type of source code location used by `#call_location` directive.
///
/// Example
/// -------
/// .. literalinclude:: /examples/docs/002.bl
///    :language: bl
CodeLocation :: struct #compiler {
    /// Name of the source file.
    file: string;
    /// Line in source file. 
    line: s32;
}

/// Type of print log function.
/// 
/// Arguments
/// ---------
/// * `kind` Kind of report message. 
/// * `format` Format string. 
/// * `args` Additional arguments. 
/// * `file` Call side filename. 
/// * `line` Call side line in source file. 
PrintLogFn :: * fn (kind: PrintLogKind, file: string, line: s32, format: string, args: ...);

AbortFn :: * fn ();

/// Default implicit context type. Implicit context is compiler internal global variable 
/// containing basic context for whole assembly. This variable is mutable and can 
/// be modified by user code. 
Context :: struct {
    /// Pointer to memory allocator function. 
    alloc_fn: AllocFn;
    /// Pointer to log print function. 
    print_log_fn: PrintLogFn;
    /// Pointer to abort handler function. 
    abort_fn: AbortFn;
};

/// Default implicit context. Implicit context is compiler internal global variable 
/// containing basic context for whole assembly. This variable is mutable and can 
/// be modified by user code. For example we can replace default memory allocator
/// with custom one, this will affect all allocations made later.
_context := {:Context: 
                &_default_allocator, 
                &_print_log_default, 
                &_os_abort_default,
            };

/// Contains all arguments passed from command line. First argument is executable name.
command_line_arguments: []string;





