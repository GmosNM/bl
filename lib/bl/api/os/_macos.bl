//************************************************************************************************
// bl
//
// File:   posix.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "macos/macosapi.bl"
#load "macos/errno.bl"
#load "macos/dirent.bl"
#load "posix/unistd.bl"
#load "posix/signal.bl"
#load "posix/error.bl"
#load "std/error.bl"
#load "std/libc.bl"
#load "std/string.bl"

OS_KIND :: OSKind.MacOS;
OS_NAME :: "MacOS";

OS_STDIN  :: C_STDIN;
OS_STDOUT :: C_STDOUT;
OS_STDERR :: C_STDERR;

OS_PATH_MAX :: _DARWIN_MAXPATHLEN;
OSLibrary :: *u8;

/*
 * Platform depend C types compatible with C ABI.
 */
c_char      :: s8;
c_uchar     :: u8;
c_short     :: s16;
c_ushort    :: u16;
c_int       :: s32;
c_uint      :: u32;
c_long      :: s64;
c_ulong     :: u64;
c_longlong  :: s64;
c_ulonglong :: u64;
c_void_ptr  :: *u8;
c_size_t    :: u64;
c_ssize_t   :: s64;

os_sleep_ms :: fn (ms: f64) {
    _usleep(auto ms * 1000.0);
}

os_tick_ms :: fn () f64 #inline {
    t :: cast(f64) _mach_absolute_time();
    return t * 0.00001;
}

os_get_exec_path :: fn () string {
    buf : [_DARWIN_MAXPATHLEN]u8 #noinit;
    buf_len := cast(u32) buf.len;
    if _NSGetExecutablePath(auto buf.ptr, &buf_len) == -1 { return string_new(); }

    return string_new(buf.ptr);
}

os_dlopen :: fn (lib_name := string_empty) OSLibrary #inline {
    clib_name: *u8 = null;
    if lib_name.len > 0 { clib_name = lib_name.ptr; }

    return _posix_dlopen(clib_name, RTLD_LAZY); 
}

os_dlsym :: fn (lib: OSLibrary, sym_name: string) *u8 #inline {
    return _posix_dlsym(lib, sym_name.ptr);
}

os_dlclose :: fn (lib: OSLibrary) #inline {
    _posix_dlclose(lib);
}

os_execute :: fn (command: string) s32 {
    return WEXITSTATUS(c_system(auto command.ptr));
}

os_get_last_error :: fn () (s32, string) #inline {
    ec :: _errno();
    str := string_empty;
    c_str :: cast(*u8) c_strerror(ec);
    if c_str && ec != 0 { str = cstr_to_str(c_str); }
    return ec, str;
}

// CLEANUP: This must be in gl.bl file not here, but we keep it
// until static 'if' will be supported by compiler.
_os_gl_get_proc :: fn (proc_name: string) *u8 #inline {
    module :: os_dlopen("");
    return os_dlsym(module, proc_name);
}

_os_debug_break :: fn () #inline {
    //_posix_raise(SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return auto _write(auto fd, auto buf, count);
}

__os_abort :: fn () #compiler {
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        if IS_DEBUG { _os_debug_break(); }
        _os_abort_default();
    }
}

_os_abort_default :: fn () {
    _raise(_SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, env: **u8) #entry {
    args :: {:[]*u8: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string #noinit;
    is_allocated :: args.len > tmp.len;

    command_line_arguments.len = args.len;

    if is_allocated {
        command_line_arguments.ptr = auto _default_allocator(AllocOp.Allocate, sizeof(string) * auto args.len);
        if command_line_arguments.ptr == null { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }

    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string: auto c_strlen(auto args[i]), args[i]};
    }

    out :: cast(s32) main();

    if is_allocated {
        _default_allocator(AllocOp.Free, 0, auto command_line_arguments.ptr);
    }

    c_exit(out);
}

#private

RTLD_LAZY   :: 0x1;
RTLD_NOW    :: 0x2;
RTLD_LOCAL  :: 0x4;
RTLD_GLOBAL :: 0x8;

WEXITSTATUS :: fn (x: s32) s32 #inline {
    return (x >> 8) & 0x000000ff;
}

_posix_dlopen    :: fn (path: *u8, mode: s32) *u8 #extern "dlopen";
_posix_dlclose   :: fn (handle: *u8) s32 #extern "dlclose";
_posix_dlsym     :: fn (handle: *u8, symbol: *u8) *u8 #extern "dlsym";

