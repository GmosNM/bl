// =================================================================================================
// bl
//
// File:   posix.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "libc"
#import "os/macos"
#import "std/string"

#load "std/error.bl"

OS_NAME :: "MacOS";

OS_STDIN  :: C.STDIN;
OS_STDOUT :: C.STDOUT;
OS_STDERR :: C.STDERR;

OS_PATH_MAX :: C.DARWIN_MAXPATHLEN;

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: C.ENOENT;
ERR_ALREADY_EXIST  :: C.EEXIST;
ERR_ACCESS_DENIED  :: C.EACCES;
ERR_INVALID_HANDLE :: C.EBADF;
ERR_DIRECTORY      :: C.EISDIR;

os_sleep_ms :: fn (ms: f64) {
    C.usleep(auto ms * 1000.0);
}

os_tick_ms :: fn () f64 #inline {
    convfact: macos.MachTimebaseInfo;
    if macos.mach_timebase_info(&convfact) != 0 {
        tick :: macos.mach_absolute_time();
        return cast(f64)((tick * convfact.numer) / (convfact.denom * 1000000));
    } else {
        tv: C.timeval;
        C.gettimeofday(&tv, null);
        s :: cast(f64) tv.tv_sec;
        u :: cast(f64) tv.tv_usec;
        return (s * 1000.0) + (u / 1000.0); 
    }
}

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8 #noinit;
    buf_len := cast(u32) buf.len;
    if macos.NSGetExecutablePath(auto buf.ptr, &buf_len) == -1 { return std.str_new(); }

    return std.str_new(buf.ptr);
}

os_execute :: fn (command: string_view) s32 {
    return WEXITSTATUS(C.system(std.strtoc(command)));
}

os_get_last_error :: fn () (s32, string_view) #inline {
    ec :: C.errno();
    str := std.str_view_empty;
    if ec != 0 { str = std.ctostr(C.strerror(ec)); }
    return ec, str;
}

__os_debug_break :: fn () #inline #compiler {
    // @Incomplete: I'm not sure what to do here.
    //_posix_raise(SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return auto C.write(auto fd, auto buf, count);
}

__os_abort :: fn () #compiler {
    #if IS_DEBUG { __os_debug_break(); }
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        __os_abort_default();
    }
}

__os_abort_default :: fn () {
    C.raise(C.SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, _: **u8) #entry {
    args :: {:[]*u8: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string_view #noinit;
    is_allocated :: args.len > tmp.len;

    command_line_arguments.len = args.len;

    if is_allocated {
        command_line_arguments.ptr = auto C.malloc(sizeof(string_view) * auto args.len);
        if command_line_arguments.ptr == null { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }

    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string_view: auto C.strlen(auto args[i]), args[i]};
    }

    out :: cast(s32) main();

    if is_allocated {
        C.free(auto command_line_arguments.ptr);
    }

    C.exit(out);
}

#private
WEXITSTATUS :: fn (x: s32) s32 #inline {
    return (x >> 8) & 0x000000ff;
}

