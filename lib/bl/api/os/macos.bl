//************************************************************************************************
// bl
//
// File:   posix.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/string.bl"
#load "macos_api.bl"

OS_KIND :: OSKind.MacOS;
OS_NAME :: "MacOS";

OS_STDIN  :: 0;
OS_STDOUT :: 1;
OS_STDERR :: 2;

/*
 * Platform depend C types compatible with C ABI.
 */
c_char      :: s8;
c_uchar     :: u8;
c_short     :: s16;
c_ushort    :: u16;
c_int       :: s32;
c_uint      :: u32;
c_long      :: s64;
c_ulong     :: u64;
c_longlong  :: s64;
c_ulonglong :: u64;
c_void_ptr  :: *u8;
c_size_t    :: u64;

OS_PATH_MAX :: DARWIN_MAXPATHLEN;
OS_PATH_DELIMITER_C :: '/';
OS_PATH_DELIMITER_STR :: "/";

OSLibrary :: *u8;

OSThread :: _PosixThread;
OSMutex :: _PosixMutex;
OSThreadEntryFn :: *fn (args: []Any);

os_thread_create :: fn (entry: OSThreadEntryFn, args: ...) OSThread {
    t: OSThread #noinit;

    tmp: *_ThreadArgs = auto alloc(sizeof(_ThreadArgs));
    tmp.entry = entry;
    tmp.args = {:[]Any: args.len, args.ptr};

    status :: _posix_thread_create(&t, null, &_thread_entry, auto tmp);
    if status != 0 {
        panic("Cannot create thread!");
    }

    return t;
}

os_thread_join :: fn (thread: OSThread) {
    status :: _posix_thread_join(thread, null);
    if status != 0 {
        panic("Cannot join thread!");
    }
}

os_thread_current :: fn () OSThread #inline {
    return _posix_thread_self();
}

os_thread_kill :: fn (thread: OSThread, exit_code: s32 = 0) bool #inline {
    return _posix_thread_kill(thread, auto exit_code) == 0;
    // @INCOMPLETE: handle errors
}

os_mutex_init :: fn (mutex: *OSMutex) #inline {
    _posix_thread_mutex_init(mutex, null);
    // @INCOMPLETE: handle errors
}

os_mutex_terminate :: fn (mutex: *OSMutex) #inline {
    _posix_thread_mutex_destroy(mutex);
    // @INCOMPLETE: handle errors
}

os_mutex_lock :: fn (mutex: *OSMutex) #inline {
    _posix_thread_mutex_lock(mutex);
    // @INCOMPLETE: handle errors
}

os_mutex_trylock :: fn (mutex: *OSMutex) bool #inline {
    if _posix_thread_mutex_trylock(mutex) != 0 {
        return false;
    }

    // INCOMPLETE: handle errors
    // INCOMPLETE: handle errors
    // INCOMPLETE: handle errors
    return true;
}

os_mutex_unlock :: fn (mutex: *OSMutex) #inline {
    _posix_thread_mutex_unlock(mutex);
    // INCOMPLETE: handle errors
    // INCOMPLETE: handle errors
    // INCOMPLETE: handle errors
}

os_sleep_ms :: fn (ms: f64) #inline {
    _posix_usleep(auto ms * 1000.0);
};

os_tick_ms :: fn () f64 #inline {
    t :: cast(f64) macOS_mach_absolute_time();
    return t * 0.00001;
}

os_normalize_path :: fn (filepath: *string) bool {
    tmp: [OS_PATH_MAX]u8 #noinit;
    if _posix_realpath(filepath.ptr, &tmp[0]) != null {
        string_clear(filepath);
        string_append(filepath, cstr_to_str(tmp.ptr));
        return true;
    } 
    return false;
}

os_get_real_path :: fn (filename: string) string {
    tmp: [OS_PATH_MAX]u8 #noinit;
    if _posix_realpath(filename.ptr, &tmp[0]) != null {
        return string_new(tmp.ptr);
    } 

    return string_new(filename);
}

os_get_exec_path :: fn () string {
    buf : [DARWIN_MAXPATHLEN]u8 #noinit;
    buf_len := cast(u32) buf.len;
    if macOS_NSGetExecutablePath(auto buf.ptr, &buf_len) == -1 { return string_new(); }

    return string_new(buf.ptr);
}

os_get_home_path :: fn () string {
    tmp :: "HOME";
    cdir :: _posix_getenv(tmp.ptr);
    if !cdir { return string_new(); }
    return string_new(cdir);
}

os_dlopen :: fn (lib_name := string_empty) OSLibrary #inline {
    clib_name: *u8 = null;
    if lib_name.len > 0 { clib_name = lib_name.ptr; }

    return _posix_dlopen(clib_name, RTLD_LAZY); 
}

os_dlsym :: fn (lib: OSLibrary, sym_name: string) *u8 #inline {
    return _posix_dlsym(lib, sym_name.ptr);
}

os_dlclose :: fn (lib: OSLibrary) #inline {
    _posix_dlclose(lib);
}

os_execute :: fn (command: string) s32 {
    return _posix_system(auto command.ptr);
}

// CLEANUP: This must be in gl.bl file not here, but we keep it
// until static 'if' will be supported by compiler.
_os_gl_get_proc :: fn (proc_name: string) *u8 #inline {
    module :: os_dlopen("");
    return os_dlsym(module, proc_name);
}

_OSFileKind :: enum {
    File;
    Directory;
}

_OSFileInfo :: struct {
    kind: _OSFileKind;
    name: string;
}

_OSFileList :: []_OSFileInfo;

_os_is_dir :: fn (dirpath: string) bool {
    if dirpath.len > DARWIN_MAXPATHLEN { panic("Path too long!"); }
    dir := _posix_opendir(dirpath.ptr);
    if dir == null { return false; }
    defer _posix_closedir(dir);
    info :: _posix_readdir(dir);
    if info == null { return false; }
    return info.d_type == auto DT_DIR;
}

_os_scandir :: fn (dirpath: string, out_buf: *_OSFileList) bool {
    if dirpath.len > DARWIN_MAXPATHLEN { panic("Path too long!"); }
    dir := _posix_opendir(dirpath.ptr);
    if dir == null { return false; }
    defer _posix_closedir(dir);

    fc := 0;
    loop _posix_readdir(dir) != null { fc += 1; }
    _posix_rewinddir(dir);

    (^out_buf).len = fc;
    if fc == 0 { return true; }

    (^out_buf).ptr = auto alloc(sizeof(_OSFileInfo) * auto fc);

    i := 0;
    loop {
        info :: _posix_readdir(dir);
        if info == null { break; }

        kind: _OSFileKind;
        name: string;

        if info.d_type == auto DT_DIR {
            kind = _OSFileKind.Directory;
            name = string_new(cast(*u8) info.d_name.ptr);
        } else {
            kind = _OSFileKind.File;
            name = string_new(cast(*u8) info.d_name.ptr);
        }

        (^out_buf)[i] = {:_OSFileInfo: kind, name};
        i += 1;
    }

    return true;
}

_os_debug_break :: fn () #inline {
    //_posix_raise(SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 #inline {
    return _posix_write(fd, buf, count);
};

__os_abort :: fn () #compiler {
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        if IS_DEBUG { _os_debug_break(); }
        _os_abort_default();
    }
}

_os_abort_default :: fn () {
    _posix_raise(SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, env: **u8) #entry {
    args :: {:[]*u8: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string #noinit;
    is_allocated :: args.len > tmp.len;

    command_line_arguments.len = args.len;

    if is_allocated {
        command_line_arguments.ptr = auto _default_allocator(AllocOp.Allocate, sizeof(string) * auto args.len);
        if command_line_arguments.ptr == null { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }

    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string: auto c_strlen(auto args[i]), args[i]};
    }

    out :: cast(s32) main();

    if is_allocated {
        _default_allocator(AllocOp.Free, 0, auto command_line_arguments.ptr);
    }

    _posix_exit(out);
}

#private

SIGHUP  :: 1;
SIGINT  :: 2;
SIGQUIT :: 3; 
SIGILL  :: 4; 
SIGTRAP :: 5;
SIGABRT :: 6;

RTLD_LAZY   :: 0x1;
RTLD_NOW    :: 0x2;
RTLD_LOCAL  :: 0x4;
RTLD_GLOBAL :: 0x8;

DT_UNKNOWN ::  0;
DT_FIFO    ::  1;
DT_CHR     ::  2;
DT_DIR     ::  4;
DT_BLK     ::  6;
DT_REG     ::  8;
DT_LNK     :: 10;
DT_SOCK    :: 12;
DT_WHT     :: 14;

DARWIN_MAXPATHLEN :: 1024;

dirent :: struct {
    d_ino: c_ulonglong; 
    d_seekoff: c_ulonglong;
    d_reclen: c_ushort;
    d_namlen: c_ushort;
    d_type: c_uchar; 
    d_name: [DARWIN_MAXPATHLEN]c_char;
}

_posix_raise     :: fn (sig: s32) s32 #extern "raise";
_posix_write     :: fn (fd: s32, buf: *u8, count: usize) s32 #extern "write";
_posix_usleep    :: fn (us: u32) s32 #extern "usleep";
_posix_realpath  :: fn (path: *u8, resolved_path: *u8) *u8 #extern "realpath$DARWIN_EXTSN";
_posix_exit      :: fn (v: s32) #extern "_exit";
_posix_dlopen    :: fn (path: *u8, mode: s32) *u8 #extern "dlopen";
_posix_dlclose   :: fn (handle: *u8) s32 #extern "dlclose";
_posix_dlsym     :: fn (handle: *u8, symbol: *u8) *u8 #extern "dlsym";
_posix_opendir   :: fn (name: *u8) *u8 #extern "opendir";
_posix_closedir  :: fn (dirp: *u8) s32 #extern "closedir";
_posix_readdir   :: fn (dirp: *u8) *dirent #extern "readdir$INODE64";
_posix_rewinddir :: fn (dirp: *u8) #extern "rewinddir$INODE64";
_posix_system    :: fn (command: *c_char) c_int #extern "system";
_posix_getenv    :: fn (name: *u8) *u8 #extern "getenv";

// Threading
_PosixThread :: c_void_ptr;
_PosixThreadFn :: *fn (args: c_void_ptr);

_ThreadArgs :: struct {
    entry: OSThreadEntryFn;
    args: []Any; 
}

_thread_entry :: fn (_args: *u8) {
    tmp :: cast(*_ThreadArgs) _args;
    defer free(auto tmp);
    tmp.entry(tmp.args);
    _posix_thread_exit(null);
}

// This is platform depend!!!
__POSIX_THREAD_MUTEX_SIZE__ :: 56;
_PosixMutex :: struct { 
    __sig: c_long;
    __opaque: [__POSIX_THREAD_MUTEX_SIZE__]c_char;
}

_posix_thread_create :: fn (thread: *_PosixThread, attr: c_void_ptr, start_routine: _PosixThreadFn, args: c_void_ptr) c_int #extern "pthread_create";
_posix_thread_join :: fn (thread: _PosixThread, retval: *c_void_ptr) c_int #extern "pthread_join";
_posix_thread_exit :: fn (retval: c_void_ptr) #extern "pthread_exit";
_posix_thread_self :: fn () _PosixThread #extern "pthread_self";
_posix_thread_kill :: fn (thread: _PosixThread, sig: s32) s32 #extern "pthread_kill";
_posix_thread_mutex_lock :: fn (mutex: *_PosixMutex) c_int #extern "pthread_mutex_lock";
_posix_thread_mutex_trylock :: fn (mutex: *_PosixMutex) c_int #extern "pthread_mutex_trylock";
_posix_thread_mutex_unlock :: fn (mutex: *_PosixMutex) c_int #extern "pthread_mutex_unlock"; 
_posix_thread_mutex_init :: fn (mutex: *_PosixMutex, attr: c_void_ptr) c_int #extern "pthread_mutex_init";
_posix_thread_mutex_destroy :: fn (mutex: *_PosixMutex) c_int #extern "pthread_mutex_destroy";
