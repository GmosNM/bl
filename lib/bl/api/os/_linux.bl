// =================================================================================================
// bl
//
// File:   linux.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "std/string"

#load "linux/errno.bl"
#load "posix/signal.bl"
#load "posix/error.bl"
#load "posix/unistd.bl"
#load "posix/libc.bl"
#load "std/error.bl"

OS_NAME :: "Linux";

OS_STDIN  :: C_STDIN;
OS_STDOUT :: C_STDOUT;
OS_STDERR :: C_STDERR;

OS_PATH_MAX :: 1024;
OSLibrary :: *u8;

c_char      :: s8;
c_uchar     :: u8;
c_short     :: s16;
c_ushort    :: u16;
c_int       :: s32;
c_uint      :: u32;
c_long      :: s64;
c_ulong     :: u64;
c_longlong  :: s64;
c_ulonglong :: u64;
c_void_ptr  :: *u8;
c_size_t    :: u64;
c_ssize_t   :: s64;

os_sleep_ms :: fn (ms: f64) {
    _usleep(auto ms * 1000.0);
};

os_tick_ms :: fn () f64 #inline {
    t: _posix_timespec;
    _posix_clock_gettime(CLOCK_REALTIME, &t);
    s :: cast(f64) t.tv_sec;
    n :: cast(f64) t.tv_nsec;
    return (s*1000.) + (n/1000000.);
}

os_execute :: fn (command: string) s32 {
    return WEXITSTATUS(c_system(auto command.ptr));
}

os_get_last_error :: fn () (s32, string) #inline {
    ec :: _errno();
    str := String.empty;
    c_str :: cast(*u8) c_strerror(ec);
    if c_str && ec != 0 { str = cstr_to_str(c_str); }
    return ec, str;
}

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8;
    buf_len := cast(c_size_t) buf.len;
    link :: "/proc/self/exe";
    if _readlink(auto link.ptr, auto buf.ptr, buf_len) == -1 {
        return String.new(); 
    }
    return String.new(buf.ptr);
}

_os_debug_break :: fn () #inline {
    //_raise(_SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return auto _write(auto fd, auto buf, count);
};

__os_abort :: fn () #compiler {
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        if IS_DEBUG { _os_debug_break(); }
        _os_abort_default();
    }
}

_os_abort_default :: fn () {
    _raise(_SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, env: **u8) s32 #entry {
    args :: {:[]*u8: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string #noinit;
    is_allocated :: args.len > tmp.len;
    command_line_arguments.len = args.len;
    if is_allocated {
        command_line_arguments.ptr = auto c_malloc(sizeof(string) * auto args.len);
        if !command_line_arguments.ptr { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }
    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string: auto c_strlen(auto args[i]), args[i]};
    }
    out :: cast(s32) main();
    if is_allocated {
        c_free(auto command_line_arguments.ptr);
    }
    return out;
}

#private
CLOCK_REALTIME :: 0;

WEXITSTATUS :: fn (x: s32) s32 #inline {
    return (x >> 8) & 0x000000ff;
}

_posix_clockid_t :: c_int;
_posix_time_t    :: c_long;

_posix_timespec :: struct {
    tv_sec: _posix_time_t;
    tv_nsec: c_long;
}

_posix_clock_gettime :: fn (clk_id: _posix_clockid_t, tp: *_posix_timespec) c_int #extern "clock_gettime";
