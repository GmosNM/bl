// =================================================================================================
// bl
//
// File:   linux.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "libc"
#import "std/string"

#load "std/error.bl"

OsStdIoStream :: struct #base std.Stream {
    handle: C.int;
}

OS_NAME :: "Linux";

OS_PATH_MAX :: 1024;

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: C.ENOENT;
ERR_ALREADY_EXIST  :: C.EEXIST;
ERR_ACCESS_DENIED  :: C.EACCES;
ERR_INVALID_HANDLE :: C.EBADF;
ERR_DIRECTORY      :: C.EISDIR;

os_stdin :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_in;
}

os_stdout :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_out;
}

os_stderr :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_err;
}

os_sleep_ms :: fn (ms: u32) {
    C.usleep(ms * 1000);
};

os_tick_ms :: fn () f64 #inline {
    t: _posix_timespec;
    _posix_clock_gettime(CLOCK_REALTIME, &t);
    s :: cast(f64) t.tv_sec;
    n :: cast(f64) t.tv_nsec;
    return (s*1000.) + (n/1000000.);
}

os_execute :: fn (command: string_view) s32 {
    return WEXITSTATUS(C.system(std.strtoc(command)));
}

os_get_last_error :: fn () (s32, string_view) #inline {
    ec :: C.errno();
    str := std.str_view_empty;
    if ec != 0 { str = std.ctostr(C.strerror(ec)); }
    return ec, str;
}

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8;
    buf_len := cast(C.size_t) buf.len;
    link :: "/proc/self/exe";
    if C.readlink(auto link.ptr, auto buf.ptr, buf_len) == -1 {
        return std.str_new(); 
    }
    return std.str_new(buf.ptr);
}

__os_debug_break :: fn () #inline #compiler {
    // @Incomplete: I'm not sure what to do here.
    //_raise(_SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return auto C.write(auto fd, auto buf, count);
};

__os_abort :: fn () #compiler {
    #if IS_DEBUG { __os_debug_break(); }
    if application_context.abort_fn {
        application_context.abort_fn();
    } else {
        __os_abort_default();
    }
}

__os_abort_default :: fn () {
    C.raise(C.SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, _: **u8) s32 #entry {
    args :: []*u8.{argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string_view #noinit;
    is_allocated :: args.len > tmp.len;
    command_line_arguments.len = args.len;
    if is_allocated {
        command_line_arguments.ptr = auto C.malloc(sizeof(string_view) * auto args.len);
        if !command_line_arguments.ptr { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }
    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = string_view.{auto C.strlen(auto args[i]), args[i]};
    }
    if !_std_io_initialized { init_std_io(); }
    out :: cast(s32) main();
    if is_allocated {
        C.free(auto command_line_arguments.ptr);
    }
    if _std_io_initialized {
        terminate_std_io();
    }
    return out;
}

#private

STD_IN_STREAM_VTABLE :: std.StreamVTable.{
    read = auto &std_io_read
};

STD_OUT_STREAM_VTABLE :: std.StreamVTable.{
    write = auto &std_io_write,
    flush = auto &std_io_flush
};


_std_io_initialized := false;
_std_in  := OsStdIoStream.{ std.Stream.{ vtable = &STD_IN_STREAM_VTABLE }  };
_std_out := OsStdIoStream.{ std.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };
_std_err := OsStdIoStream.{ std.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };

init_std_io :: fn () {
    assert(!_std_io_initialized);
    mode_r :: "r";
    mode_w :: "w";
    _std_in.handle = C.fdopen(C.STDIN, auto mode_r.ptr);
    _std_out.handle = C.fdopen(C.STDOUT, auto mode_w.ptr);
    _std_err.handle = C.fdopen(C.STDERR, auto mode_w.ptr);
    _std_io_initialized = true;
}

terminate_std_io :: fn () {
    assert(_std_io_initialized);
    C.fclose(_std_in.handle);
    C.fclose(_std_out.handle);
    C.fclose(_std_err.handle);
    _std_io_initialized = false;
}

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_write :: fn (stream: *OsStdIoStream, src: *u8, size: s64) (s64, Error) {
    if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot write into standart output, the stream is closed."); }
    if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
    written_bytes :: C.write(auto stream.handle, auto src, auto bytes_to_write);
    if written_bytes < 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot write to file: %.", estr);
    }
    return auto written_bytes, OK;
}

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_read :: fn (stream: *OsStdIoStream, dest: *u8, size: s64) (s64, Error) {
    if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot read from standart output, the stream is closed."); }
    if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
    read_bytes :: C.read(auto stream.handle, auto dest, auto bytes_to_read);
    if read_bytes < 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot read file: %", estr);
    }
    return auto read_bytes, OK;
}

std_io_flush :: fn (stream: *OsStdIoStream) Error {
    if !stream.handle { return error(ERR_INVALID_HANDLE, "Cannot flush, the stream is closed."); }
    if C.fflush(stream.handle) != 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot flush: %", estr);
    }
    return OK;
}

// @Cleanup: move to the libc???
CLOCK_REALTIME :: 0;

WEXITSTATUS :: fn (x: s32) s32 #inline {
    return (x >> 8) & 0x000000ff;
}

_posix_clockid_t :: C.int;
_posix_time_t    :: C.long;

_posix_timespec :: struct {
    tv_sec: _posix_time_t;
    tv_nsec: C.long;
}

_posix_clock_gettime :: fn (clk_id: _posix_clockid_t, tp: *_posix_timespec) C.int #extern "clock_gettime";
