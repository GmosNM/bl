// =================================================================================================
// bl
//
// File:   windows.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "std/string"
#load "windows/winapi.bl"
#load "windows/io.bl"
#load "windows/libc.bl"
#load "posix/signal.bl"
#load "std/error.bl"

OS_KIND :: OSKind.Windows;
OS_NAME :: "Windows";

OS_STDIN  :: C_STDIN;
OS_STDOUT :: C_STDOUT;
OS_STDERR :: C_STDERR;

c_char      :: s8;
c_uchar     :: u8;
c_short     :: s16;
c_ushort    :: u16;
c_int       :: s32;
c_uint      :: u32;
c_long      :: s32;
c_ulong     :: u32;
c_longlong  :: s64;
c_ulonglong :: u64;
c_void_ptr  :: *u8;
c_size_t    :: u64;
c_ssize_t   :: s64;

OS_PATH_MAX :: Win32.MAX_PATH;

os_sleep_ms :: fn (ms: f64) #inline {
    Win32.Sleep(auto ms);
};

os_tick_ms :: fn () f64 #inline {
    f: Win32.LARGE_INTEGER #noinit;
    t: Win32.LARGE_INTEGER #noinit;

    if Win32.QueryPerformanceFrequency(&f) == 0 { return 0.; }
    if Win32.QueryPerformanceCounter(&t) == 0 { return 0.; }
    return (cast(f64) t / cast(f64) f) * 1000.;
};

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8 #noinit;
    if Win32.GetModuleFileNameA(null, buf.ptr, auto buf.len) > 0 {
        result :: String.new(buf.ptr);
        String.replace_all(&result, '\\', '/');
        return result;
    }

    return String.new(); 
}

os_execute :: fn (command: string) s32 {
    return c_system(auto command.ptr);
}

os_get_last_error :: fn () (s32, string) #inline {
    ec :: cast(s32) Win32.GetLastError();
    if ec == 0 { return 0, "No error."; }

    msg_len :: Win32.FormatMessageA(
        Win32.FORMAT_MESSAGE_FROM_SYSTEM | Win32.FORMAT_MESSAGE_IGNORE_INSERTS | Win32.FORMAT_MESSAGE_MAX_WIDTH_MASK,
        null,
        auto ec,
        0,
        _last_error_msg_buffer.ptr,
        auto _last_error_msg_buffer.len,
        null);

    if msg_len == 0 { return ec, "Unknown error."; }
    str :: {:string: auto msg_len, _last_error_msg_buffer.ptr };
    return ec, str;
}

_os_debug_break :: fn () #inline {
    if Win32.IsDebuggerPresent() != 0 {
        Win32.DebugBreak();
    }
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s64 {
    return _write(fd, auto buf, count);
};

__os_abort :: fn () #compiler {
    if IS_DEBUG { _os_debug_break(); }
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        _os_abort_default();
    }
}

_os_abort_default :: fn () {
    _raise(_SIGABRT);
}

__os_start :: fn () #entry {
    /*
    * Get command-line arguments passed to this executable.
    * We need custom function here to convert UTF16 to UTF8,
    * Windows api does not provide UTF8 version of CommandLineToArgv
    * function.
    * Internal allocation to handle argument strings is done
    * in this method, so we must free memory used by return value
    * by free(args.ptr) call.
    */
    get_command_line_args :: fn (out_args: *[]string) #no_inline {
        wargs: []*u16;
        cmd_line :: Win32.GetCommandLineW();
        wargs.ptr = Win32.CommandLineToArgvW(cmd_line, auto &wargs.len);
        defer Win32.LocalFree(auto wargs.ptr);

        // Determinate size needed for all argument strings listed in one array including
        // zero terminator for each one.
        tmp_size : usize = 0;
        result_size: usize = sizeof(string) * auto wargs.len;

        loop i := 0; i < wargs.len; i += 1 {
            tmp_size += auto Win32.WideCharToMultiByte(Win32.CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
        }

        buffer :: _default_allocator(AllocOp.Allocate, result_size + tmp_size); 
        if buffer == null { __os_abort(); }

        out_args.len = wargs.len;
        out_args.ptr = auto buffer; 
        tmp := {:[]u8: auto tmp_size, ptr_shift_bytes(buffer, auto result_size)};

        tmp_i := 0;
        loop i := 0; i < wargs.len; i += 1 {
            len :: Win32.WideCharToMultiByte(Win32.CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
            Win32.WideCharToMultiByte(Win32.CP_UTF8, null, wargs[i], auto c_wcslen(wargs[i]), &tmp[tmp_i], len, null, null); 

            (^out_args)[i].len = len - 1;
            (^out_args)[i].ptr = &tmp[tmp_i];
            tmp_i += len;
            tmp[tmp_i-1] = '\0';
        }
    };

    args: []string;
    get_command_line_args(&args);

    command_line_arguments.len = args.len;
    command_line_arguments.ptr = args.ptr;

    out :: cast(s32) main();
    _default_allocator(AllocOp.Free, 0, auto args.ptr); 
    c_exit(out);
}

#private
_last_error_msg_buffer: [256]u8 #thread_local;