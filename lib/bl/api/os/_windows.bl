// =================================================================================================
// bl
//
// File:   windows.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "libc"
#import "os/windows"
#import "std/string"
#import "std/io"

#load "std/error.bl"

OsStdIoStream :: struct #base std.Stream {
    handle: win32.HANDLE;
}

OS_NAME :: "Windows";

OS_PATH_MAX :: win32.MAX_PATH;

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: win32.ERROR_FILE_NOT_FOUND;
ERR_ALREADY_EXIST  :: win32.ERROR_FILE_EXISTS;
ERR_ACCESS_DENIED  :: win32.ERROR_ACCESS_DENIED;
ERR_INVALID_HANDLE :: win32.ERROR_INVALID_HANDLE;
ERR_DIRECTORY      :: win32.ERROR_DIRECTORY;

os_stdin :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_in;
}

os_stdout :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_out;
}

os_stderr :: fn () *OsStdIoStream {
    if !_std_io_initialized { init_std_io(); }
    return &_std_err;
}

os_sleep_ms :: fn (ms: u32) #inline {
    win32.Sleep(ms);
};

// @Incomplete: Use u32/u64
os_tick_ms :: fn () f64 #inline {
    f: win32.LARGE_INTEGER #noinit;
    t: win32.LARGE_INTEGER #noinit;

    if win32.QueryPerformanceFrequency(&f) == 0 { return 0.; }
    if win32.QueryPerformanceCounter(&t) == 0 { return 0.; }
    return (cast(f64) t / cast(f64) f) * 1000.;
};

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8 #noinit;
    if win32.GetModuleFileNameA(null, auto buf.ptr, auto buf.len) > 0 {
        result :: std.str_new(buf.ptr);
        std.str_replace_all(&result, '\\', '/');
        return result;
    }

    return std.str_new(); 
}

os_execute :: fn (command: string_view) s32 {
    return C.system(std.strtoc(command));
}

os_get_last_error :: fn () (s32, string_view) #inline {
    ec :: cast(s32) win32.GetLastError();
    if ec == 0 { return 0, "No error."; }

    msg_len :: win32.FormatMessageA(
        win32.FORMAT_MESSAGE_FROM_SYSTEM | win32.FORMAT_MESSAGE_IGNORE_INSERTS | win32.FORMAT_MESSAGE_MAX_WIDTH_MASK,
        null,
        auto ec,
        0,
        _last_error_msg_buffer.ptr,
        auto _last_error_msg_buffer.len,
        null);

    if msg_len == 0 { return ec, "Unknown error."; }
    return ec, std.ctostr(_last_error_msg_buffer.ptr, auto msg_len);
}

// This is internally called from runtime when `debugbreak` is reached. Basically this when execution
// reach the `debugbreak` builtin expression, compiler will use internal break handling for compile-time
// execution (using interpreter) and replace this expression with call to this function in runtime.
__os_debug_break :: fn () #inline #compiler {
    if win32.IsDebuggerPresent() != 0 {
        win32.DebugBreak();
    }
}

// This is internally called from runtime when execution reach unreachable code path.
// Should not be called from interpreter.
__os_abort :: fn () #compiler {
    #if IS_DEBUG { __os_debug_break(); }
    application_context.abort_fn();
}

__os_abort_default :: fn () #inline {
    C.raise(C.SIGABRT);
}

__os_start :: fn () #entry {
    // Get command-line arguments passed to this executable.
    // We need custom function here to convert UTF16 to UTF8,
    // Windows api does not provide UTF8 version of CommandLineToArgv
    // function.
    // Internal allocation to handle argument strings is done
    // in this method, so we must free memory used by return value
    // by free(args.ptr) call.
    get_command_line_args :: fn (out_args: *[]string_view) #noinline {
        wargs: []*u16;
        cmd_line :: win32.GetCommandLineW();
        wargs.ptr = win32.CommandLineToArgvW(cmd_line, auto &wargs.len);
        defer win32.LocalFree(auto wargs.ptr);

        // Determinate size needed for all argument strings listed in one array including
        // zero terminator for each one.
        tmp_size : usize = 0;
        result_size: usize = sizeof(string_view) * auto wargs.len;

        loop i := 0; i < wargs.len; i += 1 {
            tmp_size += auto win32.WideCharToMultiByte(win32.CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
        }

        buffer :: C.malloc(result_size + tmp_size); 
        if buffer == null { __os_abort(); }

        out_args.len = wargs.len;
        out_args.ptr = auto buffer; 
        tmp := string_view.{ auto tmp_size, ptr_shift_bytes(buffer, auto result_size) };

        tmp_i := 0;
        loop i := 0; i < wargs.len; i += 1 {
            len :: win32.WideCharToMultiByte(win32.CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
            win32.WideCharToMultiByte(win32.CP_UTF8, null, wargs[i], auto C.wcslen(wargs[i]), auto &tmp[tmp_i], len, null, null); 

            (@out_args)[i].len = len - 1;
            (@out_args)[i].ptr = &tmp[tmp_i];
            tmp_i += len;
            tmp[tmp_i-1] = '\0';
        }
    };

    args: []string_view;
    get_command_line_args(&args);

    command_line_arguments.len = args.len;
    command_line_arguments.ptr = args.ptr;

    if !_std_io_initialized { init_std_io(); }

    out :: cast(s32) main();
    C.free(auto args.ptr); 
    C.exit(out);
}

#private

_last_error_msg_buffer: [256]s8 #thread_local;

STD_IN_STREAM_VTABLE :: std.StreamVTable.{
    read = auto &std_io_read
};

STD_OUT_STREAM_VTABLE :: std.StreamVTable.{
    write = auto &std_io_write,
    flush = auto &std_io_flush
};


_std_io_initialized := false;
_std_in  := OsStdIoStream.{ std.Stream.{ vtable = &STD_IN_STREAM_VTABLE }  };
_std_out := OsStdIoStream.{ std.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };
_std_err := OsStdIoStream.{ std.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };

init_std_io :: fn () {
    using win32;

    assert(!_std_io_initialized);
    _std_in.handle   = GetStdHandle(STD_INPUT_HANDLE);
    _std_out.handle  = GetStdHandle(STD_OUTPUT_HANDLE);
    _std_err.handle  = GetStdHandle(STD_ERROR_HANDLE);
    _std_io_initialized = true;
}

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_write :: fn (stream: *OsStdIoStream, src: *u8, size: s64) (s64, Error) {
    if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot write into standart output, the stream is closed."); }
    if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
    written_bytes: win32.DWORD #noinit;
    if win32.WriteFile(stream.handle, src, auto size, &written_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot write: %", estr);
    }
    return auto written_bytes, OK;
}

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_read :: fn (stream: *OsStdIoStream, dest: *u8, size: s64) (s64, Error) {
    if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot read from standart output, the stream is closed."); }
    if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
    read_bytes: win32.DWORD #noinit;
    if win32.ReadFile(stream.handle, dest, auto size, &read_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot read: %", estr);
    }
    return auto read_bytes, OK;
}

std_io_flush :: fn (stream: *OsStdIoStream) Error {
    if !stream.handle { return error(ERR_INVALID_HANDLE, "Cannot flush, the stream is closed."); }
    if win32.FlushFileBuffers(stream.handle) != 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot flush: %", estr);
    }
    return OK;
}
