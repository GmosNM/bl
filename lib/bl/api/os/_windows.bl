//************************************************************************************************
// bl
//
// File:   windows.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "windows/winapi.bl"
#load "windows/io.bl"
#load "posix/signal.bl"
#load "std/libc.bl"
#load "std/string.bl"
#load "std/utils.bl"
#load "std/error.bl"

OS_KIND :: OSKind.Windows;
OS_NAME :: "Windows";

OS_STDIN  :: C_STDIN;
OS_STDOUT :: C_STDOUT;
OS_STDERR :: C_STDERR;

/*
 * Platform depend C types compatible with C ABI.
 */
c_char      :: s8;
c_uchar     :: u8;
c_short     :: s16;
c_ushort    :: u16;
c_int       :: s32;
c_uint      :: u32;
c_long      :: s32;
c_ulong     :: u32;
c_longlong  :: s64;
c_ulonglong :: u64;
c_void_ptr  :: *u8;
c_size_t    :: u64;
c_ssize_t   :: s64;

/*
 * Maximum path size in bytes.
 */
OS_PATH_MAX :: _MAX_PATH;

/*
 * OSLibrary
 *
 * Description:
 *   Library handle.
 */
OSLibrary :: *u8;
OSMutex :: _HANDLE;

os_mutex_init :: fn (mutex: *OSMutex) #inline {
    (^mutex) = _CreateMutexA(null, 0, null);
}

os_mutex_terminate :: fn (mutex: *OSMutex) #inline {
    _CloseHandle(^mutex);
}

os_mutex_lock :: fn (mutex: *OSMutex) #inline {
    _WaitForSingleObject(^mutex, _INFINITE);
}

os_mutex_trylock :: fn (mutex: *OSMutex) bool #inline {
    unreachable;
    return false;
}

os_mutex_unlock :: fn (mutex: *OSMutex) #inline {
    if _ReleaseMutex(^mutex) == 0 {
        panic("Cannot unlock mutex!");
    }
}

os_sleep_ms :: fn (ms: f64) #inline {
    _Sleep(auto ms);
};

os_tick_ms :: fn () f64 #inline {
    f: _LARGE_INTEGER #noinit;
    t: _LARGE_INTEGER #noinit;

    if _QueryPerformanceFrequency(&f) == 0 { return 0.; }
    if _QueryPerformanceCounter(&t) == 0 { return 0.; }
    return (cast(f64) t / cast(f64) f) * 1000.;
};

os_get_exec_path :: fn () string {
    buf : [OS_PATH_MAX]u8 #noinit;
    if _GetModuleFileNameA(null, buf.ptr, auto buf.len) > 0 {
        result :: string_new(buf.ptr);
        string_replace_all(&result, '\\', '/');
        return result;
    }

    return string_new(); 
}

os_dlopen :: fn (lib_name := string_empty) OSLibrary {
    if lib_name.len > 0 {
        return _LoadLibraryA(auto lib_name.ptr); 
    }

    return _GetModuleHandleA(null); 
}

os_dlsym :: fn (lib: OSLibrary, sym_name: string) *u8 {
    return _GetProcAddress(lib, auto sym_name.ptr);
}

os_dlclose :: fn (lib: OSLibrary) {
    _FreeLibrary(lib);
}

os_execute :: fn (command: string) s32 {
    return c_system(auto command.ptr);
}

os_get_last_error :: fn () (s32, string) #inline {
    ec :: cast(s32) _GetLastError();
    str := string_empty;
    c_str :: cast(*u8) c_strerror(ec);
    if c_str && ec != 0 { str = cstr_to_str(c_str); }
    return ec, str;
}

_os_debug_break :: fn () #inline {
    if _IsDebuggerPresent() != 0 {
        _DebugBreak();
    }
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s64 {
    return _write(fd, auto buf, count);
};

__os_abort :: fn () #compiler {
    if IS_DEBUG { _os_debug_break(); }
    if _context.abort_fn {
        _context.abort_fn();
    } else {
        _os_abort_default();
    }
}

_os_abort_default :: fn () {
    _raise(_SIGABRT);
}

__os_start :: fn () #entry {
    args: []string;
    get_command_line_args(&args);

    command_line_arguments.len = args.len;
    command_line_arguments.ptr = args.ptr;

    out :: cast(s32) main();
    _default_allocator(AllocOp.Free, 0, auto args.ptr); 
    c_exit(out);
}

// @CLEANUP: This must be in gl.bl file not here, but we keep it
// until static 'if' will be supported by compiler.
_os_gl_get_proc :: fn (proc_name: string) *u8 {
    wglGetProcAddress :: fn (procName: *u8) *u8 #extern;

    if proc_name.len == 0 { return null; }
    p := wglGetProcAddress(proc_name.ptr);
    ip :: cast(s64) p;
    if ip != 0 && ip != 0x1 && ip != 0x2 && ip != 0x3 { return p; }

    module :: os_dlopen("opengl32");
    if module == null { panic("OpenGL not linked?"); }
    return os_dlsym(module, proc_name);
}


#private
/*
 * Get command-line arguments passed to this executable.
 * We need custom function here to convert UTF16 to UTF8,
 * Windows api does not provide UTF8 version of CommandLineToArgv
 * function.
 * Internal allocation to handle argument strings is done
 * in this method, so we must free memory used by return value
 * by free(args.ptr) call.
 */
get_command_line_args :: fn (out_args: *[]string) #no_inline {
    wargs: []*u16;
    cmd_line :: _GetCommandLineW();
    wargs.ptr = _CommandLineToArgvW(cmd_line, auto &wargs.len);
    defer _LocalFree(auto wargs.ptr);

    // Determinate size needed for all argument strings listed in one array including
    // zero terminator for each one.
    tmp_size : usize = 0;
    result_size: usize = sizeof(string) * auto wargs.len;
    
    loop i := 0; i < wargs.len; i += 1 {
        tmp_size += auto _WideCharToMultiByte(_CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
    }

    buffer :: _default_allocator(AllocOp.Allocate, result_size + tmp_size); 
    if buffer == null { __os_abort(); }

    out_args.len = wargs.len;
    out_args.ptr = auto buffer; 
    tmp := {:[]u8: auto tmp_size, ptr_shift_bytes(buffer, auto result_size)};

    tmp_i := 0;
    loop i := 0; i < wargs.len; i += 1 {
        len :: _WideCharToMultiByte(_CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
        _WideCharToMultiByte(_CP_UTF8, null, wargs[i], auto c_wcslen(wargs[i]), &tmp[tmp_i], len, null, null); 
        
        (^out_args)[i].len = len - 1;
        (^out_args)[i].ptr = &tmp[tmp_i];
        tmp_i += len;
        tmp[tmp_i-1] = '\0';
    }
}

