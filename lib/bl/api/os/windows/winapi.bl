// =================================================================================================
// bl
//
// File:   windows_api.bl 
// Author: Martin Dorazil
// Date:   26/2/20
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: Win32.ERROR_FILE_NOT_FOUND;
ERR_ALREADY_EXIST  :: Win32.ERROR_FILE_EXISTS;
ERR_ACCESS_DENIED  :: Win32.ERROR_ACCESS_DENIED;
ERR_INVALID_HANDLE :: Win32.ERROR_INVALID_HANDLE;
ERR_DIRECTORY      :: Win32.ERROR_DIRECTORY;

#scope Win32

TRUE :: 1;
FALSE :: 0;
MAX_PATH :: 260;
INVALID_HANDLE_VALUE :: cast(HANDLE) (cast(LONG_PTR)0xffffffffffffffff);
INFINITE : u32 : 0xFFFFFFFF;

ERROR_FILE_NOT_FOUND :: 2;
ERROR_FILE_EXISTS :: 80;
ERROR_ACCESS_DENIED  :: 5;
ERROR_INVALID_HANDLE :: 6;
ERROR_DIRECTORY :: 267;
CP_UTF8 : u32 : 65001;
WCHAR        :: *C.ushort;
LPWSTR       :: *C.ushort;
LPCWSTR      :: *C.ushort;
LPCSTR       :: *C.ushort;
LPSTR        :: *C.uchar;
LPCTSTR      :: *C.uchar;
HLOCAL       :: *C.uchar;
UINT         :: C.uint;
DWORD        :: C.uint;
LPCCH        :: C.uchar;
LPCWCH       :: C.ushort;
LPBOOL       :: C.int;
HMODULE      :: *C.uchar;
BOOL         :: C.int;
PBOOL        :: *BOOL;
FARPROC      :: *C.uchar; 
LPVOID       :: *C.uchar; 
LPOVERLAPPED :: *OVERLAPPED;
LPDWORD      :: *DWORD;
HANDLE       :: *C.uchar;
ULONG_PTR    :: *C.ulong;
SIZE_T       :: C.ulong;
PVOID        :: *C.uchar; 
CHAR         :: C.uchar; 
LONG_PTR     :: *C.long;
LARGE_INTEGER :: C.longlong;
PLARGE_INTEGER :: *LARGE_INTEGER;
HGLOBAL      :: C.void_ptr;
HWND         :: C.void_ptr;
LONG         :: C.long;
PLONG        :: *LONG;
WORD         :: C.ushort;
GENERIC_READ : u32 : 0x80000000;
GENERIC_WRITE : u32 : 0x40000000;
FILE_BEGIN : u32 : 0;
FILE_CURRENT : u32: 1;
FILE_END : u32 : 2;
CREATE_NEW : u32 : 1;
CREATE_ALWAYS : u32 : 2;
OPEN_EXISTING : u32 : 3;
OPEN_ALWAYS : u32 : 4;
TRUNCATE_EXISTING : u32 : 5;
LPOVERLAPPED_COMPLETION_ROUTINE :: * fn(dwErrorCode: DWORD, dwNumberOfBytesTransfered: DWORD, lpOverlapped: LPOVERLAPPED);
FILE_ADD_FILE             : u32 : 0x0002;
FILE_ADD_SUBDIRECTORY     : u32 : 0x0004;
FILE_APPEND_DATA          : u32 : 0x0004;
FILE_ATTRIBUTE_ARCHIVE : u32 : 0x00000020;
FILE_ATTRIBUTE_COMPRESSED : u32 : 0x00000800;
FILE_ATTRIBUTE_DEVICE : u32 : 0x00000040;
FILE_ATTRIBUTE_DIRECTORY : u32 : 0x00000010;
FILE_ATTRIBUTE_ENCRYPTED : u32 : 0x00004000;
FILE_ATTRIBUTE_HIDDEN : u32 : 0x00000002;
FILE_ATTRIBUTE_NORMAL : u32 : 0x00000080;
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED : u32 : 0x00002000;
FILE_ATTRIBUTE_OFFLINE : u32 : 0x00001000;
FILE_ATTRIBUTE_READONLY : u32 : 0x00000001;
FILE_ATTRIBUTE_REPARSE_POINT : u32 : 0x00000400;
FILE_ATTRIBUTE_SPARSE_FILE : u32 : 0x00000200;
FILE_ATTRIBUTE_SYSTEM : u32 : 0x00000004;
FILE_ATTRIBUTE_TEMPORARY : u32 : 0x00000100;
FILE_ATTRIBUTE_VIRTUAL : u32 : 0x00010000;
FILE_CREATE_PIPE_INSTANCE : u32 : 0x0004;
FILE_FLAG_BACKUP_SEMANTICS    : u32 :  0x02000000;
FILE_FLAG_DELETE_ON_CLOSE     : u32 :  0x04000000;
FILE_FLAG_FIRST_PIPE_INSTANCE : u32 :  0x00080000;
FILE_FLAG_NO_BUFFERING        : u32 :  0x20000000;
FILE_FLAG_OPEN_NO_RECALL      : u32 :  0x00100000;
FILE_FLAG_OPEN_REPARSE_POINT  : u32 :  0x00200000;
FILE_FLAG_OVERLAPPED          : u32 :  0x40000000;
FILE_FLAG_POSIX_SEMANTICS     : u32 :  0x01000000;
FILE_FLAG_RANDOM_ACCESS       : u32 :  0x10000000;
FILE_FLAG_SEQUENTIAL_SCAN     : u32 :  0x08000000;
FILE_FLAG_SESSION_AWARE       : u32 :  0x00800000;
FILE_FLAG_WRITE_THROUGH       : u32 :  0x80000000;
FILE_LIST_DIRECTORY       : u32 : 0x0001;
FILE_READ_DATA            : u32 : 0x0001;
FILE_SHARE_DELETE : u32 : 0x00000004;
FILE_SHARE_READ   : u32 : 0x00000001;
FILE_SHARE_WRITE  : u32 : 0x00000002;
FILE_WRITE_DATA           : u32 : 0x0002;
GHND : u32 : 0x0042;
GMEM_FIXED : u32 : 0x0000;
GMEM_MOVEABLE : u32 : 0x0002;
GMEM_ZEROINIT : u32 : 0x0040;
GPTR : u32 : 0x0040;
CF_TEXT : u32 : 1;
FILE_NOTIFY_CHANGE_FILE_NAME : u32 : 0x00000001;
FILE_NOTIFY_CHANGE_DIR_NAME : u32 : 0x00000002;
FILE_NOTIFY_CHANGE_ATTRIBUTES : u32 : 0x00000004;
FILE_NOTIFY_CHANGE_SIZE : u32 : 0x00000008;
FILE_NOTIFY_CHANGE_LAST_WRITE : u32 : 0x00000010;
FILE_NOTIFY_CHANGE_LAST_ACCESS : u32 : 0x00000020;
FILE_NOTIFY_CHANGE_CREATION : u32 : 0x00000040;
FILE_NOTIFY_CHANGE_SECURITY : u32 : 0x00000100;
FILE_NOTIFY_INFORMATION :: struct {
    NextEntryOffset: DWORD;
    Action: DWORD;
    FileNameLength: DWORD;
    FileName: [1]WCHAR;
}
OVERLAPPED :: struct {
    Internal: ULONG_PTR;
    InternalHigh: ULONG_PTR;
    Pointer: PVOID;
    hEvent: HANDLE;
}
FILETIME :: struct {
    dwLowDateTime: DWORD;
    dwHighDateTime: DWORD;
}
PFILETIME :: FILETIME;
LPFILETIME :: *FILETIME;
FIND_DATA :: struct {
    dwFileAttributes: DWORD;
    ftCreationTime: FILETIME;
    ftLastAccessTime: FILETIME;
    ftLastWriteTime: FILETIME;
    nFileSizeHigh: DWORD;
    nFileSizeLow: DWORD;
    dwReserved0: DWORD;
    dwReserved1: DWORD;
    cFileName: [MAX_PATH]CHAR;
    cAlternateFileName: [14]CHAR;
}

BY_HANDLE_FILE_INFORMATION :: struct {
    dwFileAttributes: DWORD;
    ftCreationTime: FILETIME;
    ftLastAccessTime: FILETIME;
    ftLastWriteTime: FILETIME;
    dwVolumeSerialNumber: DWORD;
    nFileSizeHigh: DWORD;
    nFileSizeLow: DWORD;
    nNumberOfLinks: DWORD;
    nFileIndexHigh: DWORD;
    nFileIndexLow: DWORD;
}
LPBY_HANDLE_FILE_INFORMATION :: *BY_HANDLE_FILE_INFORMATION;
FIND_DATAA :: FIND_DATA;
P_FIND_DATAA :: *FIND_DATA;
LP_FIND_DATAA :: *FIND_DATA;
INVALID_HANDLE :: cast(*u8) -1;
INVALID_FILE_ATTRIBUTES :: cast(DWORD) -1;
WAIT_TIMEOUT :: 258;
WAIT_FAILED : DWORD : 0xFFFFFFFF;
WAIT_OBJECT_0 :: 0;
LIST_ENTRY :: struct {
   Flink: *LIST_ENTRY;
   Blink: *LIST_ENTRY;
} 
RTL_CRITICAL_SECTION_DEBUG :: struct {
    Type: WORD;
    CreatorBackTraceIndex: WORD;
    CriticalSection: *RTL_CRITICAL_SECTION;
    ProcessLocksList: LIST_ENTRY;
    EntryCount: DWORD;
    ContentionCount: DWORD;
    Flags: DWORD;
    CreatorBackTraceIndexHigh: WORD;
    SpareWORD: WORD;
}
PRTL_CRITICAL_SECTION_DEBUG :: *RTL_CRITICAL_SECTION_DEBUG;
RTL_CRITICAL_SECTION :: struct {
    DebugInfo: PRTL_CRITICAL_SECTION_DEBUG;
    LockCount: LONG;
    RecursionCount: LONG;
    OwningThread: HANDLE; 
    LockSemaphore: HANDLE;
    SpinCount: ULONG_PTR;
}
LPCRITICAL_SECTION :: *RTL_CRITICAL_SECTION;

FORMAT_MESSAGE_IGNORE_INSERTS : u32 : 0x00000200;
FORMAT_MESSAGE_FROM_STRING    : u32 : 0x00000400;
FORMAT_MESSAGE_FROM_HMODULE   : u32 : 0x00000800;
FORMAT_MESSAGE_FROM_SYSTEM    : u32 : 0x00001000;
FORMAT_MESSAGE_ARGUMENT_ARRAY : u32 : 0x00002000;
FORMAT_MESSAGE_MAX_WIDTH_MASK : u32 : 0x000000FF;

FindFirstFile :: fn  (lpFileName: LPCSTR, lpFindFileData: LP_FIND_DATAA) HANDLE #extern "FindFirstFileA";
FindClose :: fn (hFindFile: HANDLE) BOOL #extern "FindClose";
FindNextFile :: fn (hFindFile: HANDLE, lpFindFileData: LP_FIND_DATAA) BOOL #extern "FindNextFileA";
GetFileAttributesA :: fn (lpFileName: LPCSTR) DWORD #extern "GetFileAttributesA";
CreateFile :: fn (
    lpFileName: LPCSTR,
    dwDesiredAccess: DWORD,
    dwShareMode: DWORD,
    lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    dwCreationDisposition: DWORD,
    dwFlagsAndAttributes: DWORD,
    hTemplateFile: HANDLE
) *u8 #extern "CreateFileA"; 
CreateDirectoryA :: fn (
    lpPathName: LPCSTR,
    lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
) BOOL #extern "CreateDirectoryA";
ReadDirectoryChanges :: fn (
    hDirectory: HANDLE,
    lpBuffer: LPVOID,
    nBufferLength: DWORD,
    bWatchSubtree: BOOL,
    dwNotifyFilter: DWORD,
    lpBytesReturned: LPDWORD,
    lpOverlapped: LPOVERLAPPED,
    lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE 
) s32 #extern "ReadDirectoryChangesW";
WideCharToMultiByte :: fn (
    CodePage: UINT,
    dwFlags: *DWORD,
    lpWideCharStr: *LPCWCH,
    cchWideChar: s32,
    lpMultiByteStr: LPSTR,
    cbMultiByte: s32,
    lpDefaultChar: *LPCCH,
    lpUsedDefaultChar: *LPBOOL
) s32 #extern "WideCharToMultiByte";
CreateEvent :: fn (
  lpEventAttributes: LPSECURITY_ATTRIBUTES,
  bManualReset: BOOL,
  bInitialState: BOOL,
  lpName: LPCSTR 
) HANDLE #extern "CreateEventA";
SetEvent :: fn (hEvent: HANDLE) BOOL #extern "SetEvent";
FindFirstChangeNotification :: fn (
  lpPathName: LPCSTR,
  bWatchSubtree: BOOL,
  dwNotifyFilter: DWORD
) HANDLE #extern "FindFirstChangeNotificationA";
FindNextChangeNotification :: fn (hChangeHandle: HANDLE) BOOL #extern "FindNextChangeNotification";
FindCloseChangeNotification :: fn (hChangeHandle: HANDLE) BOOL #extern "FindCloseChangeNotification";
WaitForSingleObject :: fn (hHandle: HANDLE, dwMilliseconds: DWORD) DWORD #extern "WaitForSingleObject";
WaitForMultipleObjects :: fn (
    nCount: DWORD,
    lpHandles: *HANDLE,
    bWaitAll: BOOL,
    dwMilliseconds: DWORD        
) DWORD #extern "WaitForMultipleObjects";
GetCommandLineW     :: fn () LPWSTR #extern "GetCommandLineW";
CommandLineToArgvW  :: fn (lpCmdLine: LPCWSTR, pNumArgs: *s32) *LPWSTR #extern "CommandLineToArgvW";
LocalFree           :: fn (hMem: HLOCAL) HLOCAL #extern "LocalFree";
Sleep               :: fn (dwMilliseconds: DWORD) #extern "Sleep";
SleepEx             :: fn (dwMilliseconds: DWORD, bAlertable: BOOL) DWORD #extern "SleepEx";
GetFullPathNameA    :: fn (lpFileName: LPCSTR,
                                 nBufferLength: DWORD,
                                 lpBuffer: LPSTR,
                                 lpFilePart: *LPSTR) DWORD #extern "GetFullPathNameA";
PathFileExistsA     :: fn (pszPath: LPCSTR) BOOL #extern "PathFileExistsA";
LoadLibraryA        :: fn (lpLibFileName: LPCSTR) HMODULE #extern "LoadLibraryA";
FreeLibrary         :: fn (hLibModule: HMODULE) BOOL #extern "FreeLibrary";
GetModuleHandleA    :: fn (lpModuleName: LPCSTR) HMODULE #extern "GetModuleHandleA";
GetProcAddress      :: fn (hModule: HMODULE, lpProcName: LPCSTR) FARPROC #extern "GetProcAddress";
DebugBreak          :: fn () #extern "DebugBreak";
IsDebuggerPresent   :: fn () BOOL #extern "IsDebuggerPresent";
CheckRemoteDebuggerPresent :: fn (hProcess: HANDLE, pbDebuggerPresent: PBOOL) BOOL #extern "CheckRemoteDebuggerPresent";
GetModuleFileNameA  :: fn (hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD) DWORD #extern "GetModuleFileNameA";
SECURITY_ATTRIBUTES :: struct {
    nLength: DWORD;
    lpSecurityDescriptor: LPVOID;
    bInheritHandle: BOOL;
} 
PSECURITY_ATTRIBUTES  :: *SECURITY_ATTRIBUTES;
LPSECURITY_ATTRIBUTES :: *SECURITY_ATTRIBUTES;
LPTHREAD_START_ROUTINE :: *fn (args: LPVOID) DWORD;

CreateThread :: fn (
    lpThreadAttributes: LPSECURITY_ATTRIBUTES,
    dwStackSize: SIZE_T,
    lpStartAddress: LPTHREAD_START_ROUTINE,
    lpParameter: LPVOID,
    dwCreationFlags: DWORD,
    lpThreadId: LPDWORD 
) HANDLE #extern "CreateThread";

GetCurrentThread :: fn () HANDLE #extern "GetCurrentThread";
TerminateThread :: fn (handle: HANDLE, exit_code: DWORD) BOOL #extern "TerminateThread";
GetExitCodeThread :: fn (hThread: HANDLE, lpExitCode: LPDWORD) BOOL #extern "GetExitCodeThread";

CreateMutexA :: fn (
    lpMutexAttributes: LPSECURITY_ATTRIBUTES,
    bInitialOwner: BOOL,
    lpName: LPCSTR
) HANDLE #extern "CreateMutexA";

ReleaseMutex :: fn (hMutex: HANDLE) BOOL #extern "ReleaseMutex";
GetTickCount :: fn () DWORD #extern "GetTickCount";
QueryPerformanceCounter :: fn (lpPerformanceCount: *LARGE_INTEGER) BOOL #extern "QueryPerformanceCounter";
QueryPerformanceFrequency :: fn (lpPerformanceCount: *LARGE_INTEGER) BOOL #extern "QueryPerformanceFrequency";
GlobalAlloc :: fn (uFlags: UINT, dwBytes: SIZE_T) HGLOBAL #extern "GlobalAlloc";
GlobalFree :: fn (hMem: HGLOBAL) HGLOBAL #extern "GlobalFree";
GlobalLock :: fn (hMem: HGLOBAL) LPVOID #extern "GlobalLock";
GlobalUnlock :: fn (hMem: HGLOBAL) BOOL #extern "GlobalUnlock";
OpenClipboard :: fn (hWndNewOwner: HWND) BOOL #extern "OpenClipboard";
EmptyClipboard :: fn () BOOL #extern "EmptyClipboard";
SetClipboardData :: fn (uFormat: UINT, hMem: HANDLE) HANDLE #extern "SetClipboardData";
GetClipboardData :: fn (uFormat: UINT) HANDLE  #extern "GetClipboardData";
CloseClipboard :: fn () BOOL #extern "CloseClipboard";
GetLastError :: fn () DWORD #extern "GetLastError";
CloseHandle :: fn (hObject: HANDLE) BOOL #extern "CloseHandle";
GetTempPathA :: fn (nBufferLength: DWORD, lpBuffer: LPSTR) DWORD #extern "GetTempPathA";
DeleteFileA :: fn (lpFileName: LPCSTR) BOOL #extern "DeleteFileA";
RemoveDirectoryA :: fn (lpPathName: LPCSTR) BOOL #extern "RemoveDirectoryA";
GetCurrentDirectoryA :: fn (nBufferLength: DWORD, lpBuffer: LPSTR) DWORD #extern "GetCurrentDirectoryA";
SetCurrentDirectoryA :: fn (lpPathName: LPSTR) BOOL #extern "SetCurrentDirectoryA";
GetFileSizeEx :: fn (hFile: HANDLE, lpFileSize: PLARGE_INTEGER) BOOL #extern "GetFileSizeEx";
ReadFile :: fn (hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL #extern "ReadFile";
WriteFile :: fn (hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL #extern "WriteFile";
CopyFileA :: fn (lpExistingFileName: LPCTSTR, lpNewFileName: LPCTSTR, bFailIfExists: BOOL) BOOL #extern "CopyFileA";
SetEndOfFile :: fn (hFile: HANDLE) BOOL #extern "SetEndOfFile";
SetFilePointer :: fn (hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD) DWORD #extern "SetFilePointer";
InitializeCriticalSection :: fn (lpCriticalSection: LPCRITICAL_SECTION) #extern "InitializeCriticalSection";
DeleteCriticalSection :: fn (lpCriticalSection: LPCRITICAL_SECTION) #extern "DeleteCriticalSection";
EnterCriticalSection  :: fn (lpCriticalSection: LPCRITICAL_SECTION) #extern "EnterCriticalSection";
LeaveCriticalSection  :: fn (lpCriticalSection: LPCRITICAL_SECTION) #extern "LeaveCriticalSection";
TryEnterCriticalSection :: fn (lpCriticalSection: LPCRITICAL_SECTION ) BOOL #extern "TryEnterCriticalSection";
GetFileInformationByHandle :: fn (hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION) BOOL #extern "GetFileInformationByHandle";
GetOverlappedResult :: fn (hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL) BOOL #extern "GetOverlappedResult";
ResetEvent :: fn (hEvent: HANDLE) BOOL #extern "ResetEvent";
FormatMessageA :: fn (dwFlags: DWORD, lpSource: LPVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: *u8) DWORD #extern "FormatMessageA";