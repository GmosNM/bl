//************************************************************************************************
// bl
//
// File:   windows.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/_builtin.bl"

// INCOMPLETE: time_now_ms

OS_NAME :: "Windows";

OS_STDIN  :: 0;
OS_STDOUT :: 1;
OS_STDERR :: 2;

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return _write(fd, buf, count);
};

__os_abort :: fn () #compiler {
    raise(SIGABRT);
}

time_now_ms :: fn () f64 {
    // INCOMPLETE
    unreachable;
    return 0.0;
};

__os_start :: fn () {
    args: []string;
    get_command_line_args(&args);
    defer mem_free(auto args.ptr);

    command_line_arguments.len = args.len;
    command_line_arguments.ptr = args.ptr;

    out :: cast(s32) main();
    _exit(out);
}

#private

LPWSTR  :: *u16;
LPCWSTR :: *u16;
LPCSTR  :: *u16;
LPSTR   :: *u8;
HLOCAL  :: *u8;
UINT    :: u32;
DWORD   :: *u32;
LPCCH   :: u8;
LPCWCH  :: u16;
LPBOOL  :: s32;

SIGHUP  :: 1;
SIGINT  :: 2;
SIGQUIT :: 3; 
SIGILL  :: 4; 
SIGTRAP :: 5;
SIGABRT :: 6;

CP_UTF8 : u32 : 65001;

_write             :: fn (fd: s32, buf: *u8, count: usize) s32 #extern;
_exit              :: fn (v: s32) #extern;
wcslen             :: fn (str: *u16) usize #extern;
raise              :: fn (sig: s32) s32 #extern;

// windows crap
GetCommandLineW     :: fn () LPWSTR #extern;
CommandLineToArgvW  :: fn (lpCmdLine: LPCWSTR, pNumArgs: *s32) *LPWSTR #extern;
LocalFree           :: fn (hMem: HLOCAL) HLOCAL #extern;

WideCharToMultiByte :: fn (
    CodePage: UINT,
    dwFlags: DWORD,
    lpWideCharStr: *LPCWCH,
    cchWideChar: s32,
    lpMultiByteStr: LPSTR,
    cbMultiByte: s32,
    lpDefaultChar: *LPCCH,
    lpUsedDefaultChar: *LPBOOL
) s32 #extern;

// Get command-line arguments passed to this executable.
// We need custom function here to convert UTF16 to UTF8,
// Windows api does not provide UTF8 version of CommandLineToArgv
// function.
// Internal allocation to handle argument strings is done
// in this method, so we must free memory used by return value
// by mem_free(args.ptr) call.
get_command_line_args :: fn (out_args: *[]string) #no_inline {
    wargs: []*u16;
    cmd_line :: GetCommandLineW();
    wargs.ptr = CommandLineToArgvW(cmd_line, auto &wargs.len);
    defer LocalFree(auto wargs.ptr);

    // Determinate size needed for all argument strings listed in one array including
    // zero terminator for each one.
    tmp_size : usize = 0;
    result_size: usize = sizeof(string) * auto wargs.len;
    
    loop i := 0; i < wargs.len; i += 1 {
        tmp_size += auto WideCharToMultiByte(CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
    }

    buffer :: mem_alloc(result_size + tmp_size); 
    if buffer == null { __os_abort(); }

    out_args.len = wargs.len;
    out_args.ptr = auto buffer; 
    tmp := {:[]u8: auto tmp_size, ptr_shift_bytes(buffer, result_size)};

    tmp_i := 0;
    loop i := 0; i < wargs.len; i += 1 {
        len :: WideCharToMultiByte(CP_UTF8, null, wargs[i], -1, null, 0, null, null); 
        WideCharToMultiByte(CP_UTF8, null, wargs[i], auto wcslen(wargs[i]), &tmp[tmp_i], len, null, null); 
        
        (^out_args)[i].len = len - 1;
        (^out_args)[i].ptr = &tmp[tmp_i];
        tmp_i += len;
        tmp[tmp_i] = '\0';
    }
}
