//************************************************************************************************
// bl
//
// File:   windows.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/_builtin.bl"

// INCOMPLETE: time_now_ms

OS_NAME :: "Windows";

OS_STDIN  :: 0;
OS_STDOUT :: 1;
OS_STDERR :: 2;

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return _write(fd, buf, count);
};

__os_abort :: fn () #compiler {
    raise(SIGABRT);
}

time_now_ms :: fn () f64 {
    // INCOMPLETE
    unreachable;
    return 0.0;
};


__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn () {
    cmd_line :: GetCommandLineW();
    argc := 0;
    argv :: CommandLineToArgvW(cmd_line, &argc);

    args :: {:[]*u16: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string;
    is_allocated :: args.len > tmp.len;

    command_line_arguments.len = args.len;

    if is_allocated {
        command_line_arguments.ptr = auto mem_alloc(sizeof(string) * auto args.len);
        if command_line_arguments.ptr == null { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }

    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string: auto wcslen(args[i]), args[i]};
    }

    out :: cast(s32) main();

    if is_allocated {
        mem_free(auto command_line_arguments.ptr);
    }

    LocalFree(auto argv);
    _exit(0);
}

#private

LPWSTR  :: *u16;
LPCWSTR :: *u16;
LPCSTR :: *u16;
LPSTR   :: *u8;
HLOCAL  :: *u8;

SIGHUP  :: 1;
SIGINT  :: 2;
SIGQUIT :: 3; 
SIGILL  :: 4; 
SIGTRAP :: 5;
SIGABRT :: 6;

raise              :: fn (sig: s32) s32 #extern;
_write             :: fn (fd: s32, buf: *u8, count: usize) s32 #extern;
_exit              :: fn (v: s32) #extern;

// windows crap
GetCommandLineA    :: fn () LPSTR #extern;
CommandLineToArgv  :: fn (lpCmdLine: LPCSTR, pNumArgs: *s32) *LPWSTR #extern;
LocalFree          :: fn (hMem: HLOCAL) HLOCAL #extern;
wcslen             :: fn (str: *u16) usize #extern;