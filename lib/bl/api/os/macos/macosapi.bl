//************************************************************************************************
// bl
//
// File:   _api.bl 
// Author: Martin Dorazil
// Date:   26/2/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

_CFAllocatorRef :: *u8;
_CFIndex :: s64;
_CFStringRef :: *u8;
_CFArrayRef :: *u8;
_CFArrayCallBacks :: u8;
_CFTimeInterval :: f64;
_CFTypeRef :: *u8;
_CFRunLoopRef :: *u8;
_CFRunLoopMode :: _CFStringRef;
_Boolean :: u8;

_CFStringEncoding :: enum u32 {
    MacRoman :: 0;
    WindowsLatin1 :: 0x0500;
    ISOLatin1 :: 0x0201;
    NextStepLatin :: 0x0B01;
    ASCII :: 0x0600; 
    Unicode :: 0x0100;
    UTF8 :: 0x08000100;
    NonLossyASCII :: 0x0BFF;

    UTF16 :: 0x0100; 
    UTF16BE :: 0x10000100;
    UTF16LE :: 0x14000100;

    UTF32 :: 0x0c000100;
    UTF32BE :: 0x18000100;
    UTF32LE :: 0x1c000100;
};

_kFSEventStreamEventFlagNone               : u32 : 0x00000000;
_kFSEventStreamEventFlagMustScanSubDirs    : u32 : 0x00000001;
_kFSEventStreamEventFlagUserDropped        : u32 : 0x00000002;
_kFSEventStreamEventFlagKernelDropped      : u32 : 0x00000004;
_kFSEventStreamEventFlagEventIdsWrapped    : u32 : 0x00000008;
_kFSEventStreamEventFlagHistoryDone        : u32 : 0x00000010;
_kFSEventStreamEventFlagRootChanged        : u32 : 0x00000020;
_kFSEventStreamEventFlagMount              : u32 : 0x00000040;
_kFSEventStreamEventFlagUnmount            : u32 : 0x00000080;
_kFSEventStreamEventFlagItemCreated        : u32 : 0x00000100;
_kFSEventStreamEventFlagItemRemoved        : u32 : 0x00000200;
_kFSEventStreamEventFlagItemInodeMetaMod   : u32 : 0x00000400;
_kFSEventStreamEventFlagItemRenamed        : u32 : 0x00000800;
_kFSEventStreamEventFlagItemModified       : u32 : 0x00001000;
_kFSEventStreamEventFlagItemFinderInfoMod  : u32 : 0x00002000;
_kFSEventStreamEventFlagItemChangeOwner    : u32 : 0x00004000;
_kFSEventStreamEventFlagItemXattrMod       : u32 : 0x00008000;
_kFSEventStreamEventFlagItemIsFile         : u32 : 0x00010000;
_kFSEventStreamEventFlagItemIsDir          : u32 : 0x00020000;
_kFSEventStreamEventFlagItemIsSymlink      : u32 : 0x00040000;
_kFSEventStreamEventFlagOwnEvent           : u32 : 0x00080000;
_kFSEventStreamEventFlagItemIsHardlink     : u32 : 0x00100000;
_kFSEventStreamEventFlagItemIsLastHardlink : u32 : 0x00200000;
_kFSEventStreamEventFlagItemCloned         : u32 : 0x00400000;

_kFSEventStreamEventIdSinceNow : _FSEventStreamEventId : 0xFFFFFFFFFFFFFFFF;

_kFSEventStreamCreateFlagNone            : _FSEventStreamCreateFlags : 0x00000000;
_kFSEventStreamCreateFlagUseCFTypes      : _FSEventStreamCreateFlags : 0x00000001;
_kFSEventStreamCreateFlagNoDefer         : _FSEventStreamCreateFlags : 0x00000002;
_kFSEventStreamCreateFlagWatchRoot       : _FSEventStreamCreateFlags : 0x00000004;
_kFSEventStreamCreateFlagIgnoreSelf      : _FSEventStreamCreateFlags : 0x00000008;
_kFSEventStreamCreateFlagFileEvents      : _FSEventStreamCreateFlags : 0x00000010;
_kFSEventStreamCreateFlagMarkSelf        : _FSEventStreamCreateFlags : 0x00000020;
_kFSEventStreamCreateFlagUseExtendedData : _FSEventStreamCreateFlags : 0x00000040;

_FSEventStreamRef :: *u8;
_FSEventStreamEventId :: u64;
_FSEventStreamCreateFlags :: u32;
_FSEventStreamEventFlags :: u32;
_ConstFSEventStreamRef :: *u8;

_CFAllocatorRetainCallBack :: * fn (info: *u8) *u8;
_CFAllocatorReleaseCallBack :: * fn (info: *u8);
_CFAllocatorCopyDescriptionCallBack :: * fn (info: *u8) _CFStringRef;

_CFArrayCreate :: fn (
    allocator: _CFAllocatorRef,
    values: **u8,
    numValues: _CFIndex,
    callBacks: *_CFArrayCallBacks
) _CFArrayRef #extern "CFArrayCreate";

_CFRunLoopGetCurrent :: fn () _CFRunLoopRef #extern "CFRunLoopGetCurrent";
_CFRunLoopCopyCurrentMode :: fn (rl: _CFRunLoopRef) _CFRunLoopMode #extern "CFRunLoopCopyCurrentMode";
_CFRelease :: fn (cf: _CFTypeRef) #extern "CFRelease";

_CFStringCreateWithCString :: fn (
    alloc: _CFAllocatorRef,
    cStr: *u8,
    encoding: _CFStringEncoding
) _CFStringRef #extern "CFStringCreateWithCString";

_FSEventStreamContext :: struct {
  version: _CFIndex;
  info: *u8;
  retain: _CFAllocatorRetainCallBack;
  release: _CFAllocatorReleaseCallBack;
  copyDescription: _CFAllocatorCopyDescriptionCallBack;
};

_FSEventStreamCallback :: * fn (
    streamRef: _ConstFSEventStreamRef,
    clientCallBackInfo: *u8,
    numEvents: usize,
    eventPaths: *u8,
    eventFlags: *_FSEventStreamEventFlags,
    eventIds: *_FSEventStreamEventId
); 

_FSEventStreamCreate :: fn (
    allocator: _CFAllocatorRef,
    callback: _FSEventStreamCallback,
    context: *_FSEventStreamContext,
    pathsToWatch: _CFArrayRef,
    sinceWhen: _FSEventStreamEventId,
    latency: _CFTimeInterval,
    flags: _FSEventStreamCreateFlags   
) _FSEventStreamRef #extern "FSEventStreamCreate"; 

_FSEventStreamScheduleWithRunLoop :: fn (
    streamRef: _FSEventStreamRef,
    runLoop: _CFRunLoopRef,
    runLoopMode: _CFStringRef
) #extern "FSEventStreamScheduleWithRunLoop";

_FSEventStreamUnscheduleFromRunLoop :: fn (
    streamRef: _FSEventStreamRef,
    runLoop: _CFRunLoopRef,
    runLoopMode: _CFStringRef
) #extern "FSEventStreamUnscheduleFromRunLoop";

_FSEventStreamStart :: fn (streamRef: _FSEventStreamRef) _Boolean #extern "FSEventStreamStart";
_FSEventStreamFlushSync :: fn (streamRef: _FSEventStreamRef) #extern "FSEventStreamFlushSync";
_FSEventStreamStop :: fn (streamRef: _FSEventStreamRef) #extern "FSEventStreamStop";
_FSEventStreamInvalidate :: fn (streamRef: _FSEventStreamRef) #extern "FSEventStreamInvalidate";
_FSEventStreamRelease :: fn (streamRef: _FSEventStreamRef) #extern "FSEventStreamRelease";
_NSGetExecutablePath :: fn (buf: *c_char, bufsize: *c_uint) c_int #extern "_NSGetExecutablePath";
_mach_absolute_time :: fn () u64 #extern "mach_absolute_time";
