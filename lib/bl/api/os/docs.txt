//---------------------------------------------------------------------------
/*!
os_thread_create
================

Declaration
-----------
::

	os_thread_create :: fn (entry: OSThreadEntryFn, args: ...) OSThread

Description
-----------
Create new thread and execute entry function with passed set of arguments.

.. warning:: Thread must be released by `os_thread_join` call. 

Arguments
---------
* `entry` Pointer to function started in new thread. 

Result
------
New thread.

Example
-------
.. literalinclude:: /examples/docs/006.bl
   :language: c 

*/

//---------------------------------------------------------------------------

/*!
os_thread_join
==============

Declaration
-----------
:: 

	os_thread_join :: fn (thread: OSThread)

Description
-----------
Wait for thread to finish and release it's resources.

Arguments
---------
* `thread` Thread to be joined. 
*/

//---------------------------------------------------------------------------

/*!
os_thread_current
=================

Declaration
-----------
::

	os_thread_current :: fn () OSThread #inline

Description
-----------
Return handle to current thread.

Result
------
Thread handle.
*/

//---------------------------------------------------------------------------

/*!
os_thread_kill
==============

Declaration
-----------
::

	os_thread_kill :: fn (thread: OSThread, exit_code: s32 = 0) bool #inline

Description
-----------
Interrupt thread with exit code.

Arguments
---------
* `thread` Thread to be interrupted. 
* `exit_code` Optional exit code.

Result
------
Return true on success.
*/

//---------------------------------------------------------------------------

/*!
os_mutex_init 
=============

Declaration
-----------
::

	os_mutex_init :: fn (mutex: *OSMutex)

Description
-----------
Initialize mutex.

.. warning:: Mutex must be released by `os_mutex_terminate` call. 

Arguments
---------
* `mutex` Mutex to be initialized. 
*/

//---------------------------------------------------------------------------

/*!
os_mutex_terminate 
==================

Declaration
-----------
::

	os_mutex_terminate :: fn (mutex: *OSMutex)

Description
-----------
Terminate mutex.

Arguments
---------
* `mutex` Mutex to be terminated. 
*/

//---------------------------------------------------------------------------

/*!
os_mutex_lock 
=============

Declaration
-----------
::

	os_mutex_lock :: fn (mutex: *OSMutex)

Description
-----------
Lock mutex.

Arguments
---------
* `mutex` Mutex to be locked. 
*/

//---------------------------------------------------------------------------

/*!
os_mutex_trylock 
================

Declaration
-----------
::

	os_mutex_trylock :: fn (mutex: *OSMutex) bool

Description
-----------
Try to unlock mutex.

Arguments
---------
* `mutex` Mutex instance. 

Result
------
True when mutex was locked.
*/

//---------------------------------------------------------------------------

/*!
os_mutex_unlock 
===============

Declaration
-----------
::

	os_mutex_unlock :: fn (mutex: *OSMutex)

Description
-----------
Unlock locked mutex.

Arguments
* `mutex` Mutex instance. 
*/

//---------------------------------------------------------------------------

/*!
os_sleep_ms
===========

Declaration
-----------
::

	os_sleep_ms :: fn (ms: f64) #inline

Description
-----------
Sleep for milliseconds.

Arguments
---------
* `ms` Time in ms. 
*/

//---------------------------------------------------------------------------

/*!
os_tick_ms
==========

Declaration
-----------
::

	os_tick_ms :: fn () f64 #inline

Description
-----------
Return system tick in ms.

Result
------
System tick.
*/

//---------------------------------------------------------------------------

/*!
os_get_exec_path
================

Declaration
-----------
::

	os_get_exec_path :: fn () string

Description
-----------
Return absolute path of current executed program.

Result
------
Executable path.
*/

//---------------------------------------------------------------------------

/*!
os_dlopen
=========

Declaration
::

	os_dlopen :: fn (lib_name: string) OSLibrary

Description
-----------
Dynamically link native binary from file.

Arguments
---------
* `lib_name` Name of the library. If lib_name is empty string, then function return 
  handle for main program. 

Result
------
Binary handle.
*/

//---------------------------------------------------------------------------

/*!
os_dlsym
========

Declaration
-----------
::

	os_dlsym :: fn (lib: OSLibrary, sym_name: string) *u8

Description
-----------
Get handle of entity from dynamically loaded binary file.

Arguments
---------
* `lib` Binary handle.
* `sym_name` Name of desired symbol.

Result
------
Entity handle or `null`.
*/

//---------------------------------------------------------------------------

/*!
os_dlclose
==========

Declaration
-----------
::

	os_dlclose :: fn (lib: OSLibrary)

Description
-----------
Close dynamically loaded binary.

Arguments
---------
* `lib` Binary handle.
*/

//---------------------------------------------------------------------------

/*!
os_execute
==========

Declaration
-----------
::

	os_execute :: fn (command: string) s32

Description
-----------
Execute command in native shell and return exit code.

Arguments
---------
* `command` Command to be executed.

Result
------
Execution exit code.
*/
