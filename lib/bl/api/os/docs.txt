//---------------------------------------------------------------------------
/*!
# os_thread_create
## Declaration
```c
os_thread_create :: fn (entry: OSThreadEntryFn, args: ...) OSThread
```
## Description
  Create new thread and execute entry function with passed set of arguments.

!!! WARNING 
    Thread must be released by `os_thread_join` call. 

## Arguments
  * `entry`
    Pointer to function started in new thread. 

## Result
  New thread.

## Example
```c
// Worker function called from new thread.
worker :: fn (args: []Any) {
    print("Thread started!\n");
    os_sleep_ms(1000.0);
}

main :: fn () s32 {
    // Create and execute thread without parameters.
    t :: os_thread_create(&worker);
    
    // Wait for thread. 
    os_thread_join(t);
    print("Thread joined.\n");
    
    return 0;
}
```
*/

//---------------------------------------------------------------------------

/*!
# os_thread_join
## Declaration
```c
os_thread_join :: fn (thread: OSThread)
```
## Description
  Wait for thread to finish and release it's resources.

## Arguments
  * `thread`
    Thread to be joined. 
*/

//---------------------------------------------------------------------------

/*!
# os_thread_current
## Declaration
```c
os_thread_current :: fn () OSThread #inline
```
## Description
  Return handle to current thread.

## Result
  Thread handle.
*/

//---------------------------------------------------------------------------

/*!
# os_thread_kill
## Declaration
```c
os_thread_kill :: fn (thread: OSThread, exit_code: s32 = 0) bool #inline
```
## Description
  Interrupt thread with exit code.

## Arguments
  * `thread`
    Thread to be interrupted. 
  * `exit_code`
    Optional exit code.

## Result
  Return true on success.
*/

//---------------------------------------------------------------------------

/*!
# os_mutex_init 
## Declaration
```c
os_mutex_init :: fn (mutex: *OSMutex)
```
## Description
  Initialize mutex.

!!! WARNING 
    Mutex must be released by `os_mutex_terminate` call. 

## Arguments
  * `mutex`
    Mutex to be initialized. 
*/

//---------------------------------------------------------------------------

/*!
# os_mutex_terminate 
## Declaration
```c
os_mutex_terminate :: fn (mutex: *OSMutex)
```
## Description
  Terminate mutex.

## Arguments
  * `mutex`
    Mutex to be terminated. 
*/

//---------------------------------------------------------------------------

/*!
# os_mutex_lock 
## Declaration
```c
os_mutex_lock :: fn (mutex: *OSMutex)
```
## Description
  Lock mutex.

## Arguments
  * `mutex`
    Mutex to be locked. 
*/

//---------------------------------------------------------------------------

/*!
# os_mutex_trylock 
## Declaration
```c
os_mutex_trylock :: fn (mutex: *OSMutex) bool
```
## Description
  Try to unlock mutex.

## Arguments
  * `mutex`
    Mutex instance. 

## Result
  True when mutex was locked.
*/

//---------------------------------------------------------------------------

/*!
# os_mutex_unlock 
## Declaration
```c
os_mutex_unlock :: fn (mutex: *OSMutex)
```
## Description
  Unlock locked mutex.

## Arguments
  * `mutex`
    Mutex instance. 
*/

//---------------------------------------------------------------------------

/*!
# os_sleep_ms
## Declaration
```c
os_sleep_ms :: fn (ms: f64) #inline
```
## Description
  Sleep for milliseconds.

## Arguments
  * `ms`
    Time in ms. 
*/

//---------------------------------------------------------------------------

/*!
# os_tick_ms
## Declaration
```c
os_tick_ms :: fn () f64 #inline
```
## Description
  Return system tick in ms.

## Result
  System tick.
*/

//---------------------------------------------------------------------------


/*!
# os_get_real_path
## Declaration
```c
os_get_real_path :: fn (filename: string) string
```
## Description
  Find real path of passed file or directory name.

## Arguments
  * `filename`
    Name of the file or directory. 

## Result
  Real path.
*/

//---------------------------------------------------------------------------

/*!
# os_get_exec_path
## Declaration
```c
os_get_exec_path :: fn () string
```
## Description
  Return absolute path of current executed program.

## Result
  Executable path.
*/

//---------------------------------------------------------------------------

/*!
# os_dlopen
## Declaration
```c
os_dlopen :: fn (lib_name: string) OSLibrary
```
## Description
  Dynamically link native binary from file.

## Arguments
  * `lib_name`
    Name of the library. If lib_name is empty string, then function return 
    handle for main program. 

## Result
  Binary handle.
*/

//---------------------------------------------------------------------------

/*!
# os_dlsym
## Declaration
```c
os_dlsym :: fn (lib: OSLibrary, sym_name: string) *u8
```
## Description
  Get handle of entity from dynamically loaded binary file.

## Arguments
  * `lib`
    Binary handle.
  * `sym_name`
    Name of desired symbol

## Result
  Entity handle or `null`.
*/

//---------------------------------------------------------------------------

/*!
# os_dlclose
## Declaration
```c
os_dlclose :: fn (lib: OSLibrary)
```
## Description
  Close dynamically loaded binary.

## Arguments
  * `lib`
    Binary handle.
*/

//---------------------------------------------------------------------------

/*!
# os_execute
## Declaration
```c
os_execute :: fn (command: string) s32
```
## Description
  Execute command in native shell and return exit code.

## Arguments
  * `command`
    Command to be executed.

## Result
  Execution exit code.
*/
