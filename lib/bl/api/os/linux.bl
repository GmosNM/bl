//************************************************************************************************
// bl
//
// File:   posix.bl 
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/_builtin.bl"

// INCOMPLETE: time_now_ms

OS_KIND :: OSKind.Linux;
OS_NAME :: "Linux";

OS_STDIN  :: 0;
OS_STDOUT :: 1;
OS_STDERR :: 2;

/*
 * Maximum path size in bytes.
 */
OS_PATH_MAX :: 1024;

time_now_ms :: fn () f64 {
    unreachable;
    return 0.0;
};

os_sleep_ms :: fn (ms: f64) {
    usleep(auto ms * 1000.0);
};

/*
 * os_get_real_path 
 *
 * Description:
 *   Find real path of passed file.
 * 
 * Arguments: 
 *   filename: 
 *     Desired existing file name or relative path. 
 *
 * Result: 
 *   Absolute file path.
 */
os_get_real_path :: fn (filename: string) string {
    tmp :: {:[OS_PATH_MAX]u8: 0};
    if realpath(filename.ptr, tmp.ptr) == null {
        return string_copy(filename);
    }

    result :: string_new_cstr(tmp.ptr);
    return result;
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
    return write(fd, buf, count);
};

__os_abort :: fn () #compiler {
    raise(SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, env: **u8) s32 #entry {
    args :: {:[]*u8: argc, argv};
    tmp: [__MAX_ARGS_WITHOUT_ALLOC]string;
    is_allocated :: args.len > tmp.len;

    command_line_arguments.len = args.len;

    if is_allocated {
        command_line_arguments.ptr = auto _mem_alloc_default(sizeof(string) * auto args.len);
        if command_line_arguments.ptr == null { __os_abort(); }
    } else {
        command_line_arguments.ptr = tmp.ptr;
    }

    loop i := 0; i < args.len; i += 1 {
        command_line_arguments[i] = {:string: auto strlen(args[i]), args[i]};
    }

    out :: cast(s32) main();

    if is_allocated {
        _mem_free_default(auto command_line_arguments.ptr);
    }

    return out;
}

#private

SIGHUP  :: 1;
SIGINT  :: 2;
SIGQUIT :: 3; 
SIGILL  :: 4; 
SIGTRAP :: 5;
SIGABRT :: 6;

raise :: fn (sig: s32) s32 #extern;
write :: fn (fd: s32, buf: *u8, count: usize) s32 #extern;
usleep :: fn (us: u32) s32 #extern;
realpath :: fn (path: *u8, resolved_path: *u8) *u8 #extern;