//! ====
//! Sync
//! ====
//! 
//! ::
//! 
//!    #import "std/sync"
//!
//! Multiplatform implementation of various thread synchronization tools.
//! 
//! .. warning:: This module is experimental and not fully supported across all platforms.

#scope Sync

/// Mutex type.
Mutex :: _SyncImpl.Mutex;

/// Initialize mutex. Call :ref:`terminate` when mutex is no longer
/// needed.
init :: fn (mutex: *Mutex) #inline {
    _SyncImpl.init(mutex);
}

/// Terminate mutex.
terminate :: fn (mutex: *Mutex) #inline {
    _SyncImpl.terminate(mutex);
}

/// Lock mutex and enter critical section.
lock :: fn (mutex: *Mutex) #inline {
    _SyncImpl.lock(mutex);
}

try_lock :: fn (mutex: *Mutex) bool #inline {
    return _SyncImpl.try_lock(mutex);
}

/// Unlock previously locked mutex and leave critical section.
unlock :: fn (mutex: *Mutex) #inline {
    _SyncImpl.unlock(mutex);
}
