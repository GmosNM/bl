// =================================================================================================
// bl
//
// File:   utils.bl
// Author: Martin Dorazil
// Date:   4/9/19
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! =====
//! Utils
//! =====
//! 
//! ::
//! 
//!     #load "std/utils.bl"
//! 
//! Set of various utility functions.

is_flag :: fn { is_flag_u64; is_flag_s64; }

/// Converts zero terminated C style string to BL string. Result
/// string shares original memory of `cstr`.
cstr_to_str :: fn (cstr: *u8) string #inline {
    return {:string: auto c_strlen(auto cstr), cstr};
};

/// Produce right-shift of input `ptr` by count of `bytes`.
ptr_shift_bytes :: fn (ptr: *u8, bytes: s64) *u8 #inline {
    return cast(*u8) (cast(s64) ptr + bytes);
};

/// Calculates pointer difference `a` - `b`.
ptr_diff :: fn (a: *u8, b: *u8) s64 #inline {
    return (cast(s64) a) - (cast(s64) b); 
}

/// Reads environemnt variable specified by `var` name. Result is empty
/// in case no such variable was found or has no content. It's caller
/// responsibility to delete result string.
env_get :: fn (var: string) string {
    out :: cast(*u8) c_getenv(auto var.ptr);
    if !out { return String.new(); }
    return String.new(out);
}

/// Sets environment variable.
env_set :: fn (var: string) #inline {
    c_putenv(auto var.ptr);
}

#private
/// Checks whether `v` has set `flag`.
is_flag_u64 :: fn (v: u64, flag: u64) bool #inline {
    return (v & flag) == flag;
};

/// Checks whether `v` has set `flag`.
is_flag_s64 :: fn (v: s64, flag: s64) bool #inline {
    return (v & flag) == flag;
};
