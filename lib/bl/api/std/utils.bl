//************************************************************************************************
// bl
//
// File:   utils.bl
// Author: Martin Dorazil
// Date:   4/9/19
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

/*!
is_flag_u32
===========

Declaration
-----------
::

    is_flag_u32 :: fn (v: u32, flag: u32) bool #inline

Description
-----------
Checks whether `v` has set `flag`.

Result
------
`true` when flag is set.
*/
is_flag_u32 :: fn (v: u32, flag: u32) bool #inline {
    return (v & flag) == flag;
};

/*!
is_flag_s32
===========

Declaration
-----------
::

    is_flag_s32 :: fn (v: u32, flag: u32) bool #inline

Description
-----------
Checks whether `v` has set `flag`.

Result
------
`true` when flag is set.
*/
is_flag_s32 :: fn (v: s32, flag: s32) bool #inline {
    return (v & flag) == flag;
};

/*!
cstr_to_str
===========

Declaration
-----------
::

    cstr_to_str :: fn (cstr: *u8) string #inline

Description
-----------
Converts zero terminated C style string to BL string. New memory block
to hold string's content is allocated, call `string_terminate` when
value is no longer needed.

Result
------
New string.
*/
cstr_to_str :: fn (cstr: *u8) string #inline {
    return {:string: auto c_strlen(auto cstr), cstr};
};

/*!
ptr_shift_bytes
===============

Declaration
-----------
::

    ptr_shift_bytes :: fn (ptr: *u8, bytes: s64) *u8 #inline

Description
-----------
Produce right-shift of input `ptr` by count of `bytes`.

Result
------
Shifted pointer value.
*/
ptr_shift_bytes :: fn (ptr: *u8, bytes: s64) *u8 #inline {
    return cast(*u8) (cast(s64) ptr + bytes);
};

/*!
ptr_diff
========

Declaration
-----------
::

    ptr_diff :: fn (a: *u8, b: *u8) s64 #inline

Description
-----------
Calculates pointer difference `a` - `b`.

Result
------
Pointer difference.
*/
ptr_diff :: fn (a: *u8, b: *u8) s64 #inline {
    return (cast(s64) a) - (cast(s64) b); 
}

