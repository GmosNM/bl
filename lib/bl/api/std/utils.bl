// =================================================================================================
// bl
//
// File:   utils.bl
// Author: Martin Dorazil
// Date:   4/9/19
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! # Utils
//! 
//! `#load "std/utils.bl"`
//! 
//! Set of various utility functions.

// @Incomplete: use named scope!

/// Set `flag` in `flags` input. This function is valid for numeric and enum types (checked by assert).
set_flag :: fn (flags: *?T, flag: T) T #inline {
    assert(flags);
    #if typeinfo(T).kind == TypeKind.ENUM {
        // @Incomplete: Check enums for #flags tag.
        // @Incomplete: Use static switch.
        #if sizeof(T)     == 1 { f := cast(*u8)flags; @f  |= cast(u8) flag;  }
        else if sizeof(T) == 2 { f := cast(*u16)flags; @f |= cast(u16) flag; }
        else if sizeof(T) == 4 { f := cast(*u32)flags; @f |= cast(u32) flag; }
        else if sizeof(T) == 8 { f := cast(*u64)flags; @f |= cast(u64) flag; }
        else { compiler_error("Unsupported type in 'set_flag'"); }
    } else if typeinfo(T).kind == TypeKind.INT {
        @flags |= flag;
    } else {
        compiler_error("Expected number or enumerator type.");
    }
    return @flags;
}

/// Clear `flag` in `flags` input. This function is valid for numeric and enum types (checked by assert).
clr_flag :: fn (flags: *?T, flag: T) T #inline {
    assert(flags);
    #if typeinfo(T).kind == TypeKind.ENUM {
        // @Incomplete: Check enums for #flags tag.
        // @Incomplete: Use static switch.
        #if sizeof(T)     == 1 { f := cast(*u8)flags; @f  &= ~cast(u8) flag;  }
        else if sizeof(T) == 2 { f := cast(*u16)flags; @f &= ~cast(u16) flag; }
        else if sizeof(T) == 4 { f := cast(*u32)flags; @f &= ~cast(u32) flag; }
        else if sizeof(T) == 8 { f := cast(*u64)flags; @f &= ~cast(u64) flag; }
        else { panic("Unsupported type in 'clr_flag' %.", T); }
    } else if typeinfo(T).kind == TypeKind.INT {
        @flags &= ~flag;
    } else {
        compiler_error("Expected number or enumerator type.");
    }
    return @flags;
}

/// Check whether `flag` is set in `flags`. This function is valid for numeric and enum types 
/// (checked by assert).
is_flag :: fn (flags: ?T, flag: T) bool #inline {
    result := false;
    #if typeinfo(T).kind == TypeKind.ENUM {
        // @Incomplete: Check enums for #flags tag.
        // @Incomplete: Use static switch.
        #if sizeof(T)     == 1 { result = (cast(u8)flags & cast(u8)flag) == cast(u8) flag;    }
        else if sizeof(T) == 2 { result = (cast(u16)flags & cast(u16)flag) == cast(u16) flag; }
        else if sizeof(T) == 4 { result = (cast(u32)flags & cast(u32)flag) == cast(u32) flag; }
        else if sizeof(T) == 8 { result = (cast(u64)flags & cast(u64)flag) == cast(u64) flag; }
        else { panic("Unsupported type in 'is_flag' %.", T); }
    } else if typeinfo(T).kind == TypeKind.INT {
        result = (flags & flag) == flag;        
    } else {
        compiler_error("Expected number or enumerator type.");
    }        
    return result;
}

make_flags :: fn (f1: ?T, other: ...T) T {
    result := f1;
    loop i := 0; i < other.len; i += 1 {
        set_flag(&result, other[i]);
    }
    return result;
}

/// Produce right-shift of input `ptr` by count of `bytes`.
ptr_shift_bytes :: fn (ptr: *?T, bytes: s64) *u8 #inline {
    return cast(*u8) (cast(s64) ptr + bytes);
};

/// Calculates pointer difference `a` - `b`.
ptr_diff :: fn (a: *?T1, b: *?T2) s64 #inline {
    return (cast(s64) a) - (cast(s64) b); 
}

/// Reads environment variable specified by `var` name. Result is empty in case no such variable was 
/// found or has no content. It's caller responsibility to delete result string.
env_get :: fn (var: string_view) string {
    out :: cast(*u8) C.getenv(std.strtoc(var));
    if !out { return std.str_new(); }
    return std.str_new(out);
}

/// Sets environment variable.
env_set :: fn (var: string_view, value: string_view) #inline {
    tmp :: sprint("%=%", var, value);
    defer std.str_delete(&tmp);
    C.putenv(std.strtoc(tmp));
}

/// Sets seed for `std.rand` or utility function [random_number](#random_number) based on current 
/// system tick time.
random_seed_time :: fn () #inline {
    C.srand(auto os_tick_ms());
}

/// Generates random number in specified range <min, max> using standard libc rand generator.
/// Random number generator seed is supposed to be set by :ref:`random_seed_time` or by `std.srand` 
/// call.
random_number :: fn (min := 0, max := 1) s32 #inline {
    return C.rand() % (max + 1 - min) + min;
}

/// Polymorph slice sorting utility.
/// @INCOMPLETE
sort :: fn (list: []?T, cmp: *fn(a: *T, b: *T) bool) {
    assert(cmp);
    loop i := 0; i < list.len; i += 1 {
        loop j := i+1; j < list.len; j += 1 {
            if cmp(&list[i], &list[j]) {
                swap(&list[i], &list[j]);
            }
        }
    }
}

/// Iterate over `arr` slice and return pointer to the value and it's index if `func` validator
/// function returs true.
///
/// The `func` is called for every element in the `arr` slice and pointer to the current element
/// is passed into this function.
///
/// In case no element was found, function returns null pointer and -1 index.
find_if :: fn (arr: []?T, func: *fn (*T) bool) (value: *T, index: s64) #inline {
    assert(func);
    loop i := 0; i < arr.len; i += 1 {
        if func(&arr[i]) { return &arr[i], i; }
    }
    return null, -1;
}

/// Combine two or more hashes into one, T is expected to be an integer type (checked by static
/// assert).
hash_combine :: fn (first: ?T, second: T, more: ...T) T #inline {
    static_assert(typeinfo(T).kind == TypeKind.INT);
    result := first ^ (second + (cast(T)0x9e3779b9) + (first << 6) + (first >> 2));
    loop i := 0; i < more.len; i += 1 {
        // Just copy paste this again to avoid recursion.
        result = result ^ (more[i] + (cast(T)0x9e3779b9) + (result << 6) + (result >> 2));
    }
    return result;
}

/// Check whether the number `n` is power of 2.
is_power_of_two :: fn (n: usize) bool #inline {
    return (n != 0) && ((n & (n - 1)) == 0);
}

/// Finds next power of 2.
next_pow_2 :: fn (n: s64) s64 #inline {
    value : s64 = 1;
    loop (value <= n) {
        value = value << 1;
    }
    return value;
}
