//************************************************************************************************
// bl
//
// File:   memory.bl
// Author: Martin Dorazil
// Date:   13/8/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/utils.bl"

/*
 * @title mem_alloc 
 *
 * @decl mem_alloc :: fn (size: usize) *u8
 * @desc
 * Allocate memory on the heap. Allocated memory must be freed with [[MEM_FREE][=mem_free=]].
 * @ver 0.4.2
 */
mem_alloc :: fn (size: usize) *u8 {
    return malloc(size);
};

mem_calloc :: fn (size: usize) *u8 {
    return calloc(size);
};

/*
 * @title mem_realloc <<MEM_FREE>>
 *
 * @decl mem_realloc :: fn (ptr: *u8, size: usize) *u8 
 * @desc
 * Reallocate memory on the heap and copy data from previous allocation. Allocated memory must 
 * be freed with [[MEM_FREE][=mem_free=]].
 * @ver 0.4.2
 */
mem_realloc :: fn (ptr: *u8, size: usize) *u8 {
    return realloc(ptr, size);
};

/*
 * @title mem_free <<MEM_FREE>>
 *
 * @decl mem_free :: fn (ptr: *u8) 
 * @desc
 * Free allocated memory.
 * @ver 0.4.2
 */
mem_free :: fn (ptr: *u8) {
    free(ptr);
};

/*
 * @title mem_copy
 *
 * @decl mem_copy :: fn (dest: *u8, src: *u8, size: usize)
 * @desc
 * Copy count of bytes from source to destination.
 * @ver 0.4.2
 */
mem_copy :: fn (dest: *u8, src: *u8, size: usize) {
    m := size / sizeof(u64);
    d := size - m * sizeof(u64);

    loop i := 0; i < m; i += 1 {
        tmp := cast(*u64) dest;
        ^tmp = ^cast(*u64) src;

        dest = ptr_shift_bytes(dest, sizeof(u64));
        src = ptr_shift_bytes(src, sizeof(u64));
    }
    
    loop i := 0; i < d; i += 1 {
        tmp := dest;
        ^dest = ^src;

        dest = ptr_shift_bytes(dest, 1);
        src = ptr_shift_bytes(src, 1);
    }
};