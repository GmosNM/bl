//************************************************************************************************
// bl
//
// File:   memory.bl
// Author: Martin Dorazil
// Date:   13/8/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/basic.bl"
#load "std/utils.bl"

/*
 * mem_alloc
 * 
 * Description:
 *   Allocates count of bytes on heap using default allocator.
 *   Use mem_free to free allocated memory when it's no longer
 *   needed. Cause panic when allocation is not possible.
 * 
 * Arguments: 
 *   size: 
 *     Bytes to be allocated. 
 *
 * Result: 
 *   Pointer to begin of the new allocated block of memory.
 */
mem_alloc :: fn (size: usize) *u8 {
    mem :: _context.alloc_fn(size); 
    if mem == null { panic("Bad alloc"); }
    return mem;
};

/*
 * mem_calloc
 * 
 * Description:
 *   Allocates count of bytes on heap using default allocator and
 *   return pointer to begin of this allocated block. Resulting
 *   block is set to 0 value.
 *   Use mem_free to free allocated memory when it's no longer
 *   needed.
 * 
 * Arguments: 
 *   num: 
 *     Count of items to be allocated. 
 * 
 *   size: 
 *     Item size in bytes. 
 *
 * Result: 
 *   Pointer to begin of the new allocated block of memory.
 */
mem_calloc :: fn (num: usize, size: usize) *u8 {
    tmp := _context.alloc_fn(size * num);
    return mem_set(tmp, 0, size * num);
};

/*
 * mem_free
 * 
 * Description:
 *   Free memory alocated on heap. This function use default
 *   deallocator '_context.free_fn'.
 * 
 * Arguments: 
 *   ptr: 
 *     Memory to be deallocated. 
 * 
 */
mem_free :: fn (ptr: *u8) {
    _context.free_fn(ptr);
};

/*
 * mem_copy
 * 
 * Description:
 *   Copy memory of defined size from source to destination.
 * 
 * Arguments: 
 *   dest: 
 *     Pointer to destination memory. 
 * 
 *   src: 
 *     Pointer to source memory. 
 *
 *   size: 
 *     Count of bytes to be copied. 
 * 
 */
mem_copy :: fn (dest: *u8, src: *u8, size: usize) {
    m := size / sizeof(u64);
    d := size - m * sizeof(u64);

    loop i : usize = 0; i < m; i += 1 {
        tmp := cast(*u64) dest;
        ^tmp = ^cast(*u64) src;

        dest = ptr_shift_bytes(dest, auto sizeof(u64));
        src = ptr_shift_bytes(src, auto sizeof(u64));
    }
    
    loop i : usize = 0; i < d; i += 1 {
        tmp := dest;
        ^dest = ^src;

        dest = ptr_shift_bytes(dest, 1);
        src = ptr_shift_bytes(src, 1);
    }
};

/*
 * mem_set
 * 
 * Description:
 *   Set memory to desired value.
 * 
 * Arguments: 
 *   _dest: 
 *     Pointer to target memory block. 
 * 
 *   v: 
 *     Desired value. 
 *
 *   size: 
 *     Count of bytes to be set. 
 * 
 * Result:
 *   Pointer to destination memory. 
 */
mem_set :: fn (_dest: *u8, v: u8, size: usize) *u8 {
    dest := {:[]u8: auto size, _dest};
    loop i := 0; i < dest.len; i += 1 {
        dest[i] = v;
    }

    return dest.ptr;
}

_mem_alloc_default :: fn (size: usize) *u8 {
    return c_malloc(size);
}

_mem_free_default :: fn (ptr: *u8) {
    c_free(ptr);
}
