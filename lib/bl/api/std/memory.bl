//************************************************************************************************
// bl
//
// File:   memory.bl
// Author: Martin Dorazil
// Date:   13/8/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/basic.bl"
#load "std/utils.bl"

/*
 * Allocate memory using _context.alloc_fn (by default malloc).
 */
mem_alloc :: fn (size: usize) *u8 {
    return _context.alloc_fn(size); 
};

/*
 * Allocate memory using _context.alloc_fn (by default malloc) and set
 * it to 0.
 */
mem_calloc :: fn (num: usize, size: usize) *u8 {
    tmp := _context.alloc_fn(size * num);
    return mem_set(tmp, 0, size * num);
};

/*
 * Free memory allocated by mem_alloc or mem_calloc.
 */
mem_free :: fn (ptr: *u8) {
    _context.free_fn(ptr);
};

/*
 * Copy 'size' count of bytes from src to dest.
 */
mem_copy :: fn (dest: *u8, src: *u8, size: usize) {
    m := size / sizeof(u64);
    d := size - m * sizeof(u64);

    loop i : usize = 0; i < m; i += 1 {
        tmp := cast(*u64) dest;
        ^tmp = ^cast(*u64) src;

        dest = ptr_shift_bytes(dest, sizeof(u64));
        src = ptr_shift_bytes(src, sizeof(u64));
    }
    
    loop i : usize = 0; i < d; i += 1 {
        tmp := dest;
        ^dest = ^src;

        dest = ptr_shift_bytes(dest, 1);
        src = ptr_shift_bytes(src, 1);
    }
};

/*
 * Set 'size' count of bytes in '_dest' memory to 'v'.
 */
mem_set :: fn (_dest: *u8, v: u8, size: usize) *u8 {
    dest := {:[]u8: auto size, _dest};
    loop i := 0; i < dest.len; i += 1 {
        dest[i] = v;
    }

    return dest.ptr;
}
