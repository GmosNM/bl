//************************************************************************************************
// bl
//
// File:   _array.bl
// Author: Martin Dorazil
// Date:   12/5/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

_Array :: struct #compiler {
    len: s64;
    ptr: *u8;
    allocated: usize;
}

array_init :: fn (_arr: Any) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    arr.ptr = null;
    arr.len = 0;
    arr.allocated = 0;
}

array_terminate :: fn (_arr: Any) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    free(arr.ptr);
    arr.ptr = null;
    arr.len = 0;
    arr.allocated = 0;
}

array_push :: fn (_arr: Any, v: Any) #compiler {
    arr := cast(*_Array) _arr.data;
    if v.data == null { panic("Invalid value (null)."); }

    elem_size :: v.type_info.size_bytes;

    arr.len += 1;
    ensure_space(arr, elem_size, auto arr.len, false);

    dest :: get_elem_ptr(arr, elem_size, arr.len - 1);
    memcpy(dest, v.data, elem_size);
};

array_reserve :: fn (_arr: Any, size: usize) #compiler {
    arr := cast(*_Array) _arr.data;
    if size == 0 { return; }
    elem_size :: get_elem_size(_arr.type_info);
    ensure_space(arr, elem_size, size, true);
};

array_erase :: fn (_arr: Any, i: s64) #compiler {
    arr := cast(*_Array) _arr.data;
    if i >= arr.len { panic("Index overflow!"); }
    if i == arr.len - 1 { 
        arr.len -= 1; 
        return;
    }

    elem_size :: get_elem_size(_arr.type_info);

    memcpy(
            get_elem_ptr(arr, elem_size, i), 
            get_elem_ptr(arr, elem_size, arr.len - 1), 
            elem_size
    );

    arr.len -= 1;
};

array_clear :: fn (_arr: Any) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    arr.len = 0;
};

#private
ALLOC_BLOCK_SIZE : usize : 32;

get_elem_size :: fn (T: *TypeInfo) usize #inline {
    a :: cast(*TypeInfoStruct) T;
    elem_type :: a.members[1].base_type;
    return (cast(*TypeInfoPtr) elem_type).pointee_type.size_bytes;
}

get_elem_ptr :: fn (arr: *_Array, elem_size: usize, i: s64) *u8 #inline {
    if i >= arr.len {
        panic("Element index out of range, index is % but array size is %.", i, arr.len);
    }

    return ptr_shift_bytes(arr.ptr, i * cast(s64) elem_size);
};

ensure_space :: fn (arr: *_Array, elem_size: usize, space: usize, exact: bool) {
    if space == 0 { return; }
    if arr.allocated >= space { return; }

    if arr.allocated == 0 {
        if !exact { space = ALLOC_BLOCK_SIZE; }
    } else {
        space *= 2;
    }

    tmp := arr.ptr;

    arr.ptr = alloc(space * elem_size); 
    if tmp != null {
        memcpy(arr.ptr, tmp, arr.allocated * elem_size);
        free(tmp);
    }
    
    arr.allocated = space;
};
