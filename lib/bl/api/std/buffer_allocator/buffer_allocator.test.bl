#import "std/buffer_allocator"

#private

test_allocation :: fn () #test {
    using std;
    mem: [512]u8;
    buf :: buffer_allocator_make(mem);

    TEST_COUNT :: 10;
    data: [TEST_COUNT]*s32;
    loop i := 0; i < TEST_COUNT; i += 1 {
        m, err :: alloc(sizeof(s32), alignof(s32), &buf);
        test_ok(err);
        test_not_null(m);
        data[i] = auto m;
        @data[i] = i;
    }
    loop i := 0; i < TEST_COUNT; i += 1 {
        test_eq(@data[i], i);
    }
}

test_reallocation :: fn () #test {
    using std;
    mem: [512]u8;
    buf :: buffer_allocator_make(mem);

    m1, err1 :: realloc(null, 0, sizeof(s32), alignof(s32), &buf);
    test_ok(err1);
    test_not_null(m1);
    first := cast(*s32) m1;
    @first = 10;

    m2, err2 :: realloc(m1, sizeof(s32), sizeof(s32), alignof(s32), &buf);
    test_ok(err2);
    test_not_null(m2);
    second := cast(*s32) m2;
    test_eq(@first, @second);
}

test_reallocation2 :: fn () #test {
    using std;
    mem: [512]u8;
    buf :: buffer_allocator_make(mem);

    m1, err1 :: realloc(null, 0, sizeof(s32), alignof(s32), &buf);
    test_ok(err1);
    test_not_null(m1);

    m2, err2 :: realloc(m1, sizeof(s32), sizeof(s64), alignof(s32), &buf);
    test_ok(err2);
    test_not_null(m2);
}

test_full_buffer :: fn () #test {
    using std;
    mem: [512]u8;
    buf :: buffer_allocator_make(mem);


    loop {
        m, err :: alloc(sizeof(s32), alignof(s32), &buf);
        if err {
            break;
        }
        test_not_null(m);
    }
}

test_reset :: fn () #test {
    using std;
    mem: [512]u8;
    buf :: buffer_allocator_make(mem);

    loop j := 0; j < 4; j += 1 {
        loop i := 0; i < 50; i += 1 {
            m, err :: alloc(sizeof(s32), alignof(s32), &buf);
            test_ok(err);
            test_not_null(m);
        }

        buffer_allocator_reset(&buf);
        test_eq(buf.used_bytes, 0);
    }
}
