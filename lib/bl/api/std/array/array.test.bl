#import "std/test"
#import "std/debug_allocator"

#import "std/array"

main :: fn () s32 {
    DebugAllocator.init();
    defer DebugAllocator.terminate();
    return test_run();    
}

#private
test_basic_inserting_s32 :: fn () #test {
    arr: [..]s32;
    defer array_terminate(&arr);
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, i);
    }
    loop i := 0; i < arr.len; i += 1 {
        test_eq(arr[i], i);
    }
}

test_basic_inserting_bool :: fn () #test {
    arr: [..]bool;
    defer array_terminate(&arr);
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, true);
    }
    loop i := 0; i < arr.len; i += 1 {
        test_true(arr[i]);
    }
}

test_basic_inserting_string :: fn () #test {
    arr: [..]string;
    defer array_terminate(&arr);
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, "Hello!!!");
    }
    loop i := 0; i < arr.len; i += 1 {
        test_eq(arr[i].len, 8);
    }
}

test_reserve :: fn () #test {
    arr: [..]s32;
    defer array_terminate(&arr);
            
    array_reserve(&arr, 1000);
    test_eq(arr.len, 0);
    test_not_null(arr.ptr);
    test_eq(arr.allocated, 1000);
}

test_clear :: fn () #test {
    arr: [..]s32;
    defer array_terminate(&arr);
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, i);
    }
    test_eq(arr.len, 1000);
    array_clear(&arr);
    test_eq(arr.len, 0);
}

test_erase :: fn () #test {
    arr: [..]s32;
    defer array_terminate(&arr);
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, i);
    }
    test_eq(arr.len, 1000);
    loop arr.len > 0 {
        array_erase(&arr, 0);
    }
    test_eq(arr.len, 0);
}

test_cast_to_slice :: fn () #test {
    foo :: fn (sl: []s32) {
        loop i := 0; i < sl.len; i += 1 {
            test_eq(sl[i], i);
        }
    };

    bar :: fn () []*s32 {
        arr: [..]*s32;
        return arr;
    };

    arr: [..]s32;
    defer array_terminate(&arr);

    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, i);
    }

    {
        sl: []s32 = arr;
        loop i := 0; i < sl.len; i += 1 {
            test_eq(sl[i], i);
        }
    }

    {
        sl : []s32 : arr;
        loop i := 0; i < sl.len; i += 1 {
            test_eq(sl[i], i);
        }
    }

    foo(arr);
}

alloc_count := 0;
free_count := 0;

test_allocator :: {:Allocator: &test_allocator_handler };

test_allocator_handler :: fn (_: *Allocator, operation: AllocOp, size: usize, ptr : *u8 = null, file := String.empty, line := 0) *u8 {
    switch operation {
        AllocOp.Allocate {
            alloc_count += 1;
            return c_malloc(size);
        }
        AllocOp.Free {
            free_count += 1;
            c_free(ptr);
        }
        AllocOp.Release;
        default { panic(); }
    }
    return null;
}

test_custom_allocator :: fn () #test {
    alloc_count = 0;
    free_count = 0;

    arr: [..]s32;
    array_init(&arr, &test_allocator);
            
    loop i := 0; i < 1000; i += 1 {
        array_push(&arr, i);
    }

    loop i := 0; i < arr.len; i += 1 {
        test_eq(arr[i], i);
    }
    array_terminate(&arr);
    test_eq(alloc_count, 6);
    test_eq(alloc_count, free_count);
}
