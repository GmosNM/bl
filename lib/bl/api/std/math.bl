//************************************************************************************************
// bl
//
// File:   math.bl 
// Author: Martin Dorazil
// Date:   11/3/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

/*!
# Math constants
## Declaration
```c
PI          :: 3.141592653589793;
TWO_PI      :: 6.283185307179587;
HALF_PI     :: 1.570796326794897;
F32_EPSILON :: 0.00001f;
```

## Description
  Useful constants.
*/
PI          :: 3.141592653589793;
TWO_PI      :: 6.283185307179587;
HALF_PI     :: 1.570796326794897;
F32_EPSILON :: 0.00001f;
F64_EPSILON :: 0.00001;

/*!
# Limits
## Declaration
```c
S8_MIN  : s8 : -128;
S8_MAX  : s8 : 127;
S16_MIN : s16 : -32768;
S16_MAX : s16 : 32767;
S32_MIN : s32 : -2147483648;
S32_MAX : s32 : 2147483647;
S64_MIN : s64 : -9223372036854775808;
S64_MAX : s64 : 9223372036854775807;

U8_MIN  : u8 : 0;
U8_MAX  : u8 : 255;
U16_MIN : u16 : 0;
U16_MAX : u16 : 65535;
U32_MIN : u32 : 0;
U32_MAX : u32 : 4294967295;
U64_MIN : u64 : 0;
U64_MAX : u64 : 18446744073709551615;
```

## Description
  Maximum and minimum value constants for various data types.
*/
S8_MIN  : s8 : -128;
S8_MAX  : s8 : 127;
S16_MIN : s16 : -32768;
S16_MAX : s16 : 32767;
S32_MIN : s32 : -2147483648;
S32_MAX : s32 : 2147483647;
S64_MIN : s64 : -9223372036854775808;
S64_MAX : s64 : 9223372036854775807;

U8_MIN  : u8 : 0;
U8_MAX  : u8 : 255;
U16_MIN : u16 : 0;
U16_MAX : u16 : 65535;
U32_MIN : u32 : 0;
U32_MAX : u32 : 4294967295;
U64_MIN : u64 : 0;
U64_MAX : u64 : 18446744073709551615;

sin       :: fn { f32_sin; f64_sin; }
cos       :: fn { f32_cos; f64_cos; }
asin      :: fn { f32_asin; f64_asin; }
acos      :: fn { f32_acos; f64_acos; }
floor     :: fn { f32_floor; f64_floor; }
round     :: fn { f32_round; f64_round; }
pow       :: fn { f32_pow; f64_pow; }
log       :: fn { f32_log; f64_log; }
log2      :: fn { f32_log2; f64_log2; }
log10     :: fn { f32_log10; f64_log10; }
sqrt      :: fn { f32_sqrt; f64_sqrt; }
ceil      :: fn { f32_ceil; f64_ceil; }
tan       :: fn { f32_tan; f64_tan; }
atan2     :: fn { f32_atan2; f64_atan2; }
copysign  :: fn { f32_copysign; f64_copysign; }

/* Lib C functions */
rand  :: fn () s32 #extern;
srand :: fn (seed: u32) #extern;
qsort :: fn (base: *c_void_ptr, nitems: c_size_t, size: c_size_t, compar: *fn (c_void_ptr, c_void_ptr) c_int) #extern;
/* Lib C functions */

abs :: fn { f32_abs; f64_abs; }
compare :: fn { f32_compare; f64_compare; }
degtorad :: fn { f32_degtorad; f64_degtorad; }
radtodeg :: fn { f32_radtodeg; f64_radtodeg; }
max :: fn { s32_max; s64_max; }
min :: fn { s32_min; s64_min; }

lerp :: fn (a: f32, b: f32, fraction: f32) f32 #inline {
    return a + fraction * (b - a);
};

#private
f32_sin   :: fn (n: f32) f32 #intrinsic "sin.f32";
f64_sin   :: fn (n: f64) f64 #intrinsic "sin.f64";
f32_cos   :: fn (n: f32) f32 #intrinsic "cos.f32";
f64_cos   :: fn (n: f64) f64 #intrinsic "cos.f64";
f32_floor :: fn (n: f32) f32 #intrinsic "floor.f32";
f64_floor :: fn (n: f64) f64 #intrinsic "floor.f64";
f32_round :: fn (n: f32) f32 #intrinsic "round.f32";
f64_round :: fn (n: f64) f64 #intrinsic "round.f64";
f32_pow   :: fn (base: f32, exponent: f32) f32 #intrinsic "pow.f32";
f64_pow   :: fn (base: f64, exponent: f64) f64 #intrinsic "pow.f64";
f32_log   :: fn (n: f32) f32 #intrinsic "log.f32";
f64_log   :: fn (n: f64) f64 #intrinsic "log.f64";
f32_log2  :: fn (n: f32) f32 #intrinsic "log2.f32";
f64_log2  :: fn (n: f64) f64 #intrinsic "log2.f64";
f32_log10 :: fn (n: f32) f32 #intrinsic "log10.f32";
f64_log10 :: fn (n: f64) f64 #intrinsic "log10.f64";
f32_sqrt  :: fn (n: f32) f32 #intrinsic "sqrt.f32";
f64_sqrt  :: fn (n: f64) f64 #intrinsic "sqrt.f64";
f32_ceil  :: fn (x: f32) f32 #intrinsic "ceil.f32";
f64_ceil  :: fn (x: f64) f64 #intrinsic "ceil.f64";

/* Lib C functions */
f32_asin     :: fn (arg: f32) f32 #extern "asinf";
f64_asin     :: fn (arg: f64) f64 #extern "asin";
f32_acos     :: fn (n: f32) f32 #extern "acosf";
f64_acos     :: fn (n: f64) f64 #extern "acos";
f32_tan      :: fn (x: f32) f32 #extern "tanf";
f64_tan      :: fn (x: f64) f64 #extern "tan";
f32_atan2    :: fn (y: f32, x: f32) f32 #extern "atan2f";
f64_atan2    :: fn (y: f64, x: f64) f64 #extern "atan2";
f32_copysign :: fn (x: f32, y: f32) f32 #extern "copysingf";
f64_copysign :: fn (x: f64, y: f64) f64 #extern "copysing";
/* Lib C functions */

f32_abs :: fn (v: f32) f32 #inline {
    if v < 0.f { return -v; }
    return v;
}

f64_abs :: fn (v: f64) f64 #inline {
    if v < 0. { return -v; }
    return v;
}

f32_compare :: fn (a: f32, b: f32, epsilon := F32_EPSILON) bool #inline {
    return abs(a - b) < epsilon;
};

f64_compare :: fn (a: f64, b: f64, epsilon := F64_EPSILON) bool #inline {
    return abs(a - b) < epsilon;
};

f32_degtorad :: fn (deg: f32) f32 #inline {
    return deg / 180.f * cast(f32) PI;
};

f32_radtodeg :: fn (rad: f32) f32 #inline {
    return (180.f * rad) / cast(f32) PI;
};

f64_degtorad :: fn (deg: f64) f64 #inline {
    return deg / 180. * PI;
};

f64_radtodeg :: fn (rad: f64) f64 #inline {
    return (180. * rad) / PI;
};

s32_max :: fn (a: s32, b: s32) s32 #inline { 
    if a > b { return a; }
    return b;
}

s64_max :: fn (a: s64, b: s64) s64 #inline { 
    if a > b { return a; }
    return b;
}

s32_min :: fn (a: s32, b: s32) s32 #inline { 
    if a < b { return a; }
    return b;
}

s64_min :: fn (a: s64, b: s64) s64 #inline { 
    if a < b { return a; }
    return b;
}

