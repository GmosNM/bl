//************************************************************************************************
// bl
//
// File:   math.bl 
// Author: Martin Dorazil
// Date:   11/3/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

PI :: 3.141592653589793238;
F32_EPSILON :: 0.00001f;

/* Lib C functions */
sin     :: fn (n: f64) f64 #extern;
cos     :: fn (n: f64) f64 #extern;
fabs    :: fn (n: f32) f32 #extern;
log10   :: fn (n: f64) f64 #extern;
pow     :: fn (base: f64, exponent: f64) f64 #extern;
sqrt    :: fn (x: f64) f64 #extern;
floor   :: fn (x: f64) f64 #extern;
rand    :: fn () s32 #extern;
srand   :: fn (seed: u32) #extern;
sinf    :: fn (n: f32) f32 #extern;
cosf    :: fn (n: f32) f32 #extern;
powf    :: fn (base: f32, exponent: f32) f32 #extern;
sqrtf   :: fn (x: f32) f32 #extern;
floorf  :: fn (x: f32) f32 #extern;
tanf    :: fn (x: f32) f32 #extern;
/* Lib C functions */

//************************************************************************************************
// Types
//************************************************************************************************
v2 :: struct {
    x: f32,
    y: f32
};

v3 :: struct {
    x: f32,
    y: f32,
    z: f32,
};

iv2 :: struct {
    x: s32,
    y: s32
};

iv3 :: struct {
    x: s32,
    y: s32,
    z: s32,
};

/**
 * Matrix layout
 * | m[0]  m[1]  m[2]  m[3]  |
 * | m[4]  m[5]  m[6]  m[7]  |
 * | m[8]  m[9]  m[10] m[11] |
 * | m[12] m[13] m[14] m[15] |
 */
mat4 :: [4][4]f32;

//************************************************************************************************
// Functions
//************************************************************************************************
lerp :: fn (a: f32, b: f32, fraction: f32) f32 #inline {
    return a + fraction * (b - a);
};

u32_max :: fn (a: u32, b: u32) u32 #inline {
    if a > b { return a; } 
    return b;
};

u32_min :: fn (a: u32, b: u32) u32 #inline {
    if a < b { return a; } 
    return b;
};

f32_compare :: fn (a: f32, b: f32) bool #inline {
    return fabs(a - b) < F32_EPSILON;
};

v3_length :: fn (v: v3) f32 #inline {
    return sqrtf(v.x * v.x + v.y * v.y + v.z * v.z);
};

v3_cross :: fn (a: v3, b: v3) v3 #inline {
    out: v3;
    out.x = a.y * b.z - a.z * b.y;
    out.y = a.z * b.x - a.x * b.z;
    out.z = a.x * b.y - a.y * b.x;
    return out;
};

v3_dot :: fn (a: v3, b: v3) f32 #inline {
    return a.x * b.x + a.y * b.y + a.z * b.z;
};

v3_sub :: fn (a: v3, b: v3) v3 #inline {
    a.x -= b.x;
    a.y -= b.y;
    a.z -= b.z;
    return a;
};

v3_normalize :: fn (a: v3) v3 #inline {
    out := {:v3: 0};
    l := v3_length(a);

    if f32_compare(l, 0.f) { return out; }

    out.x = a.x / l;
    out.y = a.y / l;
    out.z = a.z / l;

    return out;
};

v3_muls :: fn (a: v3, s: f32) v3 #inline {
    a.x *= s;
    a.y *= s;
    a.z *= s;
    return a;
};

v3_add :: fn (a: v3, b: v3) v3 #inline 
{
    a.x += b.x;
    a.y += b.y;
    a.z += b.z;
    return a;
};

mat4_init :: fn (out_mat: *mat4,
                  m00: f32, m10: f32, m20: f32, m30: f32,
                  m01: f32, m11: f32, m21: f32, m31: f32,
                  m02: f32, m12: f32, m22: f32, m32: f32,
                  m03: f32, m13: f32, m23: f32, m33: f32) #inline
{
    (^out_mat)[0][0] = m00;
    (^out_mat)[1][0] = m10;
    (^out_mat)[2][0] = m20;
    (^out_mat)[3][0] = m30;
    (^out_mat)[0][1] = m01;
    (^out_mat)[1][1] = m11;
    (^out_mat)[2][1] = m21;
    (^out_mat)[3][1] = m31;
    (^out_mat)[0][2] = m02;
    (^out_mat)[1][2] = m12;
    (^out_mat)[2][2] = m22;
    (^out_mat)[3][2] = m32;
    (^out_mat)[0][3] = m03;
    (^out_mat)[1][3] = m13;
    (^out_mat)[2][3] = m23;
    (^out_mat)[3][3] = m33;
};

mat4_identity :: fn (out_mat: *mat4) #inline {
    mat4_init(out_mat,
        1.f, 0.f, 0.f, 0.f,
        0.f, 1.f, 0.f, 0.f,
        0.f, 0.f, 1.f, 0.f,
        0.f, 0.f, 0.f, 1.f
    );
};

mat4_perspective :: fn (out_mat: *mat4, fov_rad: f32, aspect: f32, near: f32, far: f32) #inline {
    f := 1.f / tanf(fov_rad / 2.f);

    mat4_init(out_mat,
               f / aspect, 0.f, 0.f, 0.f,
               0.f, f, 0.f, 0.f,
               0.f, 0.f, (far + near) / (near - far), (2.f * far * near) / (near - far),
               0.f, 0.f, -1.f, 0.f
    );
};

mat4_look_at :: fn (out_mat: *mat4, eye: v3, target: v3, up: v3) #inline {
    z := v3_sub(target, eye);
    z = v3_normalize(z);
    z = v3_muls(z, -1.f);
    x := v3_cross(up, z);
    x = v3_normalize(x);
    y := v3_cross(z, x);

    mat4_init(out_mat,
              x.x, x.y, x.z, v3_dot(eye, x),
              y.x, y.y, y.z, -v3_dot(eye, y),
              z.x, z.y, z.z, -v3_dot(eye, z),
              0.f, 0.f, 0.f, 1.f);
};

degtorad :: fn (deg: f32) f32 #inline {
    return deg / 180.f * auto PI;
};


radtodeg :: fn (rad: f32) f32 #inline {
    return (180.f * rad) / auto PI;
};

mat4_rotate_x :: fn (out_mat: *mat4, angle_deg: f32) #inline {
    angle := degtorad(angle_deg);
    s := sinf(angle);
    c := cosf(angle);

    mat4_init(out_mat, 
        1.f, 0.f, 0.f, 0.f,
        0.f, c, -s, 0.f,
        0.f, s, c, 0.f,
        0.f, 0.f, 0.f, 1.f
    );
};

mat4_rotate_y :: fn (out_mat: *mat4, angle_deg: f32) #inline {
    angle := degtorad(angle_deg);
    s := sinf(angle);
    c := cosf(angle);

    mat4_init(out_mat, 
        c, 0.f, s, 0.f,
        0.f, 1.f, 0.f, 0.f,
        -s, 0.f, c, 0.f,
        0.f, 0.f, 0.f, 1.f
    );
};

mat4_rotate_z :: fn (out_mat: *mat4, angle_deg: f32) #inline {
    angle := degtorad(angle_deg);
    s := sinf(angle);
    c := cosf(angle);

    mat4_init(out_mat, 
        c, -s, 0.f, 0.f,
        s, c, 0.f, 0.f,
        0.f, 0.f, 1.f, 0.f,
        0.f, 0.f, 0.f, 1.f
    );
};

