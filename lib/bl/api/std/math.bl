//************************************************************************************************
// bl
//
// File:   math.bl 
// Author: Martin Dorazil
// Date:   11/3/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

PI :: 3.141592653589793238;

/* Lib C functions */
sin     :: fn (n: f64) f64 #extern;
cos     :: fn (n: f64) f64 #extern;
fabs    :: fn (n: f32) f32 #extern;
log10   :: fn (n: f64) f64 #extern;
pow     :: fn (base: f64, exponent: f64) f64 #extern;
sqrt    :: fn (x: f64) f64 #extern;
floor   :: fn (x: f64) f64 #extern;
rand    :: fn () s32 #extern;
srand   :: fn (seed: u32) #extern;
sinf    :: fn (n: f32) f32 #extern;
cosf    :: fn (n: f32) f32 #extern;
powf    :: fn (base: f32, exponent: f32) f32 #extern;
sqrtf   :: fn (x: f32) f32 #extern;
floorf  :: fn (x: f32) f32 #extern;
/* Lib C functions */

Vec2 :: struct {
    x: f32,
    y: f32
};

Vec3 :: struct {
    x: f32,
    y: f32,
    z: f32,
};

iVec2 :: struct {
    x: s32,
    y: s32
};

iVec3 :: struct {
    x: s32,
    y: s32,
    z: s32,
};

lerp :: fn (a: f32, b: f32, fraction: f32) f32 {
    return a + fraction * (b - a);
};
