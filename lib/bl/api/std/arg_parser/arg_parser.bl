//! ============================
//! Command Line Argument Parser
//! ============================
//! 
//! ::
//! 
//!    #import "std/arg_parser"
//!
//! Generic command line argument parsing tool.
//! 
//! Example
//! -------
//! .. literalinclude:: /examples/docs/014.bl
//!    :language: bl

#import "std/array"

#scope arg_parser

/// Arguments context base type.
Ctx :: struct {
    /// Contains other arguments not considered as options (i.e. input files).
    other: []string;
    /// True when help was invoked implicitly.
    help: bool;
}

/// Argument parser opaque handle.
Parser :: *u8;

/// Argument parser callback function type. In context of :ref:`add`
/// this callback function provides current `parser`, rest of the input argument
/// slice starting from currently captured argument name and custom argument context `ctx`.
/// Expected return of such function is count of parsed arguments from `args` input (at least
/// one for successfully parsed argument with no additional input) and status.
///
/// See also: :ref:`add`
HandlerFn :: *fn (parser: Parser, args: []string, ctx: *Ctx) (s32, Error);

/// Create new instance of parser with possibility to set custom help text. Use
/// :ref:`delete` to release parser instance.
new :: fn (help_text := strings.empty) Parser {
    parser := cast(*ParserImpl) alloc(sizeof(ParserImpl));
    parser.pad = 0;
    parser.help_text = strings.new(help_text);
    array_init(parser.entries);

    add(auto parser,
        "-h",
        "--help",
        "Print this help.",
        &fn (parser: Parser, args: []string, ctx: *Ctx) (s32, Error) {
            if ctx { ctx.help = true; }
            print_help(parser);
            return 1, ok();
        });

    return auto parser;
}

/// Delete parser instance.
delete :: fn (_parser: Parser) {
    parser: *ParserImpl = auto _parser;
    loop i := 0; i < parser.entries.len; i += 1 {
        entry_delete(&parser.entries[i]);
    }
    array_terminate(parser.entries);
    strings.delete(parser.help_text);
    free(auto parser);
}

/// Perform parsing on input `args` slice and provide `ctx` as context to the argument parsing
/// callbacks. `start` specify first element of `args` slice considered to be an argument.
/// See also: :ref:`command_line_arguments` (note: first element contains name of the executable)
run :: fn (_parser: Parser, args: []string, ctx: *Ctx, start := 0) Error {
    parser: *ParserImpl = auto _parser;
    if start >= args.len {
        return ok();
    } else {
        args.ptr = &args[start];
        args.len -= start;
    }

    loop args.len > 0 {
        arg :: &args[0];
        if arg.len > 0 && (^arg)[0] != '-' {
            ctx.other.ptr = &args[0];
            ctx.other.len = args.len;
            break;
        }
        found: bool;
        loop e := 0; e < parser.entries.len; e += 1 {
            entry :: &parser.entries[e];
            if strings.compare(^arg, entry.short) || strings.compare(^arg, entry.long) {
                found = true;
                parsed, err :: entry.handler(_parser, args, ctx);
                if !is_ok(err) {
                    return err;
                }
                if parsed == 0 {
                    panic("Parsed count returned from arguemnt lambda is supposed to be at least 1, not %!", parsed); 
                }
                if args.len > parsed { args.ptr = &args[parsed]; }
                args.len -= parsed;
                break;
            }
        }
        if !found {
            return error("Invalid argument '%'.", ^arg);
        }
    }
    return ok();
}

/// Add new argument specified by `short` and `long` name to be recognised by parser.
/// The argument description can be specified as `help`. `handler` function is called
/// every time parser hits this argument (`short` or `long` name match).
/// Argument name must be unique name starting with `-`. Help command (as `-h` or `--help`)
/// is added by default.
///
/// Example
/// -------
/// .. code-block:: bl
///
///    add(parser,
///        "-d", // short name.
///        "--debug", // long name.
///        "Enable debug mode.", // Help text.
///        &fn (parser: Parser, args: []string, ctx: *Ctx) (s32, Error) {
///            a: *MyArgs = auto ctx;
///            a.is_debug = true;
///            return 1, ok(); // One argument parsed ('-d' or '--debug') 
///        });
///
add :: fn (
    _parser: Parser,
    short: string,
    long: string,
    help: string,
    handler: HandlerFn
) {
    parser: *ParserImpl = auto _parser;
    entry: Entry #noinit;
    entry.short = strings.new(short);
    entry.long = strings.new(long);
    entry.help = strings.new(help);
    entry.handler = handler;
    array_push(parser.entries, entry);

    // '  short, long '
    pad :: 2 + short.len + 2 + long.len + 1;
    if parser.pad < pad { parser.pad = auto pad; }
}

/// Print help for all registered commands.
print_help :: fn (_parser: Parser) {
    parser: *ParserImpl = auto _parser;
    if !strings.is_empty(parser.help_text) {
        print("%\n", parser.help_text);
    }
    print("Options:\n");
    loop i := 0; i < parser.entries.len; i += 1 {
        entry :: &parser.entries[i];
        printed: s32;
        if strings.is_empty(entry.short) {
            printed = print("  % ", entry.long);
        } else {
            printed = print("  %, % ", entry.short, entry.long);
        }
        loop p := 0; p < (parser.pad - printed); p += 1 {
            print(" ");
        }
        print("%\n", entry.help);
    }
}

#private
ParserImpl :: struct {
    entries: [..]Entry;
    pad: s32;
    help_text: string; 
}

Entry :: struct {
    short: string;
    long: string;
    help: string;
    handler: HandlerFn;
}

entry_delete :: fn (entry: *Entry) {
    strings.delete(entry.short);
    strings.delete(entry.long);
    strings.delete(entry.help);
}
