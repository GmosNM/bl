#import "std/fs"
#import "std/io"

#private
make_test_files :: fn (root_name: string_view) string {
    make_file :: fn (filepath: string_view) {
        using std;
        file :: open_file(filepath, OpenFileMode.CREATE);
        close_file(file);
    };

    using std;
    root :: get_cwd();
    str_concat(&root, "/", root_name);

    tmp :: str_new();
    defer str_delete(&tmp);

    remove_all_dir(root);
    create_all_dir(root);
    create_all_dir(str_clear_concat(&tmp, root, "/A"));
    create_all_dir(str_clear_concat(&tmp, root, "/B"));
    create_all_dir(str_clear_concat(&tmp, root, "/C"));
    create_all_dir(str_clear_concat(&tmp, root, "/A/A"));
    create_all_dir(str_clear_concat(&tmp, root, "/A/B"));

    make_file(str_clear_concat(&tmp, root, "/a.txt"));
    make_file(str_clear_concat(&tmp, root, "/b.jpg"));
    make_file(str_clear_concat(&tmp, root, "/c.txt"));
    make_file(str_clear_concat(&tmp, root, "/A/a.txt"));
    make_file(str_clear_concat(&tmp, root, "/A/b.jpg"));
    make_file(str_clear_concat(&tmp, root, "/A/c.txt"));
    make_file(str_clear_concat(&tmp, root, "/B/a.txt"));
    make_file(str_clear_concat(&tmp, root, "/B/b.jpg"));
    make_file(str_clear_concat(&tmp, root, "/B/c.txt"));
    make_file(str_clear_concat(&tmp, root, "/C/a.txt"));
    make_file(str_clear_concat(&tmp, root, "/C/b.jpg"));
    make_file(str_clear_concat(&tmp, root, "/C/c.txt"));
    make_file(str_clear_concat(&tmp, root, "/A/A/a.txt"));
    make_file(str_clear_concat(&tmp, root, "/A/B/b.jpg"));
    make_file(str_clear_concat(&tmp, root, "/A/B/c.txt"));
    return root;
}

get_dummy_filepath :: fn (i := 0) string {
    tmp :: std.get_tmp();
    std.str_concat(&tmp, "/deleteme_", i);
    return tmp;
}

fs_exist_test :: fn () #test {
    test_true(std.file_exist(#file));
    test_false(std.file_exist("foobar"));
}

fs_get_home_test :: fn () #test {
    tmp :: std.get_home();
    defer std.str_delete(&tmp);
    test_neq(tmp, std.str_empty);
    test_true(std.file_exist(tmp));
    test_true(tmp[tmp.len-1] != '/');

    state, err :: std.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_get_tmp_test :: fn () #test {
    tmp :: std.get_tmp();
    defer std.str_delete(&tmp);
    test_neq(tmp, std.str_empty);
    test_true(std.file_exist(tmp));
    test_true(tmp[tmp.len-1] != '/');

    state, err :: std.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_get_cwd_test :: fn () #test {
    tmp :: std.get_cwd();
    defer std.str_delete(&tmp);
    test_neq(tmp, std.str_empty);
    test_true(std.file_exist(tmp));
    test_true(tmp[tmp.len-1] != '/');

    state, err :: std.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_open_test1 :: fn () #test {
    file, err :: std.open_file("");
    defer std.close_file(file);
    test_is_error(err, ERR_INVALID_HANDLE);    
}
    
fs_open_test2 :: fn () #test {
    file, err :: std.open_file("foobar");
    defer std.close_file(file);
    test_is_error(err, ERR_NOT_FOUND);
}
    
fs_open_test3 :: fn () #test {
    file, err :: std.open_file(#file);    
    defer std.close_file(file);
    test_ok(err);

    // Cannot write to file when Write or Append is not specified.
    written, err2 :: std.write_string(file, "Hello!");
    test_not_ok(err2);
    test_eq(written, 0);
}

fs_file_create_test1 :: fn () #test {
    file, err :: std.open_file("", std.OpenFileMode.CREATE);
    defer std.close_file(file);
    test_is_error(err, ERR_INVALID_HANDLE);    
}

fs_file_create_test2 :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);

    {
        file, err :: std.open_file(filepath, std.OpenFileMode.CREATE);
        defer std.close_file(file);
        test_ok(err);

        // Cannot write to file when Write or Append is not specified.
        written, err2 :: std.write_string(file, "Hello!");
        test_not_ok(err2);
        test_eq(written, 0);
    }    

    {
        file, err :: std.open_file(filepath, make_flags(std.OpenFileMode.CREATE, std.OpenFileMode.WRITE));
        defer std.close_file(file);
        test_ok(err);

        written, err2 :: std.write_string(file, "Hello!");
        test_ok(err2);
        test_neq(written, 0);
    }    

    { // This should reuse already created file!
        file, err :: std.open_file(filepath, std.OpenFileMode.CREATE);
        defer std.close_file(file);
        test_ok(err);
        str :: std.read_string(file);
        defer std.str_delete(&str);
        test_eq(str, "Hello!");
    }
    std.remove_file(filepath);
}

fs_create_append :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    { // initial create
        file, err :: std.open_file(filepath, make_flags(std.OpenFileMode.CREATE, std.OpenFileMode.WRITE));
        defer std.close_file(file);
        test_ok(err);
        std.write_string(file, "Hello!");
    }
    { // append
        file, err :: std.open_file(filepath, std.OpenFileMode.APPEND);
        defer std.close_file(file);
        test_ok(err);
        std.write_string(file, "Hello!");
    }
    { // check
        file, err :: std.open_file(filepath);
        defer std.close_file(file);
        test_ok(err);
        str, err2 :: std.read_string(file);
        defer std.str_delete(&str);
        test_ok(err2);
        test_eq(str, "Hello!Hello!");
    }
    std.remove_file(filepath);
}

fs_get_uid_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    file, err :: std.open_file(filepath, std.OpenFileMode.CREATE);
    defer std.close_file(file);
    test_ok(err);
    uid, err2 :: std.file_uid(file);
    test_ok(err2);
    test_true(uid > 0);
}

fs_get_uid_test2 :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    file, err :: std.open_file(filepath, std.OpenFileMode.CREATE);
    std.close_file(file);
    test_ok(err);
    uid, err2 :: std.file_uid(filepath);
    test_ok(err2);
    test_true(uid > 0);
}

fs_read_string_test :: fn () #test {
    file, err1 :: std.open_file(#file, std.OpenFileMode.READ);
    defer std.close_file(file);
    test_ok(err1);
    data, err2 := std.read_string(file);
    test_ok(err2);
    defer std.str_delete(&data);
    test_neq(data, std.str_empty);
    data.len += 1;
    test_true(data[data.len-1] == '\0');
}

fs_read_string_test2 :: fn () #test {
    data, err := std.read_string(std.FILE_INVALID);
    test_is_error(err, ERR_INVALID_HANDLE);
}

fs_read_slice_test :: fn () #test {
    file, err1 :: std.open_file(#file, std.OpenFileMode.READ);
    test_ok(err1);
    defer std.close_file(file);
    data, err2 := std.read_slice(file);
    test_ok(err2);
    defer slice_terminate(&data);
    test_not_null(data.ptr);
    test_neq(data.len, 0);
}

fs_validate_filename_test :: fn () #test {
    if PLATFORM == Platform.WINDOWS {
        test_false(std.validate_filename("<"));
        test_false(std.validate_filename(">"));
        test_false(std.validate_filename(":")); 
        test_false(std.validate_filename("\""));     
        test_false(std.validate_filename("/"));
        test_false(std.validate_filename("\\"));
        test_false(std.validate_filename("|")); 
        test_false(std.validate_filename("?"));        
        test_false(std.validate_filename("*"));
        test_false(std.validate_filename("\t"));
        test_false(std.validate_filename("foo<"));
        test_true(std.validate_filename("foo_bar-File.txt"));
    } else {
        test_false(std.validate_filename("foo/"));
        test_true(std.validate_filename("foo_bar-File.txt"));
    }
}

fs_normalize_test1 :: fn () #test {
    cwd :: std.get_cwd();
    defer std.str_delete(&cwd);
    parent: string_view;
    test_true(std.str_split_by_last(cwd, '/', &parent, null));
    filepath :: std.str_new("..");
    defer std.str_delete(&filepath);
    status :: std.path_normalize(&filepath);
    test_ok(status);
    test_eq(filepath, parent);
}

fs_normalize_test2 :: fn () #test {
    cwd :: std.get_cwd();
    defer std.str_delete(&cwd);
    filepath :: std.str_new(".");
    defer std.str_delete(&filepath);
    status :: std.path_normalize(&filepath);
    test_ok(status);
    test_eq(filepath, cwd);
}    

fs_normalize_test3 :: fn () #test {
    file :: std.open_file("foo", std.OpenFileMode.CREATE);
    std.close_file(file);
    defer std.remove_file("foo");
    cwd :: std.get_cwd();
    defer std.str_delete(&cwd);    
    filepath :: std.str_new("foo");
    std.str_concat(&cwd, "/", filepath);
    defer std.str_delete(&filepath);
    status :: std.path_normalize(&filepath);
    test_ok(status);
    test_eq(filepath, cwd);
}

fs_remove_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    
    std.remove_file(filepath);
    file, err :: std.open_file(filepath, std.OpenFileMode.CREATE);
    test_ok(err);
    std.close_file(file);
    err2 :: std.remove_file(filepath);
    test_ok(err2);
}

fs_size_test :: fn () #test {
    file :: std.open_file(#file);
    defer std.close_file(file);
    size, err :: std.file_size(file);
    test_ok(err);
    test_true(size > 0);
}

fs_read_test :: fn () #test {
    file :: std.open_file(#file);
    defer std.close_file(file);
    buf: [1042]u8 #noinit;
    bytes, err :: std.read(file, buf.ptr, buf.len);
    test_ok(err);
    test_eq(bytes, buf.len);
}

fs_read_buffer_test2 :: fn () #test {
    buf: [1042]u8 #noinit;
    bytes, err :: std.read(std.FILE_INVALID, buf.ptr, buf.len);
    test_is_error(err, ERR_INVALID_HANDLE);
    test_eq(bytes, 0);
}

fs_read_buffer_test3 :: fn () #test {
    file :: std.open_file(#file);
    defer std.close_file(file);
    bytes, err :: std.read(file, null, 0);
    test_is_error(err, ERR_INVALID_HANDLE);
    test_eq(bytes, 0);
}

fs_read_test4 :: fn () #test {
    file :: std.open_file(#file);
    defer std.close_file(file);
    buf: [1024]u8 #noinit;
    bytes, err :: std.read(file, buf.ptr, 100);
    test_ok(err);
    test_eq(bytes, 100);
}

fs_write_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    content :: "Hello I'm cool file content!";    
    
    { // write
        file :: std.open_file(filepath, make_flags(std.OpenFileMode.CREATE, std.OpenFileMode.WRITE));
        written, err :: std.write(file, content.ptr, content.len);
        test_ok(err);
        test_eq(written, content.len);
        std.close_file(file);
    }
    { // read
        file :: std.open_file(filepath);
        tmp, err :: std.read_string(file);
        test_ok(err);
        defer std.str_delete(&tmp);
        test_eq(tmp, content);
        std.close_file(file);
    }
    std.remove_file(filepath);
}

fs_write_string_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    content :: "Hello I'm cool file content!";    
    
    { // write
        file :: std.open_file(filepath, make_flags(std.OpenFileMode.CREATE, std.OpenFileMode.WRITE));
        written, err :: std.write_string(file, content);
        test_ok(err);
        test_eq(written, content.len);
        std.close_file(file);
    }
    { // read
        file :: std.open_file(filepath);
        tmp, err :: std.read_string(file);
        test_ok(err);
        defer std.str_delete(&tmp);
        test_eq(tmp, content);
        std.close_file(file);
    }
    std.remove_file(filepath);
}

fs_write_slice_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer std.str_delete(&filepath);
    std.remove_file(filepath);
    content :: [5]u8.{'H', 'e', 'l', 'o', 'o' };
    
    { // write
        file :: std.open_file(filepath, make_flags(std.OpenFileMode.CREATE, std.OpenFileMode.WRITE));
        written, err :: std.write_slice(file, content);
        test_ok(err);
        test_eq(written, content.len);
        std.close_file(file);
    }
    { // read
        file :: std.open_file(filepath);
        tmp, err :: std.read_string(file);
        test_ok(err);
        defer std.str_delete(&tmp);
        test_eq(tmp.len, content.len);
        std.close_file(file);
    }
    std.remove_file(filepath);
}

fs_copy_test :: fn () #test {
    filepath1 :: get_dummy_filepath(1);
    filepath2 :: get_dummy_filepath(2);
    defer std.str_delete(&filepath1);
    defer std.str_delete(&filepath2);
    std.remove_file(filepath1);
    std.remove_file(filepath2);
    
    { // new file
        file :: std.open_file(filepath1, std.OpenFileMode.CREATE);
        std.close_file(file);
    }
    { // copy
        err :: std.copy_file(filepath1, filepath2);
        test_ok(err);
        test_true(std.file_exist(filepath1));
        test_true(std.file_exist(filepath2));
    }
    { // copy 2
        err :: std.copy_file(filepath1, filepath2, false);
        test_not_ok(err);
        test_true(std.file_exist(filepath1));
        test_true(std.file_exist(filepath2));
    }

    std.remove_file(filepath1);
    std.remove_file(filepath2);
}

VisitData :: struct {
    directory_count: s32;
    file_count: s32;
    include_ext: string_view;
}

visitor :: fn (info: *std.Info, data: *VisitData) Error {
    using std;
    test_neq(info.filename, ".");
    test_neq(info.filename, "..");
    if info.is_directory {
        data.directory_count += 1;
    } else if str_is_empty(data.include_ext) {
        data.file_count += 1;
    } else {
        _, ext :: path_splitext(info.filename);
        if str_match(ext, data.include_ext) {
            data.file_count += 1;
        }
    }
    test_true(file_exist(info.filepath));
    return OK;
}

fs_dir_visit1 :: fn () #test {
    using std;
    root :: make_test_files("root");
    defer str_delete(&root);

    data: VisitData;
    err :: visit_files(root, VisitOpt.{}, &visitor, &data);
    test_ok(err);
    test_eq(data.file_count, 3);
    test_eq(data.directory_count, 3);
    remove_all_dir(root);
}

fs_dir_visit2 :: fn () #test {
    using std;
    root :: make_test_files("root");
    defer str_delete(&root);

    data: VisitData;
    err :: visit_files(root, VisitOpt.{ recursive = true }, &visitor, &data);
    test_ok(err);
    test_eq(data.file_count, 15);
    test_eq(data.directory_count, 5);
    remove_all_dir(root);
}

fs_dir_visit_only_txt :: fn () #test {
    using std;
    root :: make_test_files("root");
    defer str_delete(&root);

    data := VisitData.{ include_ext = ".txt" };
    err :: visit_files(root, VisitOpt.{ recursive = true }, &visitor, &data);
    test_ok(err);
    test_eq(data.file_count, 10);
    test_eq(data.directory_count, 5);
    remove_all_dir(root);
}

fs_is_directory_test1 :: fn () #test {
    tmp :: std.get_tmp();
    defer std.str_delete(&tmp);
    state, err :: std.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_is_directory_test2 :: fn () #test {
    state, err :: std.is_directory(#file);
    test_ok(err);
    test_false(state);
}

fs_create_remove_dir_test1 :: fn () #test {
    dir :: std.get_tmp();
    defer std.str_delete(&dir);
    std.str_append(&dir, "/__DELETE_ME__");

    std.remove_all_dir(dir);
    state1 :: std.create_dir(dir);
    test_ok(state1);

    state2 :: std.create_dir(dir);
    test_not_ok(state2);

    state3 :: std.remove_dir(dir);
    test_ok(state3);
}

fs_remove_all_dir_test1 :: fn () #test {
    dir :: std.get_tmp();
    defer std.str_delete(&dir);
    std.str_append(&dir, "/__DELETE_ME__");

    print_log("PATH = %", dir);
    std.remove_all_dir(dir);
    {
        s :: std.create_dir(dir);
        test_ok(s);
    }
    
    {
        file :: std.str_new(dir);
        defer std.str_delete(&file);
        std.str_append(&file, "/file.txt");
        f, e :: std.open_file(file, std.OpenFileMode.CREATE);
        test_ok(e);
        std.close_file(f);
    }

    state :: std.remove_all_dir(dir);
    test_ok(state);
    test_false(std.file_exist(dir));
}

fs_create_all_dir_test1 :: fn () #test {
    dir :: std.get_tmp();
    defer std.str_delete(&dir);
    std.str_append(&dir, "/foo");
    std.remove_all_dir(dir);
    std.str_append(&dir, "/bar/bazz");
    err :: std.create_all_dir(dir);
    test_ok(err);
}

fs_remove_all_dir :: fn () #test {
    using std;
    root :: make_test_files("root");
    defer str_delete(&root);
}

fs_path_split :: fn () #test {
    {
        d, f :: std.path_split("C:/Ahoj/Jak/Se/Vede/foo.txt.bak");
        test_eq(d, "C:/Ahoj/Jak/Se/Vede/");
        test_eq(f, "foo.txt.bak");
    }
    {
        d, f :: std.path_split("foo.txt.bak");
        test_eq(d, "");
        test_eq(f, "foo.txt.bak");
    }
    {
        d, f :: std.path_split(".txt.bak");
        test_eq(d, "");
        test_eq(f, ".txt.bak");
    }
    {
        d, f :: std.path_split("");
        test_eq(d, "");
        test_eq(f, "");
    }
    {
        d, f :: std.path_split(".");
        test_eq(d, "");
        test_eq(f, ".");
    }
    {
        d, f :: std.path_split(".txt");
        test_eq(d, "");
        test_eq(f, ".txt");
    }
    {
        d, f :: std.path_split("..txt");
        test_eq(d, "");
        test_eq(f, "..txt");
    }
    {
        d, f :: std.path_split("/home/usr/.hidden.file");
        test_eq(d, "/home/usr/");
        test_eq(f, ".hidden.file");
    }
    {
        d, f :: std.path_split("/");
        test_eq(d, "/");
        test_eq(f, "");
    }
    {
        d, f :: std.path_split("D:/");
        test_eq(d, "D:/");
        test_eq(f, "");
    }
    {
        d, f :: std.path_split("C:/foo/bar");
        test_eq(d, "C:/foo/");
        test_eq(f, "bar");
    }
    {
        d, f :: std.path_split("C:/foo/bar/");
        test_eq(d, "C:/foo/bar/");
        test_eq(f, "");
    }
}

fs_path_splitext :: fn () #test {
    {
        d, f :: std.path_splitext("C:/Ahoj/Jak/Se/Vede/foo.txt.bak");
        test_eq(d, "C:/Ahoj/Jak/Se/Vede/foo.txt");
        test_eq(f, ".bak");
    }
    {
        d, f :: std.path_splitext("");
        test_eq(d, "");
        test_eq(f, "");
    }
    {
        d, f :: std.path_splitext("foo.txt");
        test_eq(d, "foo");
        test_eq(f, ".txt");
    }
    {
        d, f :: std.path_splitext("foo");
        test_eq(d, "foo");
        test_eq(f, "");
    }
    {
        d, f :: std.path_splitext(".");
        test_eq(d, "");
        test_eq(f, ".");
    }
}
