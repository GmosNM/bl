#import "std/test"
#import "std/debug_allocator"

#import "std/fs"

main :: fn () s32 {
    debug_allocator.init();
    //debug_allocator.break_on(6);
    defer debug_allocator.terminate();
    return test_run();    
}

#private
get_dummy_filepath :: fn (i := 0) string {
    tmp :: fs.get_tmp();
    String.concatenate(&tmp, "/deleteme_", i);
    return tmp;
}

fs_exist_test :: fn () #test {
    test_true(fs.exist(#file));
    test_false(fs.exist("foobar"));
}

fs_get_home_test :: fn () #test {
    tmp :: fs.get_home();
    defer String.delete(tmp);
    test_neq(tmp, String.empty);
    test_true(fs.exist(tmp));
    test_true(tmp[tmp.len-1] != '/');

    state, err :: fs.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_get_tmp_test :: fn () #test {
    tmp :: fs.get_tmp();
    defer String.delete(tmp);
    test_neq(tmp, String.empty);
    test_true(fs.exist(tmp));    
    test_true(tmp[tmp.len-1] != '/');

    state, err :: fs.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_get_cwd_test :: fn () #test {
    tmp :: fs.get_cwd();
    defer String.delete(tmp);
    test_neq(tmp, String.empty);
    test_true(fs.exist(tmp));    
    test_true(tmp[tmp.len-1] != '/');

    state, err :: fs.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_open_test1 :: fn () #test {
    file, err :: fs.open("");
    defer fs.close(file);
    test_is_error(err, ERR_INVALID_HANDLE);    
}
    
fs_open_test2 :: fn () #test {
    file, err :: fs.open("foobar");
    defer fs.close(file);
    test_is_error(err, ERR_NOT_FOUND);
}
    
fs_open_test3 :: fn () #test {
    file, err :: fs.open(#file);    
    defer fs.close(file);
    test_ok(err);

    // Cannot write to file when Write or Append is not specified.
    written, err2 :: fs.write_string(file, "Hello!");
    test_not_ok(err2);
    test_eq(written, 0);
}

fs_file_create_test1 :: fn () #test {
    file, err :: fs.open("", fs.OpenMode.Create);
    defer fs.close(file);
    test_is_error(err, ERR_INVALID_HANDLE);    
}

fs_file_create_test2 :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);

    {
        file, err :: fs.open(filepath, fs.OpenMode.Create);
        defer fs.close(file);
        test_ok(err);

        // Cannot write to file when Write or Append is not specified.
        written, err2 :: fs.write_string(file, "Hello!");
        test_not_ok(err2);
        test_eq(written, 0);
    }    

    {
        file, err :: fs.open(filepath, fs.OpenMode.Create, fs.OpenMode.Write);
        defer fs.close(file);
        test_ok(err);

        written, err2 :: fs.write_string(file, "Hello!");
        test_ok(err2);
        test_neq(written, 0);
    }    

    { // This should reuse already created file!
        file, err :: fs.open(filepath, fs.OpenMode.Create);
        defer fs.close(file);
        test_ok(err);
        str :: fs.read_string(file);
        defer String.delete(str);
        test_eq(str, "Hello!");
    }
    fs.remove(filepath);
}

fs_create_append :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    { // initial create
        file, err :: fs.open(filepath, fs.OpenMode.Create, fs.OpenMode.Write);
        defer fs.close(file);
        test_ok(err);
        fs.write_string(file, "Hello!");
    }
    { // append
        file, err :: fs.open(filepath, fs.OpenMode.Append);
        defer fs.close(file);
        test_ok(err);
        fs.write_string(file, "Hello!");
    }
    { // check
        file, err :: fs.open(filepath);
        defer fs.close(file);
        test_ok(err);
        str, err2 :: fs.read_string(file);
        defer String.delete(str);
        test_ok(err2);
        test_eq(str, "Hello!Hello!");
    }
    fs.remove(filepath);
}

fs_get_uid_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    file, err :: fs.open(filepath, fs.OpenMode.Create);
    defer fs.close(file);
    test_ok(err);
    uid, err2 :: fs.get_uid(file);
    test_ok(err2);
    test_true(uid > 0);
}

fs_get_uid_test2 :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    file, err :: fs.open(filepath, fs.OpenMode.Create);
    fs.close(file);
    test_ok(err);
    uid, err2 :: fs.get_uid_by_name(filepath);
    test_ok(err2);
    test_true(uid > 0);
}

fs_read_string_test :: fn () #test {
    file, err1 :: fs.open(#file, fs.OpenMode.Read);
    defer fs.close(file);
    test_ok(err1);
    data, err2 := fs.read_string(file);
    test_ok(err2);
    defer String.delete(data);
    test_neq(data, String.empty);
    data.len += 1;
    test_true(data[data.len-1] == '\0');
}

fs_read_string_test2 :: fn () #test {
    data, err := fs.read_string(fs.FILE_INVALID);
    test_is_error(err, ERR_INVALID_HANDLE);
}

fs_read_slice_test :: fn () #test {
    file, err1 :: fs.open(#file, fs.OpenMode.Read);
    test_ok(err1);
    defer fs.close(file);
    data, err2 := fs.read_slice(file);
    test_ok(err2);
    defer slice_terminate(data);
    test_not_null(data.ptr);
    test_neq(data.len, 0);
}

fs_validate_filename_test :: fn () #test {
    if OS_KIND == OSKind.Windows {
        test_false(fs.validate_filename("<"));
        test_false(fs.validate_filename(">"));
        test_false(fs.validate_filename(":")); 
        test_false(fs.validate_filename("\""));     
        test_false(fs.validate_filename("/"));
        test_false(fs.validate_filename("\\"));
        test_false(fs.validate_filename("|")); 
        test_false(fs.validate_filename("?"));        
        test_false(fs.validate_filename("*"));
        test_false(fs.validate_filename("\t"));
        test_false(fs.validate_filename("foo<"));
        test_true(fs.validate_filename("foo_bar-File.txt"));
    } else {
        test_false(fs.validate_filename("foo/"));
        test_true(fs.validate_filename("foo_bar-File.txt"));
    }
}

fs_get_extension_test :: fn () #test {
    {
        filename :: "foo.bar";
        ext      :: fs.get_extension(filename);
        test_eq(ext, "bar");
    }
    {
        filename :: "foo.bar.bar";
        ext      :: fs.get_extension(filename);
        test_eq(ext, "bar.bar");
    }
    {
        filename :: "";
        ext      :: fs.get_extension(filename);
        test_eq(ext, String.empty);
    }    
    {
        filename :: ".";
        ext      :: fs.get_extension(filename);
        test_eq(ext, String.empty);
    }
    {
        filename :: ".foo";
        ext      :: fs.get_extension(filename);
        test_eq(ext, String.empty);
    }
    {
        filename :: ".foo.bar";
        ext      :: fs.get_extension(filename);
        test_eq(ext, "bar");
    }
    {
        filename :: ".foo.bar.bar";
        ext      :: fs.get_extension(filename);
        test_eq(ext, "bar.bar");
    }        
}

fs_remove_extension_test :: fn () #test {
    {
        filename :: "foo.bar";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, "foo");
    }
    {
        filename :: "foo.bar.bar";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, "foo");
    }
    {
        filename :: "";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, String.empty);
    }    
    {
        filename :: ".";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, ".");
    }
    {
        filename :: ".foo";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, ".foo");
    }
    {
        filename :: ".foo.bar";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, ".foo");
    }
    {
        filename :: ".foo.bar.bar";
        ext      :: fs.remove_extension(filename);
        test_eq(ext, ".foo");
    }
}

fs_normalize_test1 :: fn () #test {
    cwd :: fs.get_cwd();
    defer String.delete(cwd);
    parent: string;
    test_true(String.split_by_last(cwd, '/', &parent, null));
    filepath :: String.new("..");
    defer String.delete(filepath);
    status :: fs.normalize(&filepath);
    test_ok(status);
    test_eq(filepath, parent);
}

fs_normalize_test2 :: fn () #test {
    cwd :: fs.get_cwd();
    defer String.delete(cwd);
    filepath :: String.new(".");
    defer String.delete(filepath);
    status :: fs.normalize(&filepath);
    test_ok(status);
    test_eq(filepath, cwd);
}    

fs_normalize_test3 :: fn () #test {
    file :: fs.open("foo", fs.OpenMode.Create);
    fs.close(file);
    defer fs.remove("foo");
    cwd :: fs.get_cwd();
    defer String.delete(cwd);    
    filepath :: String.new("foo");
    String.concatenate(&cwd, "/", filepath);
    defer String.delete(filepath);
    status :: fs.normalize(&filepath);
    test_ok(status);
    test_eq(filepath, cwd);
}

fs_remove_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    
    fs.remove(filepath);
    file, err :: fs.open(filepath, fs.OpenMode.Create);
    test_ok(err);
    fs.close(file);
    err2 :: fs.remove(filepath);
    test_ok(err2);
}

fs_size_test :: fn () #test {
    file :: fs.open(#file);
    defer fs.close(file);
    size, err :: fs.size(file);
    test_ok(err);
    test_true(size > 0);
}

fs_read_test :: fn () #test {
    file :: fs.open(#file);
    defer fs.close(file);
    buf: [1042]u8 #noinit;
    bytes, err :: fs.read(file, buf.ptr, buf.len);
    test_ok(err);
    test_eq(bytes, buf.len);
}

fs_read_buffer_test2 :: fn () #test {
    buf: [1042]u8 #noinit;
    bytes, err :: fs.read(fs.FILE_INVALID, buf.ptr, buf.len);
    test_is_error(err, ERR_INVALID_HANDLE);
    test_eq(bytes, 0);
}

fs_read_buffer_test3 :: fn () #test {
    file :: fs.open(#file);
    defer fs.close(file);
    bytes, err :: fs.read(file, null, 0);
    test_is_error(err, ERR_INVALID_HANDLE);
    test_eq(bytes, 0);
}

fs_read_test4 :: fn () #test {
    file :: fs.open(#file);
    defer fs.close(file);
    buf: [1024]u8 #noinit;
    bytes, err :: fs.read(file, buf.ptr, 100);
    test_ok(err);
    test_eq(bytes, 100);
}

fs_write_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    content :: "Hello I'm cool file content!";    
    
    { // write
        file :: fs.open(filepath, fs.OpenMode.Create, fs.OpenMode.Write);
        written, err :: fs.write(file, content.ptr, content.len);
        test_ok(err);
        test_eq(written, content.len);
        fs.close(file);
    }
    { // read
        file :: fs.open(filepath);
        tmp, err :: fs.read_string(file);
        test_ok(err);
        defer String.delete(tmp);
        test_eq(tmp, content);
        fs.close(file);
    }
    fs.remove(filepath);
}

fs_write_string_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    content :: "Hello I'm cool file content!";    
    
    { // write
        file :: fs.open(filepath, fs.OpenMode.Create, fs.OpenMode.Write);
        written, err :: fs.write_string(file, content);
        test_ok(err);
        test_eq(written, content.len);
        fs.close(file);
    }
    { // read
        file :: fs.open(filepath);
        tmp, err :: fs.read_string(file);
        test_ok(err);
        defer String.delete(tmp);
        test_eq(tmp, content);
        fs.close(file);
    }
    fs.remove(filepath);
}

fs_write_slice_test :: fn () #test {
    filepath :: get_dummy_filepath();
    defer String.delete(filepath);
    fs.remove(filepath);
    content :: {:[5]u8: 'H', 'e', 'l', 'o', 'o' };
    
    { // write
        file :: fs.open(filepath, fs.OpenMode.Create, fs.OpenMode.Write);
        written, err :: fs.write_slice(file, content);
        test_ok(err);
        test_eq(written, content.len);
        fs.close(file);
    }
    { // read
        file :: fs.open(filepath);
        tmp, err :: fs.read_string(file);
        test_ok(err);
        defer String.delete(tmp);
        test_eq(tmp.len, content.len);
        fs.close(file);
    }
    fs.remove(filepath);
}

fs_copy_test :: fn () #test {
    filepath1 :: get_dummy_filepath(1);
    filepath2 :: get_dummy_filepath(2);
    defer String.delete(filepath1);
    defer String.delete(filepath2);
    fs.remove(filepath1);
    fs.remove(filepath2);
    
    { // new file
        file :: fs.open(filepath1, fs.OpenMode.Create);
        fs.close(file);
    }
    { // copy
        err :: fs.copy(filepath1, filepath2);
        test_ok(err);
        test_true(fs.exist(filepath1));
        test_true(fs.exist(filepath2));
    }
    { // copy 2
        err :: fs.copy(filepath1, filepath2, false);
        test_not_ok(err);
        test_true(fs.exist(filepath1));
        test_true(fs.exist(filepath2));
    }

    fs.remove(filepath1);
    fs.remove(filepath2);
}

fs_list_dir_test1 :: fn () #test {
    dir :: fs.get_cwd();
    defer String.delete(dir);
    list, err :: fs.dir_scan(dir);
    defer fs.info_list_delete(list);
    test_ok(err);
    test_true(list.len > 0);
    loop i := 0; i < list.len; i += 1 {
        test_neq(list[i].name, String.empty);
    }
}

fs_list_dir_test2 :: fn () #test {
    dir :: fs.get_cwd();
    defer String.delete(dir);
    list, err :: fs.dir_scan(dir, &fn (info: *fs.Info) bool {
        return info.kind == fs.InfoKind.Directory;
    });
    defer fs.info_list_delete(list);
    test_ok(err);
    test_true(list.len > 0);
    loop i := 0; i < list.len; i += 1 {
        test_neq(list[i].name, String.empty);
        test_true(list[i].kind == fs.InfoKind.Directory);
    }
}

fs_list_dir_test3 :: fn () #test {
    dir :: fs.get_cwd();
    defer String.delete(dir);
    list, err :: fs.dir_scan(dir, &fn (info: *fs.Info) bool {
        return info.kind == fs.InfoKind.File;
    });
    defer fs.info_list_delete(list);
    test_ok(err);
    test_true(list.len > 0);
    loop i := 0; i < list.len; i += 1 {
        test_neq(list[i].name, String.empty);
        test_true(list[i].kind == fs.InfoKind.File);
    }
}

fs_is_directory_test1 :: fn () #test {
    tmp :: fs.get_tmp();
    defer String.delete(tmp);
    state, err :: fs.is_directory(tmp);
    test_ok(err);
    test_true(state);
}

fs_is_directory_test2 :: fn () #test {
    state, err :: fs.is_directory(#file);
    test_ok(err);
    test_false(state);
}

fs_dir_create_remove_test1 :: fn () #test {
    dir :: fs.get_tmp();
    defer String.delete(dir);
    String.append(&dir, "/__DELETE_ME__");

    fs.dir_remove_all(dir);
    state1 :: fs.dir_create(dir);
    test_ok(state1);

    state2 :: fs.dir_create(dir);
    test_not_ok(state1);

    state3 :: fs.dir_remove(dir);
    test_ok(state3);
}

fs_dir_remove_all_test1 :: fn () #test {
    dir :: fs.get_tmp();
    defer String.delete(dir);
    String.append(&dir, "/__DELETE_ME__");
    
    fs.dir_remove_all(dir);
    {
        s :: fs.dir_create(dir);
        test_ok(s);
    }
    
    {
        file :: String.new(dir);
        defer String.delete(file);
        String.append(&file, "/file.txt");
        f, e :: fs.open(file, fs.OpenMode.Create);
        test_ok(e);
        fs.close(f);
    }
    
    state :: fs.dir_remove_all(dir);
    test_ok(state);
    test_false(fs.exist(dir));
}

fs_dir_create_all_test1 :: fn () #test {
    dir :: fs.get_tmp();
    defer String.delete(dir);
    String.append(&dir, "/foo");
    fs.dir_remove_all(dir);
    String.append(&dir, "/bar/bazz");
    err :: fs.dir_create_all(dir);
    test_ok(err);
}