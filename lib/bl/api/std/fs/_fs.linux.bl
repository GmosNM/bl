#import "std/io"
#load "fs.bl"

#scope _fs_impl

File :: s64;
FILE_INVALID : File : -1;

exist :: fn (filepath: string) bool #inline {
    if filepath.len == 0 { return false; }
    tmp: C.stat_t;
    return C.stat(auto filepath.ptr, &tmp) == 0;
}

open :: fn (filepath: string, mode: std.FileOpenMode) (File, Error) {
    if std.str_is_empty(filepath) { return 0, error(ERR_INVALID_HANDLE, "File path is empty!"); }
    flags := modes_to_flags(mode);
    mode_flags :: C.S_IRUSR | C.S_IWUSR | C.S_IROTH | C.S_IWOTH;
    handle :: C.open(auto filepath.ptr, flags, mode_flags);
    if handle < 0 { // error
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot open file '%': %.", filepath, estr);
    }    
    return handle, ok();   
}

remove :: fn (filepath: string) Error #inline {
    if std.str_is_empty(filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    if C.unlink(auto filepath.ptr) != 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove file '%': %.", filepath, estr);
    }
    return ok();
}

copy :: fn (src: string, dest: string, override: bool) Error {
    if std.str_is_empty(src) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    if std.str_is_empty(dest) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    if exist(dest) && !override { return error(ERR_ALREADY_EXIST, "Destination already exist '%'", dest); }
    file_src, err1 :: open(src, std.FileOpenMode.READ);
    defer close(file_src);
    if !is_ok(err1) { return err1; }
    tmp, err2 :: std.read_slice(file_src);
    defer slice_terminate(&tmp);
    if !is_ok(err2) { return err2; }
    file_dest, err3:: open(dest, make_flags(std.FileOpenMode.WRITE, std.FileOpenMode.CREATE));
    defer close(file_dest);
    if !is_ok(err3) { return err3; }
    _, err4 :: std.write_slice(file_dest, tmp);
    return err4;
}

close :: fn (handle: File) #inline {
    C.close(auto handle);
}

get_uid :: fn (handle: File) (u64, Error) {
    tmp: C.stat_t;
    if C.fstat(auto handle, &tmp) != 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot get file information.", estr);
    }
    return auto tmp.st_ino, ok();
}

get_uid_by_name :: fn (filepath: string) (u64, Error) {
    file, err1 :: open(filepath, std.FileOpenMode.READ);
    defer close(file);
    if !is_ok(err1) { return 0, err1; }
    return get_uid(file);
}

size :: fn (handle: File) (usize, Error) #inline {
    tmp: C.stat_t;
    if C.fstat(auto handle, &tmp) != 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot get file size: %.", estr);
    }
    return auto tmp.st_size, ok();
}

dir_create :: fn (dirpath: string) Error {
    if std.str_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot create directory, dirpath is empty."); }
    if C.mkdir(auto dirpath.ptr, C.S_IRWXU | C.S_IRWXG | C.S_IROTH | C.S_IXOTH) != 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot create directory '%': %.", dirpath, estr);
    }
    return ok();
}

dir_remove :: fn (dirpath: string) Error {
    if std.str_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot remove directory, dirpath is empty."); }
    if C.rmdir(auto dirpath.ptr)!= 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove directory '%': %.", dirpath, estr);
    }
    return ok();
}

dir_scan :: fn (dirpath: string, filter: std.DirScanFilterFn) (std.InfoList, Error) {
    invalid: std.InfoList;
    dir := C.opendir(auto dirpath.ptr);
    if !dir {
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }
    defer C.closedir(dir);

    fc := 0;
    loop C.readdir(dir) != null { fc += 1; }
    C.rewinddir(dir);
    defer C.rewinddir(dir);

    buf: std.InfoList;
    slice_init(&buf, fc);
    if fc == 0 { return buf, ok(); }

    buf.len = 0;
    loop {
        stat :: C.readdir(dir);
        if stat == null { break; }
        kind: std.InfoKind;
        name: string;
        if stat.d_type == auto C.DT_DIR {
            kind = std.InfoKind.DIRECTORY;
            name = std.str_new(cast(*u8) stat.d_name.ptr);
        } else {
            kind = std.InfoKind.FILE;
            name = std.str_new(cast(*u8) stat.d_name.ptr);
        }
        push := true;
        info :: {:std.Info: kind, name};
        if filter { push = filter(&info); }
        if push {
            buf.len += 1;
            buf[buf.len-1] = info;
        } else {
            std.str_delete(name);
        }
    }
    return buf, ok();
}

is_directory :: fn (path: string) (bool, Error) #inline {
    if std.str_is_empty(path) { return false, error(ERR_INVALID_HANDLE, "Path is empty."); }
    stat: C.stat_t #noinit;
    if C.stat(auto path.ptr, &stat) != 0 {
        ec, estr :: os_get_last_error();
        return false, error(ec, "Cannot check directory '%': %.", path, estr);
    }
    return C.S_ISDIR(stat.st_mode), ok();
}

validate_filename :: fn (name: string) bool {
    if name.len == 0 { return false; }
    invalid :: "/";
    loop i := 0; i < invalid.len; i += 1 {
        if std.str_count_of(name, invalid[i]) > 0 { return false; }
    }
    return true;
}

get_cwd :: fn () string #inline {
    buf: [OS_PATH_MAX]u8;
    if !C.getcwd(auto buf.ptr, auto buf.len) { return std.str_new(); }
    path :: std.str_new(buf.ptr);
    return remove_last_separator(path);
}

set_cwd :: fn (path: string) Error #inline {
    if std.str_is_empty(path) { return error(ERR_INVALID_HANDLE, "Path is empty!"); }
    if C.chdir(auto path.ptr) != 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot set current directory to '%': %.", path, estr);
    }
    return ok();
}

get_home :: fn () string #inline {
    tmp :: "HOME";
    cdir :: cast(*u8) C.getenv(auto tmp.ptr);
    if !cdir { return std.str_new(); }
    path :: std.str_new(cdir);
    return remove_last_separator(path);
}

get_tmp :: fn () string #inline {
    tmp :: "TMPDIR";
    cdir :: cast(*u8) C.getenv(auto tmp.ptr);
    if !cdir { return std.str_new("/tmp"); }
    path :: std.str_new(cdir);
    return remove_last_separator(path);
}

normalize :: fn (filepath: *string) Error {
    if !filepath { return error(ERR_INVALID_HANDLE, "File path is null!"); }
    if std.str_is_empty(@filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    buf : [OS_PATH_MAX]u8;
    in_buf : [OS_PATH_MAX]u8;

    if !is_path_absolute(@filepath) {
        cwd :: get_cwd();
        defer std.str_delete(cwd);
        bprint(in_buf, "%/%", cwd, @filepath);
    } else {
        bprint(in_buf, "%", @filepath);
    }
    if !C.realpath(auto in_buf.ptr, auto buf.ptr) {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot normalize '%': %.", @filepath, estr);
    }
    std.str_clear(filepath);
    std.str_append(filepath, cstr_to_str(buf.ptr));
    return ok();
}

remove_extension :: fn (filename: string) string #inline {
    if std.str_is_empty(filename) { return std.str_empty; }
    tmp := filename;
    tmp.len = 0;
    loop i := 0; i < filename.len; i += 1 {
        c :: filename[i];
        if c == '.' && i > 0 { break; }
        tmp.len += 1;
    }
    return tmp;
}

get_extension :: fn (filename: string) string #inline {
    if std.str_is_empty(filename) { return std.str_empty; }
    if filename[0] == '.' {
        if filename.len == 1 { return std.str_empty; }
        filename.len -= 1; filename.ptr = &filename[1]; 
    }
    rhs: string;
    if std.str_split_by_first(filename, '.', null, &rhs) {
        return rhs;
    }
    return std.str_empty;
}

#private
modes_to_flags :: fn (modes: std.FileOpenMode) s32 #inline {
    r, w, create, append := false;
    if is_flag(modes, std.FileOpenMode.READ) { r = true; }
    if is_flag(modes, std.FileOpenMode.WRITE) { w = true; }
    if is_flag(modes, std.FileOpenMode.APPEND) { w = true; append = true; }
    if is_flag(modes, std.FileOpenMode.CREATE) { create = true; }
    flags: s32;
    if ((!w) && (!r)) { flags = C.O_RDONLY; }
    else if (w && r) { flags = C.O_RDWR; }
    else if w { flags = C.O_WRONLY; }
    else if r { flags = C.O_RDONLY; }
    if create { flags = flags | C.O_CREAT; }
    if append { flags = flags | C.O_APPEND; }
    if w && !append { flags = flags | C.O_TRUNC; }
    return flags;
}

remove_last_separator :: fn (path: string) string {
    if std.str_is_empty(path) { return path; }
    if path[path.len-1] == '/' {
        path[path.len-1] = '\0';
        path.len -= 1;
    }
    return path;
}

is_path_absolute :: fn (path: string) bool #inline {
    return path.len > 0 && path[0] == '/';
}