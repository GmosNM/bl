#import "os/posix/pthread"
#load "thread.bl"

#scope _ThreadImpl

Handle :: pthread_t;

create :: fn (entry: Thread.EntryFn, ctx: *u8) (Handle, Error) {
    if !entry { return null, error(ERR_INVALID_HANDLE, "Cannot create thread. Handle is invalid."); }
    thread: pthread_t #noinit;
    err :: pthread_create(&thread, null, auto entry, ctx);
    if err != 0 {
        estr :: cast(*u8) C.strerror(err);
        return null, error(err, "Cannot create thread: %.", estr);
    }    

    return thread, ok();
}

join :: fn (thread: Handle) (exit_code: s32, err: Error) {
    if !thread { error(ERR_INVALID_HANDLE, "Cannot join. Handle is invalid."); }
    exit_code: u64 #noinit;
    err :: pthread_join(thread, auto &exit_code); 
    if err != 0 {
        estr :: cast(*u8) C.strerror(err);
        return -1, error(err, "Cannot join thread: %.", estr);
    }    
    return auto exit_code, ok();
}

current :: fn () Handle #inline {
    return pthread_self();
}

exit :: fn (exit_code: s32) Error {
    pthread_exit(auto exit_code);
    return ok();
}

