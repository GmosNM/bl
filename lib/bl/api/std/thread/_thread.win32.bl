#load "thread.bl"
#load "os/windows/winapi.bl"

_ImplThread :: _HANDLE;

_thread_impl_create :: fn (entry: ThreadEntryFn, ctx: *u8) (Thread, Error) {
    if !entry { return null, error(ERR_INVALID_HANDLE, "Cannot create thread. Handle is invalid."); }
    thread :: _CreateThread(null, 0, auto entry, auto ctx, 0, null);
    if !thread {
        ec, estr :: os_get_last_error();
        return null, error(ec, "Cannot create thread: %.", estr);
    }
    return thread, ok();
}

_thread_impl_join :: fn (thread: Thread) (exit_code: s32, err: Error) {
    if !thread { error(ERR_INVALID_HANDLE, "Cannot join. Handle is invalid."); }
    if _WaitForSingleObject(thread, _INFINITE) == _WAIT_FAILED {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    exit_code: u32;
    if _GetExitCodeThread(thread, &exit_code) == 0 {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    if _CloseHandle(thread) == 0 {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    return auto exit_code, ok();
}

_thread_impl_current :: fn () Thread #inline {
    return _GetCurrentThread();
}

_thread_impl_exit :: fn (exit_code: s32) Error {
    thread :: _thread_impl_current();
    if _TerminateThread(thread, auto exit_code) == 1 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot exit thread: %.", estr);
    }
    return ok();
}

