#load "thread.bl"
#load "os/windows/winapi.bl"

#scope _ThreadImpl

Handle :: Win32.HANDLE;

create :: fn (entry: Thread.EntryFn, ctx: *u8) (Handle, Error) {
    if !entry { return null, error(ERR_INVALID_HANDLE, "Cannot create thread. Handle is invalid."); }
    thread :: Win32.CreateThread(null, 0, auto entry, auto ctx, 0, null);
    if !thread {
        ec, estr :: os_get_last_error();
        return null, error(ec, "Cannot create thread: %.", estr);
    }
    return thread, ok();
}

join :: fn (thread: Handle) (exit_code: s32, err: Error) {
    if !thread { error(ERR_INVALID_HANDLE, "Cannot join. Handle is invalid."); }
    if Win32.WaitForSingleObject(thread, Win32.INFINITE) == Win32.WAIT_FAILED {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    exit_code: u32;
    if Win32.GetExitCodeThread(thread, &exit_code) == 0 {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    if Win32.CloseHandle(thread) == 0 {
        ec, estr :: os_get_last_error();
        return -1, error(ec, "Cannot join: %.", estr);
    }
    return auto exit_code, ok();
}

current :: fn () Handle #inline {
    return Win32.GetCurrentThread();
}

exit :: fn (exit_code: s32) Error {
    thread :: current();
    if Win32.TerminateThread(thread, auto exit_code) == 1 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot exit thread: %.", estr);
    }
    return ok();
}

