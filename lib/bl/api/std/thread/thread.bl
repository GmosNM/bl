//! ======
//! Thread
//! ======
//! 
//! ::
//! 
//!    #import "std/thread"
//! 
//! This module contains tools for managing multithreading. It's basically wrapper for
//! Windows thread system and pthread on posix systems.
//! 
//! .. warning:: This module is experimental and not fully supported across all platforms.

/// Thread entry function type.
ThreadEntryFn :: *fn (args: ...) s32;

/// Thread handle.
Thread :: _ImplThread;

/// Create and start new thread with specified `entry` function, optional arguments
/// can be passed into the `entry` function via `args`.
thread_create :: fn (entry: ThreadEntryFn, args: ...) (Thread, Error) #inline {
    return _thread_impl_create(entry, args);
}

/// Blocks until `thread` exits. Return value from worker function is returned as
/// `exit_code`. Wait timeout can be optioanlly specified by `timeout_ms` argument,
/// infinite timeout is used by default. When execution is successful all thread
/// resources are released.
thread_join :: fn (thread: Thread, timeout_ms := _IMPL_THREAD_INFINITE) (exit_code: s32, err: Error) #inline {
    return _thread_impl_join(thread, timeout_ms);
}
 