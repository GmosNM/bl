// =================================================================================================
// bl
//
// File:   error.bl 
// Author: Martin Dorazil
// Date:   19/11/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! # Error handling
//! 
//! `#load "std/error.bl"`
//! 
//! ```
//! _Error :: struct {
//!     msg: string_view;
//!     code: s32;
//! }
//! 
//! Error :: *_Error;
//! ```
//! 
//! Universal error state representation used across the API.
//! 
//! ### Example
//!
//! ```
//! div :: fn (a: s32, b: s32) (s32, Error) {
//!     if b == 0 {
//!         // Return error with message.
//!         return 0, error("Divide by zero '%/%'!", a, b);
//!     }
//!     // Return result and OK state.
//!     return a / b, ok();
//! }
//! 
//! main :: fn () s32 {
//!     loop i := -5; i <= 5; i += 1 {
//!         result, error :: div(10, i);
//!         if is_ok(error) {
//!             print("Result is %.\n", result);
//!         } else {
//!             print("Error: %.\n", error);
//!         }
//!     }
//!     return 0;
//! }
//! ```

_Error :: struct {
    msg: string_view;
    code: s32;
}

Error :: *_Error;

/// Check whether `err` is no-error valid state. Returns `false` when `err` is `null`.
is_ok :: fn (err: Error) bool #inline {
    return err == null;
}

/// Check whether `err` is representing error `code`. Returns `false` when `err` is `null`.
is_error :: fn (err: Error, code: s32) bool #inline {
    if !err { return false; }
    return err.code == code;
}

/// Creates no-error [Error](#error).
ok :: fn () Error #inline {
    return null;
}

/// No error.
//ok : Error = null;

/// Overloaded function setting up error state. Error state is global variable holding [Error](#error)
/// instance, `error` function sets desired values and return pointer to this global. That means
/// the `Error` must be handled immediately after it's returned from failing function since every
/// `Error` state points to the same memory.
/// 
/// Error creating does not require any HEAP memory alocations.
/// 
/// ```
/// fn (code: s32) Error #inline
/// ```
/// 
/// Sets error code.
/// 
/// ***
/// 
/// ```
/// fn (format: string, args: ...) Error #inline
/// ```
/// 
/// Sets error state with `ERR_UNKNOWN` code and formatted message.
/// 
/// ***
/// 
/// ```
/// fn (code: s32, format: string, args: ...) Error
/// ```
/// 
/// Sets error state with `code` and formatted message.
error :: fn {  error1; error2; error3; }

#private
_last_error_msg_buffer: [1024]u8 #thread_local;
_last_error: _Error #thread_local;

error1 :: fn (code: s32) Error #inline {
    return error3(code, std.str_empty);
}

error2 :: fn (format: string_view, args: ...) Error #inline {
    return error3(ERR_UNKNOWN, format, args);
}

error3 :: fn (code: s32, format: string_view, args: ...) Error {
    e := &_last_error;
    msg_size :: bprint(_last_error_msg_buffer, format, args);
    e.code = code;
    e.msg = string_view.{ msg_size, _last_error_msg_buffer.ptr };
    return e;
}
