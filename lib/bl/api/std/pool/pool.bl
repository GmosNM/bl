#scope std

POOL_DEFAULT_SIZE : usize : 65536; // 64kB

PoolAllocator :: struct #base Allocator {
    block_size: usize;
    allocator: *Allocator;

    used_blocks: [..]*u8;
    unused_blocks: [..]*u8;
    obsolete_blocks: [..]*u8;

    current_block: *u8;
    top: *u8;
    space: usize;
}

pool_default :: PoolAllocator.{
    base = Allocator.{ handler = auto &handler },
    block_size = POOL_DEFAULT_SIZE
};

pool_make :: fn (allocator: *Allocator, block_size := POOL_DEFAULT_SIZE) PoolAllocator #inline {
    pool: PoolAllocator;
    pool.handler = auto &handler;
    pool.block_size = block_size;
    pool.allocator = allocator;

    array_init(&pool.used_blocks, 0, pool.allocator);
    array_init(&pool.unused_blocks, 0, pool.allocator);
    array_init(&pool.obsolete_blocks, 0, pool.allocator);
    return pool;
}

pool_release :: fn (pool: *PoolAllocator) {
    reset(pool);
    loop i := 0; i < pool.unused_blocks.len; i += 1 {
        free_memory(pool.allocator, pool.unused_blocks[i]);
    }
    array_clear(&pool.unused_blocks);
    array_terminate(&pool.used_blocks);
    array_terminate(&pool.unused_blocks);
    array_terminate(&pool.obsolete_blocks);
}

pool_reset :: fn (pool: *PoolAllocator) #inline {
    reset(pool);
}

#private

handler :: fn (pool: *PoolAllocator, operation: AllocOp, size: usize, old_size: usize, ptr: *u8, alignment: usize, _: string_view, _: s32) (mem: *u8, err: Error) {
    using AllocOp;
    switch operation {
        ALLOCATE {
            return allocate(pool, size, alignment);
        }
        REALLOCATE {
            mem, err :: allocate(pool, size, alignment);
            if !is_ok(err) { return mem, err; }
            if !ptr { return mem, ok(); }
            memcpy(mem, ptr, old_size);
            return mem, ok();
        }
        FREE;

        default { panic(); }
    }
    return null, ok();
}

allocate :: fn (pool: *PoolAllocator, size: usize, alignment: usize) (mem: *u8, err: Error) {
    assert(size > 0);
    mask :: ~(alignment - 1);
    size += alignment - 1;
    if pool.space < size {
        err :: ensure_space(pool, size);
        if !is_ok(err) { return null, err; }
    }
    mem := pool.top;
    pool.top = auto (cast(usize) pool.top + size);
    pool.space -= size;
    mem = auto ((cast(usize) mem) + alignment - 1 & mask);
    return mem, ok();
}

reset :: fn (pool: *PoolAllocator) {
    if pool.current_block {
        array_push(&pool.unused_blocks, pool.current_block);
        pool.current_block = null;
    }
    loop i := 0; i < pool.used_blocks.len; i += 1 {
        array_push(&pool.unused_blocks, pool.used_blocks[i]);
    }
    array_clear(&pool.used_blocks);
    loop i := 0; i < pool.obsolete_blocks.len; i += 1 {
        free_memory(pool.allocator, pool.obsolete_blocks[i]);
    }
    array_clear(&pool.obsolete_blocks);
}

ensure_space :: fn (pool: *PoolAllocator, size: usize) Error {
    if pool.block_size == 0 { pool.block_size = POOL_DEFAULT_SIZE; }
    block_size := pool.block_size;
    loop (block_size < size) {
        block_size *= 2;
    }
    if pool.current_block {
        // The current block has not enough space.
        array_push(&pool.used_blocks, pool.current_block);
        pool.current_block = null;
    }
    if block_size > pool.block_size { resize(pool, block_size); }

    if !array_pop(&pool.unused_blocks, &pool.current_block) {
        mem, err :: allocate_memory(pool.allocator, pool.block_size);
        if !is_ok(err) { return err; }
        pool.current_block = mem;
    }

    pool.space = pool.block_size;
    pool.top = pool.current_block;
    return ok();
}

resize :: fn (pool: *PoolAllocator, new_block_size: usize) {
    pool.block_size = new_block_size;
    loop i := 0; i < pool.used_blocks.len; i += 1 {
        array_push(&pool.obsolete_blocks, pool.used_blocks[i]);
    }
    array_clear(&pool.used_blocks);
    loop i := 0; i < pool.unused_blocks.len; i += 1 {
        array_push(&pool.obsolete_blocks, pool.unused_blocks[i]);
    }
    array_clear(&pool.unused_blocks);
}
