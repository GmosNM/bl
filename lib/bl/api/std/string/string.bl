#import "std/print"

#scope std

//! # String
//! 
//! `#import "std/string"`
//! 
//! Builtin dynami string container. 
//! 
//! ```
//! string :: struct {
//!     len: s64;
//!     ptr: *u8;
//! }
//! 
//! 
//! // Compile-time string literal
//! my_string :: "This is my string!"; 
//! 
//! 
//! // Dynamic string allocated on heap.
//! // New dynamic string can be created from string literal. 
//! my_string :: std.str_new("This is my string!");
//! defer std.str_delete(&my_string);
//! ``` 
//!
//! BL strings are zero terminated except of sub-string view function (terminator cannot be added 
//! because we cannot modify original string).
//! 
//! **note**: String manipulation functions are related only to dynamic strings and cannot be used 
//! with string literals since those are constants allocated on stack.

/// Overloaded function creating new dynamic string instance. Created string is guaranteed to be 
/// zero terminated.
/// 
/// **Overloads:**
/// ```c
/// fn (allocator: *Allocator = null) string 
/// fn (size: s64, allocator: *Allocator = null) string 
/// fn (v: string_view, allocator: *Allocator = null) string
/// fn (cstr: *u8, allocator: *Allocator = null) string
/// ```
str_new :: fn {
    fn (allocator: *Allocator = null) string {
        return make_string(string_view.{}, 0, allocator);
    };
    fn (size: s64, allocator: *Allocator = null) string {
        assert(size > 0);
        return make_string(string_view.{}, size, allocator);
    };
    fn (v: string_view, allocator: *Allocator = null) string {
        return make_string(v, v.len, allocator);
    };
    fn (cstr: *u8, allocator: *Allocator = null) string {
        len :: C.strlen(auto cstr);
        return make_string(string_view.{
            len = auto len,
            ptr = cstr
        }, auto len, allocator);
    };
}

/// Delete dynamic string.
str_delete :: fn (v: *string) {
    if !v.ptr { return; }
    free_block(v.ptr);
    v.len = 0;
    v.ptr = null;
};

/// Ensure that string's underlying buffer is capable to hold `count` of characters and eventually 
/// do preallocation if buffer is too small. The reserve does not take in account if the string's 
/// buffer is full or not. The function does nothing if buffer size is enough.
str_reserve :: fn (v: *string, count: s64) {
    v.ptr = make_more_room_if_needed(v.ptr, cast(usize)count);
}

/// Get currently allocated memory used by the string in bytes.
str_get_allocated_bytes :: fn (v: string) usize #inline {
    head :: get_block_head(v.ptr);
    return head.allocated_size;
}

/// Clear dynamic string but keep allocated storage.
str_clear :: fn (v: *string) {
    v.len = 0;
    set_terminator(@v);
};

/// Append dynamic string with any value. Allocation is done in case there is not enough space 
/// reminding in string. The `v` string is supposed to be allocated on heap.
///
/// Returns count of characters appended to the string excluding zero terminator.
str_append :: fn {
    _str_append_str;
    _str_append_any;
}

_str_append_str :: fn (v: *string, other: string_view) s32 {
    new_len :: v.len + other.len;
    v.ptr = make_more_room_if_needed(v.ptr, auto new_len);        
    memcpy(ptr_shift_bytes(v.ptr, auto v.len), other.ptr, auto other.len);
    v.len = new_len;
    set_terminator(@v);
    return auto other.len;
}

_str_append_any :: fn (v: *string, add: Any) s32 #inline {
    return _print_impl(v, "%", []Any.{ 1, &add }, auto v.len);
}

/// Append string with multiple values passed as `args` and return `@v`. New allocation is done in 
/// case there is space no left in currently allocated string's memory to append `args`.
str_concat :: fn (v: *string, args: ...) string {
    loop i := 0; i < args.len; i += 1 {
        str_append(v, args[i]);
    }
    return @v;
}

/// Clear the `v` string and append multiple values passed as `args`. Returned value is dereference 
/// of the original `v` string after new values are appended. New allocation is done in case there 
/// is space no left in currently allocated
/// string's memory to append `args`.
///
/// **hint**: Use this function in case you need create only temporary string i.e. file path.
/// 
/// ```
/// VERSION :: "1.0.0";
///
/// path := std.str_new();
/// defer std.str_delete(path);
/// std.set_cwd(std.str_clear_concat(&path, "my-dir/project-", VERSION));
/// ```
str_clear_concat :: fn (v: *string, args: ...) string {
    str_clear(v);
    loop i := 0; i < args.len; i += 1 {
        str_append(v, args[i]);
    }
    return @v;
}

/// Compare `first` and `second` strings in specified range `n` and return `true` if they are the same 
/// otherwise return `false`.
///
/// Range value `n` is optional and ignored when it's less than 0.
str_match :: fn (first: string_view, second: string_view, n := -1) bool {
    // @CLEANUP: simplify this
    range := n;
    if range < 0 { 
        if first.len != second.len { return false; }
        range = auto std.max(first.len, second.len); 
    } else if first.len != second.len {
        if first.len < range { return false; }
        if second.len < range { return false; }
    }
    loop i := 0; i < range && i < first.len && i < second.len; i += 1 {
        if first[i] != second[i] { return false; }
    }
    return true;
}

str_compare :: fn (first: string_view, second: string_view) s32 {
    len :: std.max(first.len, second.len);
    loop i := 0; i < len; i += 1 {
        f: u8; s: u8;
        if i < first.len  { f = first[i]; }
        if i < second.len { s = second[i]; }
        diff :: s - f;
        if diff != 0 { return auto diff; }
    }
    return 0;
}

/// Convert first `count` characters of `str` to `f32`.
str_to_f32 :: fn (str: string_view, count := -1) f32 {
    if count < 0 { count = auto str.len; }
    else if count > str.len { count = auto str.len; }
    n := 0;
    e := 1;
    is_negative := false;
    is_after_comma := false;

    loop count > 0 {
        c :: str[0];
        if c == '-' {
            is_negative = true;
        } else if c == '.' {
            if is_after_comma { break; }
            is_after_comma = true;
        } else if c >= '0' && c <= '9' {
            n = n * 10 + (auto c - '0');
            if is_after_comma {
                e *= 10;
            }
        } else {
            break;
        }

        consume_char(&str);
        count -= 1;
    }

    v := cast(f32) n / cast(f32) e; 
    if is_negative { v = -v; } 
    return v;
}

/// Convert first `count` characters from `str` to `s64`.
str_to_s64 :: fn (str: string_view, count := -1) s64 {
    if count < 0 { count = auto str.len; }
    else if count > str.len { count = auto str.len; }
    n: s64;
    is_negative := false;
    loop count > 0 {
        c :: str[0];
        if c == '-' {
            is_negative = true;
        } else if c >= '0' && c <= '9' {
            n = n * 10 + (auto c - '0');
        } else {
            break;
        }

        consume_char(&str);
        count -= 1;
    }
    if is_negative { n = -n; } 
    return n;
}

/// Split input string `str` into two tokens based on the last occurrence of `delimiter`. Delimiter 
/// is not included in resulting tokens. Result tokens only points into original memory of the 
/// `str`, they are not supposed to be freed.
/// 
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. The `di` output variable is set to 
/// index of the split position when it's not `null`.
/// 
/// **warning**: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are 
/// not supposed to be freed. 
///
/// ### Example
///
/// ```
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if std.str_split_by_last("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
/// 
///     return 0;
/// }
/// ```
str_split_by_last :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
    i := str.len - 1;
    loop ; i >= 0 && str[i] != delimiter; i -= 1 {}

    if i < 0 { // not found
        if lhs { @lhs = str; }
        if di { (@di) = auto i; }
        return false;
    }

    if lhs {
        lhs.len = i;
        lhs.ptr = str.ptr;
    }

    if rhs {
        rhs.len = str.len - i - 1;
        rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
    }

    if di { (@di) = auto i; }
    return true;
}

/// Split input string `str` at index position and return true when split was done. Result tokens 
/// only points into original memory of the `str`, they are not supposed to be freed. When index is 
/// out of `str` range function return `false`, `lhs` and `rhs` buffers are not modified.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. 
/// 
/// **warning**: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are 
/// not supposed to be freed. 
///  
/// ### Example
///
/// ```
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if std.str_split_at_index("foobar", 3, &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
/// 
///     return 0;
/// }
/// ```
str_split_at_index :: fn (str: string_view, index: s32, lhs: *string_view = null, rhs: *string_view = null) bool {
    if index > str.len { return false; }
    if index < 0 { return false; }
    lhsc :: cast(s64) index;
    rhsc :: cast(s64) str.len - index;
    if lhs { @lhs = string_view.{ lhsc, str.ptr }; }
    if rhs { @rhs = string_view.{ rhsc, ptr_shift_bytes(str.ptr, lhsc) }; }
    return true;
}

/// Split input string `str` into two tokens based on the first occurrence of `delimiter`. Delimiter 
/// is not included in resulting tokens. Result tokens only points into original memory of the 
/// `str`, they are not supposed to be freed.
/// 
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. 
/// 
/// **warning**: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are 
/// not supposed to be freed. 
///  
/// ### Example
///
/// ```
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if std.str_split_by_first("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
/// 
///     return 0;
/// }
/// ```
str_split_by_first :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
    i := 0;
    loop ; i < str.len && str[i] != delimiter; i += 1 {}

    if i >= str.len { // not found
        if lhs { @lhs = str; }
        if di { (@di) = auto i; }
        return false;
    }

    if lhs {
        lhs.len = i;
        lhs.ptr = str.ptr;
    }

    if rhs {
        rhs.len = str.len - i - 1;
        rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
    }

    if di { (@di) = auto i; }
    return true;
}

/// Overloaded function inserting one character or other string at desired position.
///  
/// **Overloads:**
/// ```c
/// fn (str: *string, index: s32, v: u8) bool #inline
/// fn (str: *string, index: s32, v: string_view) bool
/// ```
///
/// **note**: Function does nothing (return `false`) when `v` string is empty.
str_insert :: fn { _string_insert; _char_insert; };

/// Erase one character at `index` position and return true when character was erased. The '`index` 
/// value is checked to fit in string bounds.
str_erase :: fn (str: *string, index: s32) bool {
    if str.len == 0 { return false; }
    if index >= str.len { return false; }
    index += 1;
    loop ; index < str.len; index += 1 {
        (@str)[index-1] = (@str)[index];
    }
    str.len -= 1;
    set_terminator(@str);
    return true;
}

/// Split the `str` input string by delimiter and return new slice containing all found sub-strings. 
/// 
/// **warning**: String slice should be terminated by `slice_terminate` call.
///
/// **warning**: Slice elements are not guaranteed to be zero terminated and they are not supposed 
/// to be freed. 
str_split_by :: fn (str: string_view, delimiter: u8) []string_view {
    count :: str_count_of(str, delimiter) + 1;
    ret: []string_view;
    slice_init(&ret, count);
    ri: s32;
    lhs: string_view;
    rhs: string_view;
    loop str_split_by_first(str, delimiter, &lhs, &rhs) {
        ret[ri] = lhs;
        ri += 1;
        str = rhs;
    }
    if ri == 0 { ret[ri] = lhs; }
    else       { ret[ri] = rhs; }
    return ret;
}

/// Counts desired character occurrence in the input string.
str_count_of :: fn (str: string_view, c: u8) s32 #inline {
    count := 0;
    loop i := 0; i < str.len; i += 1 {
        if str[i] == c { count += 1; }
    }
    return count;
}

/// Converts input string to lower case.
str_to_lower :: fn (str: string_view) #inline {
    loop i := 0; i < str.len; i += 1 {
        str[i] = auto C.tolower(auto str[i]); 
    }
}

/// Converts input string to upper case.
str_to_upper :: fn (str: string_view) #inline {
    loop i := 0; i < str.len; i += 1 {
        str[i] = auto C.toupper(auto str[i]); 
    }
}

/// Replace all found occurrences of character `c` in the input string with `with` character and 
/// return count of replacements made. This function cannot be used with constant string literals 
/// as input.
/// 
/// If `with` replacement is 0 character, all `c` occurrences will be erased from the string.
/// 
/// Function return count of replaced characters or zero.
str_replace_all :: fn (str: *string, c: u8, with := '\0') s32 {
    replaced := 0;
    loop i := 0; i < (@str).len; i += 1 {
        if (@str)[i] == c { 
            replaced += 1;
            (@str)[i] = with; 
        }
    }
    if with == '\0' {
        shrink_by(str);
    }
    return replaced;
}

/// Calculates string `u32` hash.
str_hash :: fn (str: string_view) u32 {
    hash : u32 = 5381;
    loop i := 0; i < str.len; i += 1 {
        c :: cast(u32) str[i];
        hash = ((hash << 5) + hash) + c;
    }
    return hash;
}

/// Helper inline function returning `true` when string is null. In such case string `len` could be 
/// any value.
str_is_null  :: fn (s: string_view) bool #inline { return s.ptr == null; }

/// Helper inline function returning `true` when string is empty. In such case string `ptr` could 
/// be any pointer.
str_is_empty :: fn (s: string_view) bool #inline { return s.len == 0; }

str_empty :: string.{};
str_view_empty :: string_view.{};

/// Helper inline function returning `true` when string is empty and null. 
str_is_null_or_empty :: fn (s: string_view) bool #inline { return s.ptr == null || s.len == 0; }


/// Creates substring from passed string starting at `start` index of input string and ending at 
/// `start` + `len` index.
/// 
/// Starting index `start` must be greater than 0 and less than `str.len`. `len` specifies optional 
/// length of substring. When not specified, length from `start` to the end of the `str` is used.
/// 
/// **warning**: Result sub-string is not guaranteed to be zero terminated and it's not supposed to
/// be freed.
str_sub :: fn (s: string_view, start: s64, len : s64 = -1) string_view #inline {
    if len < -1 { panic("Invalid substring len %", len); }
    if start < 0 { panic("Invalid substring start %", start); }
    if start > s.len { panic("Invalid substring start index %", start); }
    if len == -1 { len = s.len - start; }
    if len == 0 { return str_empty; }
    return string_view.{ len, &s[start] };
}

/// Checks whether string is zero terminated.
str_is_zero_terminated :: fn (str: string_view) bool {
    str.len += 1;
    return str[str.len-1] == '\0';
}

/// Converts string view into C string representation. The original string `str` must be zero-terminated
/// (checked by assert).
strtoc :: fn (str: string_view) *C.char #inline {
    assert(str_is_zero_terminated(str));
    return auto str.ptr;
}

/// Converts C string into string view. The `len` argument is optional and is used as string length if
/// it's greater than -1, otherwise the strlen is used.
///
/// Empty string view is returned when the input C string is null.
ctostr :: fn (cstr: *C.char, len : s64 = -1) string_view #inline {
    if !cstr { return str_view_empty; }
    if len < 0 { len = auto C.strlen(cstr); }
    return string_view.{ len, auto cstr };
}

#private

make_string :: fn (data: string_view, cap: s64, allocator: *Allocator) string {
    tmp : string #noinit;
    tmp.ptr = alloc_block(auto cap, allocator);
    tmp.len = data.len;
    memcpy(tmp.ptr, data.ptr, auto data.len);
    set_terminator(tmp);
    return tmp;
}

STRING_BLOCK_SIZE :: 32 - sizeof(BlockHead);

BlockHead :: struct {
    allocated_size: usize;
    allocator: *Allocator;
};

make_more_room_if_needed :: fn (ptr: *u8, size: usize) *u8 {
    head :: get_block_head(ptr);
    allocated :: head.allocated_size;
    allocator :: head.allocator;
    if size > allocated {
        new_ptr := alloc_block(size, allocator);
        memcpy(new_ptr, ptr, allocated);
        free_block(ptr);
        ptr = new_ptr;
    }

    return ptr;
};

alloc_block :: fn (size: usize, allocator: *Allocator) *u8 {
    d := size / STRING_BLOCK_SIZE + 1;
    size = d * STRING_BLOCK_SIZE;

    alloc_size := size + sizeof(BlockHead) + sizeof(u8);
    mem, err :: allocate_memory(allocator, alloc_size, alignof(u8));
    if !is_ok(err) { panic(err); }
    tmp := cast(*BlockHead) mem;
    tmp.allocated_size = size;
    tmp.allocator = allocator;

    return cast(*u8) (cast(usize) tmp + sizeof(BlockHead));
};

free_block :: fn (ptr: *u8) {
    head :: get_block_head(ptr);
    allocator :: head.allocator;
    free_memory(allocator, get_allocation_ptr(ptr));
};

get_allocation_ptr :: fn (ptr: *u8) *u8 {
    return cast(*u8) ((cast(usize) ptr) - sizeof(BlockHead));
};

get_block_head :: fn (ptr: *u8) *BlockHead #inline {
    return cast(*BlockHead) get_allocation_ptr(ptr);
};

set_terminator :: fn (v: string) {
    v.len += 1;
    v[v.len - 1] = 0;
    v.len -= 1;
};

consume_char :: fn (s: *string_view) u8 #inline {
    c :: (@s)[0];
    if s.len > 1 { s.ptr = &(@s)[1]; }
    s.len -= 1;

    return c;
}

shrink_by :: fn (str: *string, c := '\0') {
    tmp := @str;
    n := 0;
    is := -1;
    loop i := 0; i < tmp.len; i += 1 {
        if tmp[i] == c {
            if is < 0 { is = i; }
            n += 1;
        } else if is > -1 {
            buf :: tmp[is];
            tmp[is] = tmp[i];
            tmp[i] = buf;
            is = -1;
            i = is + 1;
            n = 0;
        }
    }
    tmp.len -= n;
    @str = tmp;
}

_char_insert :: fn (str: *string, index: s32, v: u8) bool #inline {
    return _string_insert(str, index, string_view.{ 1, &v });
}

_string_insert :: fn (str: *string, index: s32, v: string_view) bool {
    if !str { panic("Input string is null!"); }
    if v.len == 0 { return false; }
    if index > str.len { return false; }
    if index == str.len { // appending
        str_append(str, v);
        return true;
    }

    orig_len :: str.len;
    new_len :: str.len + v.len;
    str.ptr = make_more_room_if_needed(str.ptr, auto new_len);
    str.len = new_len;
    loop i := orig_len-1; i >= index; i -= 1 {
        (@str)[i+v.len] = (@str)[i];
    }
    loop i := 0; i < v.len; i += 1 {
        (@str)[i+index] = v[i];
    }
    set_terminator(@str);
    return true;
}
