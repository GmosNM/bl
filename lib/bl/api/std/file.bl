//************************************************************************************************
// bl
//
// File:   file.bl 
// Author: Martin Dorazil
// Date:   13/8/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/string.bl"

/*
 * File
 *
 * Description:
 *   Opaque file handle. 
 */
File :: *u8; 

/*
 * FileOpenMode
 *
 * Description:
 *   Used as additional information during file opening.
 *
 * Variants:
 *   Read:
 *     Open file for reading.
 * 
 *   Write: 
 *     Open file for writing.
 * 
 *   Binary:
 *     Open file as binary.
 */
FileOpenMode :: enum {
    Read;
    Write;
    Binary
};

/*
 * file_create
 * 
 * Description:
 *   Create and open new file or open existing one. Call of file_close is required after file is
 *   is no longer needed.
 * 
 * Arguments: 
 *   filename: 
 *     File name on disk.
 *
 * Result:
 *   File handle or null.
 */
file_create :: fn (filename: string) File {
    mode := "w+";
    return c_fopen(auto filename.ptr, auto mode.ptr); 
};

/*
 * file_open
 * 
 * Description:
 *   Open an existing file or create new one. Call of file_close is required after file is
 *   is no longer needed.
 * 
 * Arguments: 
 *   filename: 
 *     File name on disk.
 *
 *   modes: 
 *     File open modes can be passed here in any order. 
 *
 * Result:
 *   File handle or null.
 */
file_open :: fn (filename: string, modes: ...FileOpenMode) File {
    mode := {:[4]u8: 0};

    if modes.len == 0 {
        mode[0] = 'r';
        mode[1] = 'w';
    } else {
        loop i := 0; i < modes.len; i += 1 {
            if i >= mode.len - 1 { break; }
            m := modes[i];
            if m == FileOpenMode.Read { mode[i] = 'r'; }
            if m == FileOpenMode.Write { mode[i] = 'w'; }
            if m == FileOpenMode.Binary { mode[i] = 'b'; }
        }
    }

    return c_fopen(auto filename.ptr, auto mode.ptr); 
};

/*
 * file_close
 * 
 * Description:
 *   Close openned file. 
 * 
 * Arguments: 
 *   file: 
 *     File to be closed.
 */
file_close :: fn (file: File) {
    if file == null { return; }
    c_fclose(file);
};

/*
 * file_read_all
 * 
 * Description:
 *   Load whole content of file into the string buffer. Call string_delete when 
 *   string buffer is no longer needed.
 * 
 * Arguments: 
 *   file: 
 *     File to be read.
 *
 * Result:
 *   String containing file content or empty string.
 */
file_read_all :: fn (file: File) string {
    c_fseek(file, 0, SEEK_END);
    size := cast(usize) c_ftell(file);
    if size == 0 {
        return string_new();
    }

    c_fseek(file, 0, SEEK_SET);
    tmp := string_new_reserved((size + 1) * sizeof(u8));
    read := c_fread(tmp.ptr, sizeof(u8), size, file);
    tmp.len = auto read + 1;
    tmp[tmp.len - 1] = '\0';
    return tmp;
};

/*
 * file_get_size_bytes
 * 
 * Description:
 *   Determinates size of file content in bytes.
 * 
 * Arguments: 
 *   file: 
 *     File handle.
 *
 * Result:
 *   Size of file content in bytes.
 */
file_get_size_bytes :: fn (file: File) usize {
    c_fseek(file, 0, SEEK_END);
    size :: cast(usize) c_ftell(file);
    c_fseek(file, 0, SEEK_SET);
    return size;
}

/*
 * file_real_all_binary
 * 
 * Description:
 *   Read content of whole binary file into destination buffer.
 * 
 * Arguments: 
 *   file: 
 *     File to be read.
 * 
 *   dest;
 *     Destination buffer.
 *
 *   size:
 *     Count of bytes which will be copied from file into the buffer.
 *
 * Result:
 *   Bytes written into buffer.
 */
file_read_all_binary :: fn (file: File, dest: *u8, size: usize) usize {
    return c_fread(dest, sizeof(u8), size, file);
}

/*
 * file_write_binary
 * 
 * Description:
 *   Write content of passed buffer into the binary file.
 * 
 * Arguments: 
 *   file: 
 *     File to be modified.
 * 
 *   data;
 *     Source data buffer.
 *
 *   size:
 *     Count of bytes to be written.
 *
 * Result:
 *   Bytes written into buffer.
 */
file_write_binary :: fn (file: File, data: *u8, size: usize) usize {
    return c_fwrite(data, sizeof(u8), size, file);
}

file_write_string :: fn (file: File, data: string) usize {
    return c_fwrite(data.ptr, sizeof(u8), auto data.len, file);
}

#private

SEEK_SET :: 0;
SEEK_CUR :: 1;
SEEK_END :: 2;
