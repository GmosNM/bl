//***********************************************************************************************t
// bl
//
// File:   debug.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

/*!
print_log
=========

Declaration
-----------
::

    print_log :: fn (format: string, args: ...)

Description
-----------
Print debug log using `_context.print_log_fn` function. 

Arguments
---------
* `format` Formating string accepting `%` character as value placeholder.
* `args` Optional values passed in order which is supposed to be printed
         out.
*/
print_log :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Message, "", 0, format, args);
};

/*!
print_warn
==========

Declaration
-----------
::

    print_warn :: fn (format: string, args: ...)

Description
-----------
Print debug warning using `_context.print_log_fn` function. 

Arguments
---------
* `format` Formating string accepting '%' character as value placeholder.
* `args` Optional values passed in order which is supposed to be printed
         out.
 */
print_warn :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Warning, "", 0, format, args);
};


/*!
print_err
=========

Declaration
-----------
::

    print_err :: fn (format: string, args: ...)

Description
-----------
Print debug error using _context.print_log_fn function. 

Arguments
---------
* `format` Formating string accepting `%` character as value placeholder.
* `args` Optional values passed in order which is supposed to be printed
         out.
*/
print_err :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Error, "", 0, format, args);
};

/*!
assert
======

Declaration
-----------
::

    assert :: fn (cond: bool, loc := #call_location)

Description
-----------
Interrupt execution when `cond` is false. Assert use `_context.print_log_fn`
to print out error message containing assert location in source code.

Arguments
---------
* `cond` Condition to be validated. 
*/
assert :: fn (cond: bool, loc := #call_location) {
    if cond { return; }
    _context.print_log_fn(PrintLogKind.Assert, loc.file, loc.line, "Assertion failed!");
    //if IS_DEBUG { _os_debug_break(); } // @PERFORMANCE: cound be static if later
    unreachable;
};

/*!
debug_break
===========

Declaration
-----------
::

    debug_break :: fn () #inline

Description
-----------
Triggers breakpoint, when debbuging, at curent call location.

*/
debug_break :: fn () #inline {
    _os_debug_break();
}

/*!
panic
=====

Declaration
-----------
::

    panic :: fn (args: ...)

Description
-----------
Abort execution and eventually print panic message if there is one specified. First
passed argument in 'args' will act like format string and can be eventually followed
by any additional values required.

Arguments
---------
* `args` Variable argument count of Any type. 

Example
-------
.. code-block:: c

    panic(); // abort without any messages
    panic("oops!"); // abort with message prited out.
    panic("Failed with error: %", errn); // first argument passed acts like formating string

*/
panic :: fn (args: ...) {
    if args.len == 0 { unreachable; }
    tmp := {:...: args.len, args.ptr };
    format := "";
    arg := args[0];
    if arg.type_info.kind == TypeKind.String {
        format = ^cast(*string) arg.data;
        tmp = {:...:
                args.len - 1,
                auto ptr_shift_bytes(auto args.ptr, auto sizeof(arg))};
    }
    _context.print_log_fn(PrintLogKind.Panic, "", 0, format, tmp);
    unreachable;
};

/*!
PrintLogKind
============

Declaration
-----------
.. code-block:: c

    PrintLogKind :: enum u8 {
        Message;
        Warning;
        Error;
        Assert;
        Panic;
    };

Description
-----------
Kinds of log messages.

Variants
--------
* `Message` Ordinary debug log message.
* `Warning` Warning log message.
* `Error` Error log message.
* `Assert` Assert log message.
* `Panic` Panic log message.
*/
PrintLogKind :: enum u8 {
    Message;
    Warning;
    Error;
    Assert;
    Panic;
};

_print_log_default :: fn (kind: PrintLogKind, file: string, line: s32, format: string, args: ...) {
    out := OS_STDOUT;
    buf: [PRINT_MAX_LENGTH]u8 #noinit;
    tag: string;
    w: s32;
    switch kind {
        PrintLogKind.Message { tag = "log: "; }
        PrintLogKind.Warning { tag = "warn: "; }
        PrintLogKind.Error   { tag = "error: "; out = OS_STDERR; }
        PrintLogKind.Assert  { tag = "assert [%:%]: "; out = OS_STDERR; }
        PrintLogKind.Panic   { tag = "panic: "; out = OS_STDERR; }
    }
    w = bprint(buf, tag, file, line);
    w = boprint(buf, w, format, args);
    w = boprint(buf, w, "\n");
    __os_write(out, buf.ptr, auto w);
};

