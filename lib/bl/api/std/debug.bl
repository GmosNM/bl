//***********************************************************************************************t
// bl
//
// File:   debug.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/basic.bl"
#load "std/utils.bl"

/*!
# print_log
## Declaration
```c
print_log :: fn (format: string, args: ...)
```

## Description
  Print debug log using `_context.print_log_fn` function. 

## Arguments
  * `format`
    Formating string accepting `%` character as value placeholder.
  * `args`
    Optional values passed in order which is supposed to be printed
    out.
*/
print_log :: fn (format: string, args: ...) {
    tmp := {:[]Any: args.len, args.ptr };
    _context.print_log_fn(PrintLogKind.Message, format, tmp, #file, #line);
};

/*!
# print_warn
## Declaration
```c
print_warn :: fn (format: string, args: ...)
```

## Description
  Print debug warning using `_context.print_log_fn` function. 

## Arguments: 
  * `format`
    Formating string accepting '%' character as value placeholder.
  * `args`
    Optional values passed in order which is supposed to be printed
    out.
 */
print_warn :: fn (format: string, args: ...) {
    tmp := {:[]Any: args.len, args.ptr };
    _context.print_log_fn(PrintLogKind.Warning, format, tmp, #file, #line);
};


/*!
# print_err
## Declaration
```c
print_err :: fn (format: string, args: ...)
```

## Description
  Print debug error using _context.print_log_fn function. 

## Arguments
  * `format`
    Formating string accepting `%` character as value placeholder.
  * `args`
    Optional values passed in order which is supposed to be printed
    out.
*/
print_err :: fn (format: string, args: ...) {
    tmp := {:[]Any: args.len, args.ptr };
    _context.print_log_fn(PrintLogKind.Error, format, tmp, #file, #line);
};

/*!
# assert
## Declaration
```c
assert :: fn (cond: bool)
```

## Description
  Abort execution when passed condition is resulting in `false`
  value.

## Arguments
  * `cond`
    Condition to be validated. 

*/
assert :: fn (cond: bool, loc: *CallLocation = #call_location) {
    if cond { return; }
    eprint(">>> Assertion failed on %:%.\n", loc.file, loc.line);
    if IS_DEBUG { _os_debug_break(); } // @PERFORMANCE: cound be static if later
    unreachable;
};

debug_break :: fn () #inline {
    _os_debug_break();
}
