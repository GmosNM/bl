//***********************************************************************************************t
// bl
//
// File:   debug.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#import "std/array"

//! =====
//! Debug
//! =====
//! 
//! ::
//! 
//!     #load "std/debug.bl"
//! 
//! ::
//!
//! Set of common debugging tools.
//! @Incomplete: documentation of `debugbreak` builtin.

/// Print debug log using `_context.print_log_fn` function. See also :ref:`print`.
print_log :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Message, "", 0, format, args);
};

/// Print debug warning using `_context.print_log_fn` function. See also :ref:`print`.
print_warn :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Warning, "", 0, format, args);
};

/// Print debug error using _context.print_log_fn function. See also :ref:`print`.
print_err :: fn { print_err_e; print_err_msg; }

/// Interrupt execution when `cond` is false. Assert use `_context.print_log_fn`
/// to print out error message containing assert location in source code.
///
/// .. important:: All calls to the assert function are removed from release builds
///                by default see :ref:`BuildMode` when :ref:`Target`.assert_mode is
///                is not ``AlwaysEnabled``.
///
/// .. warning:: There is no argument validation in case the assert call is removed from compilation.
assert :: fn (cond: bool, loc := #call_location) #compiler {
    if cond { return; }
    _context.print_log_fn(PrintLogKind.Assert, loc.file, loc.line, "Assertion failed!");
    unreachable;
};

// Compiler internal static assert handler, this is supposed to be used via #assert directive,
// not directly.
__static_assert :: fn (expr: bool) #compiler {
    if !expr { unreachable; }
}

/// Abort execution and eventually print panic message if there is one specified. First
/// passed argument in 'args' will act like format string and can be eventually followed
/// by any additional values required.
/// 
/// Example
/// -------
/// ::
/// 
///     panic(); // abort without any messages
///     panic(error); // abort with :ref:`Error`.
///     panic("oops!"); // abort with message prited out.
///     panic("Failed with error: %", errn); // first argument passed acts like formating string
panic :: fn { panic_empty; panic_error; panic_msg; }

/// Kinds of log messages.
/// 
/// Variants
/// --------
/// * `Message` Ordinary debug log message.
/// * `Warning` Warning log message.
/// * `Error` Error log message.
/// * `Assert` Assert log message.
/// * `Panic` Panic log message.
PrintLogKind :: enum u8 {
    Message;
    Warning;
    Error;
    Assert;
    Panic;
};

__print_log_default :: fn (kind: PrintLogKind, file: string, line: s32, format: string, args: ...) {
    out := OS_STDOUT;
    buf: [PRINT_MAX_LENGTH]u8 #noinit;
    tag: string;
    w: s32;
    switch kind {
        PrintLogKind.Message { tag = "log: "; }
        PrintLogKind.Warning { tag = "warn: "; }
        PrintLogKind.Error   { tag = "error: "; out = OS_STDERR; }
        PrintLogKind.Assert  { tag = "assert [%:%]: "; out = OS_STDERR; }
        PrintLogKind.Panic   { tag = "panic: "; out = OS_STDERR; }
    }
    w = bprint(buf, tag, file, line);
    w += bprint(slice_range(buf, w), format, args);
    w += bprint(slice_range(buf, w), "\n");
    __os_write(out, buf.ptr, auto w);
};

/// Start measure elapsed milliseconds in the current scope. This function call will push the current
/// time into the thread-local queue. Measurement must be ended by :ref:`measure_elapsed_ms_end` call.
///
/// Example
/// -------
/// ::
///     measure_elapsed_ms_begin();
///     defer measure_elapsed_ms_end("Name");
///
/// .. warning:: Every `measure_elapsed_ms_begin` must have corresponding :ref:`measure_elapsed_ms_end` call.
measure_elapsed_ms_begin :: fn () #inline {
    array_push(&_elapsed_ms_stack, os_tick_ms());
}

/// Pop the last start time from the runtime measurement queue and log the result time difference when 
/// the name is specified. Function return time difference between the current time and last start time. 
measure_elapsed_ms_end :: fn (name := String.empty) f64 #inline {
    if _elapsed_ms_stack.len == 0 { return 0.0; }
    index :: _elapsed_ms_stack.len - 1;
    start_ms :: _elapsed_ms_stack[index];
    _elapsed_ms_stack.len -= 1;
    elapsed_ms :: os_tick_ms() - start_ms;
    if !String.is_empty(name) { print_log("% took %ms.\n", name, elapsed_ms); }
    if index == 0 { array_terminate(&_elapsed_ms_stack); }
    return elapsed_ms;
}

#private
_elapsed_ms_stack: [..]f64 #thread_local;

panic_empty :: fn () {
    unreachable;    
}

panic_error :: fn (err: Error) {
    _context.print_log_fn(PrintLogKind.Panic, "", 0, "%", err);
    unreachable;    
}

panic_msg :: fn (format: string, args: ...) {
    _context.print_log_fn(PrintLogKind.Panic, "", 0, format, args);
    unreachable;
}

print_err_e :: fn (err: Error) #inline {
    _context.print_log_fn(PrintLogKind.Error, "", 0, "%", err);
};

print_err_msg :: fn (format: string, args: ...) #inline {
    _context.print_log_fn(PrintLogKind.Error, "", 0, format, args);
};
