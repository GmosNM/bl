//************************************************************************************************
// bl
//
// File:   dir.bl 
// Author: Martin Dorazil
// Date:   26/2/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "std/string.bl"

/*!
# Directory
## Declaration
```c
Directory :: *u8; 
```

## Description
  Opaque directory handle. 
 */
Directory :: *u8;

/*!
# dir_open
## Declaration
```c
dir_open :: fn (name: string) Directory
```

## Description
  Open an existing directory with specified name.

## Arguments
  * `name`
    Directory name.

## Result
  File directory handle or null.
*/
dir_open :: fn (name: string) Directory #inline {
    return _os_opendir(name);
}

/*!
# dir_close
## Declaration
```c
dir_close :: fn (dir: Directory)
```

## Description
  Close directory opened by 'dir_open'.

## Arguments
  * `dir`
    Directory handle.
*/
dir_close :: fn (dir: Directory) #inline {
    _os_closedir(dir);
}

dir_scan :: fn (dir: Directory, out_name: *string) bool #inline {
    if dir == null { return false; }
    if out_name == null { panic("Invalid out_name parameter!"); }
    return _os_scandir(dir, out_name);
}