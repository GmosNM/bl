Renderer :: struct {
    vki: VkInstance;
    surface: VkSurfaceKHR;
    physical_device: VkPhysicalDevice;
    device: VkDevice;
    graphics_queue: VkQueue;
    present_queue: VkQueue;
    swap_chain: VkSwapchainKHR;
    swap_chain_images: []VkImage;
    swap_chain_image_format: VkFormat;
    swap_chain_extent: VkExtent2D;
    swap_chain_image_views: []VkImageView;
    render_pass: VkRenderPass;
    pipeline_layout: VkPipelineLayout;
    graphics_pipeline: VkPipeline;
    swap_chain_framebuffers: []VkFramebuffer;
    command_pool: VkCommandPool;
    command_buffers: []VkCommandBuffer;

    image_available_semaphore: [MAX_FRAMES_IN_FLIGHT]VkSemaphore;
    render_finished_semaphore: [MAX_FRAMES_IN_FLIGHT]VkSemaphore;
    in_flight_fences: [MAX_FRAMES_IN_FLIGHT]VkFence;

    current_frame: s64;
    frame_buffer_resized: bool
};

renderer_new :: fn () *Renderer {
    r := cast(*Renderer) mem_calloc(1, sizeof(Renderer));
    
    create_instance(r);
    create_surface(r);
    pick_physical_device(r);
    create_logical_device(r);
    create_swap_chain(r);
    create_image_views(r);
    create_render_pass(r);
    create_graphics_pipeline(r);
    create_frame_buffers(r);
    create_command_pool(r);
    create_command_buffers(r);
    create_sync_objects(r);

    glfwSetWindowUserPointer(app.window, auto r);
    glfwSetFramebufferSizeCallback(app.window, &handle_window_resize);

    return r;
};

renderer_delete :: fn (r: *Renderer) {
    vkDeviceWaitIdle(r.device);

    cleanup_swap_chain(r);

    loop i := 0; i < MAX_FRAMES_IN_FLIGHT; i += 1 {
        vkDestroySemaphore(r.device, r.image_available_semaphore[i], null);
        vkDestroySemaphore(r.device, r.render_finished_semaphore[i], null);
        vkDestroyFence(r.device, r.in_flight_fences[i], null);
    }

    vkDestroyCommandPool(r.device, r.command_pool, null);
    vkDestroySurfaceKHR(r.vki, r.surface, null);
    vkDestroyDevice(r.device, null);
    vkDestroyInstance(r.vki, null);

    mem_free(auto r);
};

renderer_draw_frame :: fn (r: *Renderer) {
    vkWaitForFences(r.device, 1, &r.in_flight_fences[r.current_frame], VK_TRUE, U64_MAX);

    image_index: u32;
    result := vkAcquireNextImageKHR(r.device, r.swap_chain, U64_MAX, r.image_available_semaphore[r.current_frame], null, &image_index);
    if result == VkResult.ERROR_OUT_OF_DATE_KHR {
        recreate_swap_chain(r);
        return;
    } else if result != VkResult.SUCCESS && result != VkResult.SUBOPTIMAL_KHR {
        eprint("Failed to acquire swap chain image!\n");
        abort();
    }

    wait_semaphores := {:[1]VkSemaphore: r.image_available_semaphore[r.current_frame]};
    signal_semaphores := {:[1]VkSemaphore: r.render_finished_semaphore[r.current_frame]};
    wait_stages := {:[1]VkPipelineStageFlags: auto VkPipelineStageFlagBits.COLOR_ATTACHMENT_OUTPUT_BIT};

    submit_info := {:VkSubmitInfo: 0 };
    submit_info.sType = VkStructureType.SUBMIT_INFO;
    submit_info.waitSemaphoreCount = wait_semaphores.len;
    submit_info.pWaitSemaphores = wait_semaphores.ptr;
    submit_info.pWaitDstStageMask = wait_stages.ptr;
    submit_info.commandBufferCount = 1;
    submit_info.pCommandBuffers = &r.command_buffers[auto image_index];
    submit_info.signalSemaphoreCount = signal_semaphores.len;
    submit_info.pSignalSemaphores = signal_semaphores.ptr; 

    vkResetFences(r.device, 1, &r.in_flight_fences[r.current_frame]);

    if vkQueueSubmit(r.graphics_queue, 1, &submit_info, r.in_flight_fences[r.current_frame]) != VkResult.SUCCESS {
        eprint("Failed to submit draw command buffer!\n");
        abort();
    }

    present_info := {:VkPresentInfoKHR: 0};
    present_info.sType = VkStructureType.PRESENT_INFO_KHR;

    present_info.waitSemaphoreCount = signal_semaphores.len;
    present_info.pWaitSemaphores = signal_semaphores.ptr;

    swap_chains := {:[1]VkSwapchainKHR: r.swap_chain};
    present_info.swapchainCount = swap_chains.len;
    present_info.pSwapchains = swap_chains.ptr;
    present_info.pImageIndices = &image_index;

    result = vkQueuePresentKHR(r.present_queue, &present_info); 
    if result == VkResult.ERROR_OUT_OF_DATE_KHR || result == VkResult.SUBOPTIMAL_KHR || r.frame_buffer_resized {
        r.frame_buffer_resized = false;
        recreate_swap_chain(r);
    } else if (result != VkResult.SUCCESS) {
        eprint("Failed to present swap chain image!\n");
        abort();
    }

    r.current_frame = (r.current_frame + 1) % MAX_FRAMES_IN_FLIGHT;
};

#private
ENABLE_VALIDATION_LAYERS :: true;
MAX_FRAMES_IN_FLIGHT :: 2;
ValidationLayers := {:[1]string: "VK_LAYER_KHRONOS_validation"};
DeviceExtensions := {:[1]string: VK_KHR_SWAPCHAIN_EXTENSION_NAME};

Opt_u32 :: struct { v: u32; is_valid: bool };

QueueFamilyIndices :: struct  {
    graphics_family: Opt_u32;
    present_family: Opt_u32;
};

SwapChainSupportDetails :: struct {
    capabilities: VkSurfaceCapabilitiesKHR;
    formats: []VkSurfaceFormatKHR;
    present_modes: []VkPresentModeKHR
};

create_instance :: fn (r: *Renderer) {
    o := ValidationLayers.len;
    c_validation_layers := string_array_to_c_array({:[]string: ValidationLayers.len, &ValidationLayers[0]});
    defer mem_free(c_validation_layers);

    if ENABLE_VALIDATION_LAYERS && !check_validation_layer_support(r) {
        eprint("Desired validation layers are not supported.\n");
        abort();
    }

    glfw_extension_count : u32 = 0;
    glfw_extensions : **u8;

    glfw_extensions = glfwGetRequiredInstanceExtensions(&glfw_extension_count);
    
    app_info := {:VkApplicationInfo: 0};
    app_info.sType = VkStructureType.APPLICATION_INFO;
    app_info.pApplicationName = WindowTitle.ptr;
    app_info.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
    app_info.pEngineName = WindowTitle.ptr;
    app_info.engineVersion = VK_MAKE_VERSION(1, 0, 0);
    app_info.apiVersion = VK_API_VERSION_1_0;

    create_info := {:VkInstanceCreateInfo: 0};
    create_info.sType = VkStructureType.INSTANCE_CREATE_INFO;
    create_info.pApplicationInfo = &app_info;
    create_info.enabledExtensionCount = glfw_extension_count;
    create_info.ppEnabledExtensionNames = auto glfw_extensions;

    if ENABLE_VALIDATION_LAYERS {
        create_info.enabledLayerCount = ValidationLayers.len;
        create_info.ppEnabledLayerNames = auto c_validation_layers;
    } else {
        create_info.enabledLayerCount = 0;
    }

    if vkCreateInstance(&create_info, null, &r.vki) != VkResult.SUCCESS {
        eprint("Failed to create Vulkan instance!!!\n");
        abort();
    }
};

create_surface :: fn (r: *Renderer) {
    if glfwCreateWindowSurface(r.vki, app.window, null, &r.surface) != VkResult.SUCCESS {
        eprint("Failed to create window surface.\n");
        abort();
    }
};

pick_physical_device :: fn (r: *Renderer) {
    is_device_suitable :: fn (r: *Renderer, device: VkPhysicalDevice) bool {
        /*
         * TODO: We pick first device found for now. Later we can do something
         * like this https://vulkan-tutorial.com/en/Drawing_a_triangle/ggSetup/Physical_devices_and_queue_families
         * and give a score to every device found to pick the best one.
        */
        indices := find_queue_families(r, device);
        ext_supported := check_device_extension_support(r, device);

        swap_chain_adequate := false;
        if ext_supported {
            swap_chain_support := query_swap_chain_support(r, device);
            defer free_swap_chain_details(&swap_chain_support);
            swap_chain_adequate = swap_chain_support.formats.len > 0 && swap_chain_support.present_modes.len > 0;
        }


        return indices.graphics_family.is_valid && indices.present_family.is_valid && ext_supported && swap_chain_adequate;
    };

    devices := {:[]VkPhysicalDevice: 0};
    vkEnumeratePhysicalDevices(r.vki, auto &devices.len, null);

    if devices.len == 0 {
        eprint("No GPU device found!\n");
        abort();
    }

    devices.ptr = auto mem_alloc(sizeof(VkPhysicalDevice) * auto devices.len);
    defer mem_free(auto devices.ptr);

    vkEnumeratePhysicalDevices(r.vki, auto &devices.len, devices.ptr);

    loop i := 0; i < devices.len; i += 1 {
        if is_device_suitable(r, devices[i]) {
            r.physical_device = devices[i];
            break;
        }
    }

    if r.physical_device == null {
        eprint("No suitable GPU found!\n");
        abort();
    }
};

DeviceQueueCreateInfos :: [auto (sizeof(QueueFamilyIndices) / sizeof(Opt_u32))]VkDeviceQueueCreateInfo;

create_logical_device :: fn (r: *Renderer) {
    print("Creating device\n");
    add_queue_create_info :: fn (infos: *DeviceQueueCreateInfos, used: *u32, q: u32, priority: f32) {
        // check duplicity
        loop i : u32 = 0; i < ^used; i += 1 {
            if (^infos)[auto i].queueFamilyIndex  == q { return; }
        }
        
        queue_create_info := {:VkDeviceQueueCreateInfo: 0};
        queue_create_info.sType = VkStructureType.DEVICE_QUEUE_CREATE_INFO;
        queue_create_info.queueFamilyIndex = q;
        queue_create_info.queueCount = 1;
        queue_create_info.pQueuePriorities = &priority;

        (^infos)[auto ^used] = queue_create_info;
        ^used += 1;
    };
    
    c_validation_layers := string_array_to_c_array({:[]string: ValidationLayers.len, ValidationLayers.ptr});
    c_device_extensions := string_array_to_c_array({:[]string: DeviceExtensions.len, DeviceExtensions.ptr});
    defer mem_free(c_validation_layers);
    defer mem_free(c_device_extensions);

    indices := find_queue_families(r, r.physical_device);

    queue_create_infos : DeviceQueueCreateInfos;
    queue_create_infos_count : u32 = 0;

    add_queue_create_info(&queue_create_infos, &queue_create_infos_count, indices.graphics_family.v, 1.0f);
    add_queue_create_info(&queue_create_infos, &queue_create_infos_count, indices.present_family.v, 1.0f);

    device_features := {:VkPhysicalDeviceFeatures: 0};

    create_info := {:VkDeviceCreateInfo: 0};
    create_info.sType = VkStructureType.DEVICE_CREATE_INFO;
    create_info.pQueueCreateInfos = queue_create_infos.ptr;
    create_info.queueCreateInfoCount = queue_create_infos_count;
    create_info.pEnabledFeatures = &device_features;

    create_info.enabledExtensionCount = DeviceExtensions.len;
    create_info.ppEnabledExtensionNames = auto c_device_extensions;

    if ENABLE_VALIDATION_LAYERS {
        create_info.enabledLayerCount = ValidationLayers.len;
        create_info.ppEnabledLayerNames = auto c_validation_layers;
    } else {
        create_info.enabledLayerCount = 0;
    }        

    if vkCreateDevice(r.physical_device, &create_info, null, &r.device) != VkResult.SUCCESS {
        eprint("Failed to create logical device!\n");
        abort();
    }

    vkGetDeviceQueue(r.device, indices.graphics_family.v, 0, &r.graphics_queue);
    vkGetDeviceQueue(r.device, indices.present_family.v, 0, &r.present_queue);
};

create_swap_chain :: fn (r: *Renderer) {
    print("Creating swapchain\n");
    swap_chain_support := query_swap_chain_support(r, r.physical_device);
    defer free_swap_chain_details(&swap_chain_support);

    print("Supported present modes:\n");
    loop i := 0; i < swap_chain_support.present_modes.len; i += 1 {
        print("    %\n", swap_chain_support.present_modes[i]);
    }

    surface_format := choose_swap_surface_format(swap_chain_support.formats);
    present_mode := choose_swap_present_mode(swap_chain_support.present_modes);
    extent := choose_swap_extent(&swap_chain_support.capabilities);

    image_count := swap_chain_support.capabilities.minImageCount + 1;
    if swap_chain_support.capabilities.maxImageCount > 0 && image_count > swap_chain_support.capabilities.maxImageCount {
        image_count = swap_chain_support.capabilities.maxImageCount;
    }

    create_info := {:VkSwapchainCreateInfoKHR: 0 };
    create_info.sType = VkStructureType.SWAPCHAIN_CREATE_INFO_KHR;
    create_info.surface = r.surface;
    create_info.minImageCount = image_count;
    create_info.imageFormat = surface_format.format;
    create_info.imageColorSpace = surface_format.colorSpace;
    create_info.imageExtent = extent;
    create_info.imageArrayLayers = 1;
    create_info.imageUsage = auto VkImageUsageFlagBits.COLOR_ATTACHMENT_BIT;

    indices := find_queue_families(r, r.physical_device);
    queue_family_indices : [2]u32;
    queue_family_indices[0] = indices.graphics_family.v;
    queue_family_indices[1] = indices.present_family.v;

    if (indices.graphics_family.v != indices.present_family.v) {
        create_info.imageSharingMode = VkSharingMode.CONCURRENT;
        create_info.queueFamilyIndexCount = queue_family_indices.len;
        create_info.pQueueFamilyIndices = &queue_family_indices[0];
    } else {
        create_info.imageSharingMode = VkSharingMode.EXCLUSIVE;
        create_info.queueFamilyIndexCount = 0; // Optional
        create_info.pQueueFamilyIndices = null; // Optional
    }

    create_info.preTransform = swap_chain_support.capabilities.currentTransform;
    create_info.compositeAlpha = VkCompositeAlphaFlagBitsKHR.OPAQUE_BIT_KHR;
    create_info.presentMode = present_mode;
    create_info.clipped = VK_TRUE;
    create_info.oldSwapchain = null;

    print("Swapchain configuration: %\n", create_info);
    
    if (vkCreateSwapchainKHR(r.device, &create_info, null, &r.swap_chain) != VkResult.SUCCESS) {
        eprint("Failed to create swap chain!\n");
        abort();
    }

    res := vkGetSwapchainImagesKHR(r.device, r.swap_chain, auto &r.swap_chain_images.len, null);
    r.swap_chain_images.ptr = auto mem_alloc(sizeof(VkImage) * auto r.swap_chain_images.len);
    vkGetSwapchainImagesKHR(r.device, r.swap_chain, auto &r.swap_chain_images.len, r.swap_chain_images.ptr);

    r.swap_chain_image_format = surface_format.format;
    r.swap_chain_extent = extent;
};

recreate_swap_chain :: fn (r: *Renderer) {
    wait_when_minimized();

    vkDeviceWaitIdle(r.device);

    cleanup_swap_chain(r);

    create_swap_chain(r);
    create_image_views(r);
    create_render_pass(r);
    create_graphics_pipeline(r);
    create_frame_buffers(r);
    create_command_buffers(r);
};

wait_when_minimized :: fn () {
    width := 0;
    height := 0;

    loop width == 0 || height == 0 {
        glfwGetFramebufferSize(app.window, &width, &height);
        glfwWaitEvents();
    }
};

cleanup_swap_chain :: fn (r: *Renderer) {
    loop i := 0; i < r.swap_chain_framebuffers.len; i += 1 {
        vkDestroyFramebuffer(r.device, r.swap_chain_framebuffers[i], null);
    }

    vkFreeCommandBuffers(r.device, r.command_pool, auto r.command_buffers.len, r.command_buffers.ptr);

    mem_free(auto r.swap_chain_framebuffers.ptr);

    vkDestroyPipeline(r.device, r.graphics_pipeline, null);
    vkDestroyPipelineLayout(r.device, r.pipeline_layout, null);
    vkDestroyRenderPass(r.device, r.render_pass, null);

    loop i := 0; i < r.swap_chain_image_views.len; i += 1 {
        vkDestroyImageView(r.device, r.swap_chain_image_views[i], null);
    }
    mem_free(auto r.swap_chain_image_views.ptr);
    mem_free(auto r.swap_chain_images.ptr);

    vkDestroySwapchainKHR(r.device, r.swap_chain, null);
};

create_image_views :: fn (r: *Renderer) {
    r.swap_chain_image_views.len = r.swap_chain_images.len;
    r.swap_chain_image_views.ptr = auto mem_alloc(sizeof(VkImageView) * auto r.swap_chain_image_views.len);

    loop i := 0; i < r.swap_chain_image_views.len; i += 1 {
        create_info := {:VkImageViewCreateInfo: 0 };
        create_info.sType = VkStructureType.IMAGE_VIEW_CREATE_INFO;
        create_info.image = r.swap_chain_images[i];
        create_info.viewType = VkImageViewType._2D;
        create_info.format = r.swap_chain_image_format;
        create_info.components.r = VkComponentSwizzle.IDENTITY;
        create_info.components.g = VkComponentSwizzle.IDENTITY;
        create_info.components.b = VkComponentSwizzle.IDENTITY;
        create_info.components.a = VkComponentSwizzle.IDENTITY;
        create_info.subresourceRange.aspectMask = auto VkImageAspectFlagBits.COLOR_BIT;
        create_info.subresourceRange.baseMipLevel = 0;
        create_info.subresourceRange.levelCount = 1;
        create_info.subresourceRange.baseArrayLayer = 0;
        create_info.subresourceRange.layerCount = 1;

        if vkCreateImageView(r.device, &create_info, null, &r.swap_chain_image_views[i]) != VkResult.SUCCESS {
            eprint("Failed to create image views!\n");
            abort();
        }
    }
};

create_render_pass :: fn (r: *Renderer) {
    color_attachment := {:VkAttachmentDescription: 0 };
    color_attachment.format = r.swap_chain_image_format;
    color_attachment.samples = VkSampleCountFlagBits._1_BIT;
    color_attachment.loadOp = VkAttachmentLoadOp.CLEAR;
    color_attachment.storeOp = VkAttachmentStoreOp.STORE;
    color_attachment.stencilLoadOp = VkAttachmentLoadOp.DONT_CARE;
    color_attachment.stencilStoreOp = VkAttachmentStoreOp.DONT_CARE;
    color_attachment.initialLayout = VkImageLayout.UNDEFINED;
    color_attachment.finalLayout = VkImageLayout.PRESENT_SRC_KHR;

    color_attachment_ref := {:VkAttachmentReference: 0 };
    color_attachment_ref.attachment = 0;
    color_attachment_ref.layout = VkImageLayout.COLOR_ATTACHMENT_OPTIMAL;

    subpass := {:VkSubpassDescription: 0 };
    subpass.pipelineBindPoint = VkPipelineBindPoint.GRAPHICS;
    subpass.colorAttachmentCount = 1;
    subpass.pColorAttachments = &color_attachment_ref;

    render_pass_info := {:VkRenderPassCreateInfo: 0};
    render_pass_info.sType = VkStructureType.RENDER_PASS_CREATE_INFO;
    render_pass_info.attachmentCount = 1;
    render_pass_info.pAttachments = &color_attachment;
    render_pass_info.subpassCount = 1;
    render_pass_info.pSubpasses = &subpass;

    if vkCreateRenderPass(r.device, &render_pass_info, null, &r.render_pass) != VkResult.SUCCESS {
        eprint("Failed to create render pass!\n");
        abort();
    }
};

create_graphics_pipeline :: fn (r: *Renderer) {
    vert_shader_code := read_file("data/test_vert.spv");
    defer string_delete(vert_shader_code);
    frag_shader_code := read_file("data/test_frag.spv");
    defer string_delete(frag_shader_code);

    vert_shader := create_shader_module(r, vert_shader_code);
    frag_shader := create_shader_module(r, frag_shader_code);

    shader_entry := "main";

    vert_shader_stage_info := {:VkPipelineShaderStageCreateInfo: 0 };
    vert_shader_stage_info.sType = VkStructureType.PIPELINE_SHADER_STAGE_CREATE_INFO;
    vert_shader_stage_info.stage = VkShaderStageFlagBits.VERTEX_BIT;
    vert_shader_stage_info.module = vert_shader;
    vert_shader_stage_info.pName = shader_entry.ptr;

    frag_shader_stage_info := {:VkPipelineShaderStageCreateInfo: 0 };
    frag_shader_stage_info.sType = VkStructureType.PIPELINE_SHADER_STAGE_CREATE_INFO;
    frag_shader_stage_info.stage = VkShaderStageFlagBits.FRAGMENT_BIT;
    frag_shader_stage_info.module = frag_shader;
    frag_shader_stage_info.pName = shader_entry.ptr;

    shader_stages := {:[2]VkPipelineShaderStageCreateInfo: vert_shader_stage_info, frag_shader_stage_info};

	vertex_input_info := {:VkPipelineVertexInputStateCreateInfo: 0};
	vertex_input_info.sType = VkStructureType.PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	vertex_input_info.vertexBindingDescriptionCount = 0;
	vertex_input_info.pVertexBindingDescriptions = null; // Optional
	vertex_input_info.vertexAttributeDescriptionCount = 0;
	vertex_input_info.pVertexAttributeDescriptions = null; // Optional

    input_assembly := {:VkPipelineInputAssemblyStateCreateInfo: 0 };
	input_assembly.sType = VkStructureType.PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	input_assembly.topology = VkPrimitiveTopology.TRIANGLE_LIST;
	input_assembly.primitiveRestartEnable = VK_FALSE;

    viewport := {:VkViewport: 0 };
	viewport.x = 0.0f;
	viewport.y = 0.0f;
	viewport.width = auto r.swap_chain_extent.width;
	viewport.height = auto r.swap_chain_extent.height;
	viewport.minDepth = 0.0f;
	viewport.maxDepth = 1.0f;

    scissor := {:VkRect2D: 0 };
    scissor.offset = {:VkOffset2D: 0};
    scissor.extent = r.swap_chain_extent;

    viewport_state := {:VkPipelineViewportStateCreateInfo: 0 };
    viewport_state.sType = VkStructureType.PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    viewport_state.viewportCount = 1;
    viewport_state.pViewports = &viewport;
    viewport_state.scissorCount = 1;
    viewport_state.pScissors = &scissor;

    rasterizer := {:VkPipelineRasterizationStateCreateInfo: 0 };
    rasterizer.sType = VkStructureType.PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    rasterizer.depthClampEnable = VK_FALSE;
    rasterizer.rasterizerDiscardEnable = VK_FALSE;
    rasterizer.polygonMode = VkPolygonMode.FILL;
    rasterizer.lineWidth = 1.0f;
    rasterizer.cullMode = auto VkCullModeFlagBits.BACK_BIT;
    rasterizer.frontFace = VkFrontFace.CLOCKWISE;
    rasterizer.depthBiasEnable = VK_FALSE;
    rasterizer.depthBiasConstantFactor = 0.0f; // Optional
    rasterizer.depthBiasClamp = 0.0f; // Optional
    rasterizer.depthBiasSlopeFactor = 0.0f; // Optional
    
    // disabled multisamplig (no anitialiasing)
    multisampling := {:VkPipelineMultisampleStateCreateInfo: 0 };
    multisampling.sType = VkStructureType.PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    multisampling.sampleShadingEnable = VK_FALSE;
    multisampling.rasterizationSamples = VkSampleCountFlagBits._1_BIT;
    multisampling.minSampleShading = 1.0f; // Optional
    multisampling.pSampleMask = null; // Optional
    multisampling.alphaToCoverageEnable = VK_FALSE; // Optional
    multisampling.alphaToOneEnable = VK_FALSE; // Optional

    color_blend_attachment := {:VkPipelineColorBlendAttachmentState: 0 };
    color_blend_attachment.colorWriteMask = 
        cast(u32) VkColorComponentFlagBits.R_BIT | 
        cast(u32) VkColorComponentFlagBits.G_BIT |
        cast(u32) VkColorComponentFlagBits.B_BIT | 
        cast(u32) VkColorComponentFlagBits.A_BIT;
    color_blend_attachment.blendEnable = VK_FALSE;
    color_blend_attachment.srcColorBlendFactor = VkBlendFactor.ONE; // Optional
    color_blend_attachment.dstColorBlendFactor = VkBlendFactor.ZERO; // Optional
    color_blend_attachment.colorBlendOp = VkBlendOp.ADD; // Optional
    color_blend_attachment.srcAlphaBlendFactor = VkBlendFactor.ONE; // Optional
    color_blend_attachment.dstAlphaBlendFactor = VkBlendFactor.ZERO; // Optional
    color_blend_attachment.alphaBlendOp = VkBlendOp.ADD; // Optional

    color_blending := {:VkPipelineColorBlendStateCreateInfo: 0};
    color_blending.sType = VkStructureType.PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    color_blending.logicOpEnable = VK_FALSE;
    color_blending.logicOp = VkLogicOp.COPY; // Optional
    color_blending.attachmentCount = 1;
    color_blending.pAttachments = &color_blend_attachment;
    color_blending.blendConstants[0] = 0.0f; // Optional
    color_blending.blendConstants[1] = 0.0f; // Optional
    color_blending.blendConstants[2] = 0.0f; // Optional
    color_blending.blendConstants[3] = 0.0f; // Option

    dynamic_states := {:[2]VkDynamicState:
        VkDynamicState.VIEWPORT,
        VkDynamicState.LINE_WIDTH
    };

    dynamic_state := {:VkPipelineDynamicStateCreateInfo: 0 };
    dynamic_state.sType = VkStructureType.PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    dynamic_state.dynamicStateCount = dynamic_states.len;
    dynamic_state.pDynamicStates = dynamic_states.ptr;

    pipeline_layout_info := {:VkPipelineLayoutCreateInfo: 0 };
    pipeline_layout_info.sType = VkStructureType.PIPELINE_LAYOUT_CREATE_INFO;
    pipeline_layout_info.setLayoutCount = 0; // Optional
    pipeline_layout_info.pSetLayouts = null; // Optional
    pipeline_layout_info.pushConstantRangeCount = 0; // Optional
    pipeline_layout_info.pPushConstantRanges = null; // Optional

    if vkCreatePipelineLayout(r.device, &pipeline_layout_info, null, &r.pipeline_layout) != VkResult.SUCCESS {
        eprint("Failed to create pipeline layout!\n");
        abort();
    }

    pipeline_info := {:VkGraphicsPipelineCreateInfo: 0 };
    pipeline_info.sType = VkStructureType.GRAPHICS_PIPELINE_CREATE_INFO;
    pipeline_info.stageCount = shader_stages.len;
    pipeline_info.pStages = shader_stages.ptr;
    pipeline_info.pVertexInputState = &vertex_input_info;
    pipeline_info.pInputAssemblyState = &input_assembly;
    pipeline_info.pViewportState = &viewport_state;
    pipeline_info.pRasterizationState = &rasterizer;
    pipeline_info.pMultisampleState = &multisampling;
    pipeline_info.pDepthStencilState = null; // Optional
    pipeline_info.pColorBlendState = &color_blending;
    pipeline_info.pDynamicState = null; // Optional
    pipeline_info.layout = r.pipeline_layout;
    pipeline_info.renderPass = r.render_pass;
    pipeline_info.subpass = 0;
    pipeline_info.basePipelineHandle = null; // Optional
    pipeline_info.basePipelineIndex = -1; // Optional

    // This can be used for multiple pipeline creation, so probably we can use after renderable assets load
    // to generate all desired pipelines at once?
    if vkCreateGraphicsPipelines(r.device, null, 1, &pipeline_info, null, &r.graphics_pipeline) != VkResult.SUCCESS {
        eprint("Failed to create graphics pipeline!\n");
        abort();
    } 

    vkDestroyShaderModule(r.device, frag_shader, null);
    vkDestroyShaderModule(r.device, vert_shader, null);
};

create_frame_buffers :: fn (r: *Renderer) {
    r.swap_chain_framebuffers.len = r.swap_chain_image_views.len;
    r.swap_chain_framebuffers.ptr = auto mem_calloc(1, sizeof(VkFramebuffer) * auto r.swap_chain_framebuffers.len);

    loop i := 0; i < r.swap_chain_image_views.len; i += 1 {
        attachments := {:[1]VkImageView: r.swap_chain_image_views[i]};

        framebuffer_info := {:VkFramebufferCreateInfo: 0 };
        framebuffer_info.sType = VkStructureType.FRAMEBUFFER_CREATE_INFO;
        framebuffer_info.renderPass = r.render_pass;
        framebuffer_info.attachmentCount = attachments.len;
        framebuffer_info.pAttachments = attachments.ptr;
        framebuffer_info.width = r.swap_chain_extent.width;
        framebuffer_info.height = r.swap_chain_extent.height;
        framebuffer_info.layers = 1;

        if vkCreateFramebuffer(r.device, &framebuffer_info, null, &r.swap_chain_framebuffers[i]) != VkResult.SUCCESS {
            eprint("Failed to create framebuffer!\n");
            abort();
        }
    }
};

create_command_pool :: fn (r: *Renderer) {
    queue_family_indices := find_queue_families(r, r.physical_device);

    pool_info := {:VkCommandPoolCreateInfo: 0 };
    pool_info.sType = VkStructureType.COMMAND_POOL_CREATE_INFO;
    pool_info.queueFamilyIndex = queue_family_indices.graphics_family.v;
    pool_info.flags = 0; // Optional 

    if vkCreateCommandPool(r.device, &pool_info, null, &r.command_pool) != VkResult.SUCCESS {
        eprint("Failed to create command pool!\n");
        abort();
    }
};

create_command_buffers :: fn (r: *Renderer) {
    r.command_buffers.len = r.swap_chain_framebuffers.len;
    r.command_buffers.ptr = auto mem_calloc(1, sizeof(VkCommandBuffer) * auto r.command_buffers.len);

    alloc_info := {:VkCommandBufferAllocateInfo: 0 };
    alloc_info.sType = VkStructureType.COMMAND_BUFFER_ALLOCATE_INFO;
    alloc_info.commandPool = r.command_pool;
    alloc_info.level = VkCommandBufferLevel.PRIMARY;
    alloc_info.commandBufferCount = auto r.command_buffers.len;

    if vkAllocateCommandBuffers(r.device, &alloc_info, r.command_buffers.ptr) != VkResult.SUCCESS {
        eprint("Failed to allocate command buffers!\n");
        abort();
    }

    loop i := 0; i < r.command_buffers.len; i += 1 {
        begin_info := {:VkCommandBufferBeginInfo: 0 };
        begin_info.sType = VkStructureType.COMMAND_BUFFER_BEGIN_INFO;
        begin_info.flags = 0; // Optional
        begin_info.pInheritanceInfo = null; // Optional

        if vkBeginCommandBuffer(r.command_buffers[i], &begin_info) != VkResult.SUCCESS {
            eprint("failed to begin recording command buffer!\n");
            abort();
        }

        renderPassInfo := {:VkRenderPassBeginInfo: 0};
        renderPassInfo.sType = VkStructureType.RENDER_PASS_BEGIN_INFO;
        renderPassInfo.renderPass = r.render_pass;
        renderPassInfo.framebuffer = r.swap_chain_framebuffers[i];
        renderPassInfo.renderArea.offset = {:VkOffset2D: 0};
        renderPassInfo.renderArea.extent = r.swap_chain_extent;

        clearColor := {:VkClearValue: 0.0f, 0.0f, 0.0f, 1.0f};
        renderPassInfo.clearValueCount = clearColor.len;
        renderPassInfo.pClearValues = auto clearColor.ptr;

        vkCmdBeginRenderPass(r.command_buffers[i], &renderPassInfo, VkSubpassContents.INLINE);
        vkCmdBindPipeline(r.command_buffers[i], VkPipelineBindPoint.GRAPHICS, r.graphics_pipeline);
        vkCmdDraw(r.command_buffers[i], 3, 1, 0, 0);
        vkCmdEndRenderPass(r.command_buffers[i]);

        if vkEndCommandBuffer(r.command_buffers[i]) != VkResult.SUCCESS {
            eprint("Failed to record command buffer!\n");
            abort();
        }
    }
};

create_shader_module :: fn (r: *Renderer, code: string) VkShaderModule {
    create_info := {:VkShaderModuleCreateInfo: 0 };
    create_info.sType = VkStructureType.SHADER_MODULE_CREATE_INFO;
    create_info.codeSize = auto code.len;
    create_info.pCode = code.ptr;

    shader_module: VkShaderModule;
    if (vkCreateShaderModule(r.device, &create_info, null, &shader_module) != VkResult.SUCCESS) {
        eprint("Failed to create shader module!\n");
        abort();
    }

    return shader_module;
};

create_sync_objects :: fn (r: *Renderer) {
    semaphore_info := {:VkSemaphoreCreateInfo: 0 };
    semaphore_info.sType = VkStructureType.SEMAPHORE_CREATE_INFO;

    fence_info := {:VkFenceCreateInfo: 0 };
    fence_info.sType = VkStructureType.FENCE_CREATE_INFO;
    fence_info.flags = auto VkFenceCreateFlagBits.SIGNALED_BIT;

    loop i := 0; i < MAX_FRAMES_IN_FLIGHT; i += 1 {
        if vkCreateSemaphore(r.device, &semaphore_info, null, &r.image_available_semaphore[i]) != VkResult.SUCCESS { 
            eprint("Failed to create semaphore\n");
            abort();
        }

        if vkCreateSemaphore(r.device, &semaphore_info, null, &r.render_finished_semaphore[i]) != VkResult.SUCCESS { 
            eprint("Failed to create semaphore\n");
            abort();
        }
        
        if vkCreateFence(r.device, &fence_info, null, &r.in_flight_fences[i]) != VkResult.SUCCESS {
            eprint("Failed to create fence\n");
            abort();
        }
    }
};

handle_window_resize :: fn (window: *GLFWwindow, width: s32, height: s32) {
    renderer := cast(*Renderer) glfwGetWindowUserPointer(window);
    renderer.frame_buffer_resized = true;
};

find_queue_families :: fn (r: *Renderer, device: VkPhysicalDevice) QueueFamilyIndices {
    indices := {:QueueFamilyIndices: 0};

    families := {:[]VkQueueFamilyProperties: 0};
    vkGetPhysicalDeviceQueueFamilyProperties(device, auto &families.len, null);

    families.ptr = auto mem_alloc(sizeof(VkQueueFamilyProperties) * auto families.len);
    defer mem_free(auto families.ptr);

    vkGetPhysicalDeviceQueueFamilyProperties(device, auto &families.len, families.ptr);

    loop i : u32 = 0; i < auto families.len; i += 1 {
        if is_flag_u32(families[auto i].queueFlags, auto VkQueueFlagBits.GRAPHICS_BIT) {
            indices.graphics_family = {:Opt_u32: i, true };
        }

        present_support: VkBool32  = 0;
        vkGetPhysicalDeviceSurfaceSupportKHR(device, i, r.surface, &present_support);

        if present_support != 0 {
            indices.present_family = {:Opt_u32: i, true };
        }
    }
    
    return indices;
};

query_swap_chain_support :: fn (r: *Renderer, device: VkPhysicalDevice) SwapChainSupportDetails {
    details := {:SwapChainSupportDetails: 0};
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR(device, r.surface, &details.capabilities);

    vkGetPhysicalDeviceSurfaceFormatsKHR(device, r.surface, auto &details.formats.len, null);
    details.formats.ptr = auto mem_alloc(sizeof(VkSurfaceFormatKHR) * auto details.formats.len);
    vkGetPhysicalDeviceSurfaceFormatsKHR(device, r.surface, auto &details.formats.len, details.formats.ptr);

    vkGetPhysicalDeviceSurfacePresentModesKHR(device, r.surface, auto &details.present_modes.len, null);
    details.present_modes.ptr = auto mem_alloc(sizeof(VkSurfaceFormatKHR) * auto details.present_modes.len);
    vkGetPhysicalDeviceSurfacePresentModesKHR(device, r.surface, auto &details.present_modes.len, details.present_modes.ptr);

    return details;
};

free_swap_chain_details :: fn (details: *SwapChainSupportDetails) {
    mem_free(auto details.formats.ptr);
    mem_free(auto details.present_modes.ptr);
};

choose_swap_surface_format :: fn (available_formats: []VkSurfaceFormatKHR) VkSurfaceFormatKHR {
    loop i := 0; i < available_formats.len; i += 1 {
        if available_formats[i].format == VkFormat.B8G8R8A8_UNORM &&
           available_formats[i].colorSpace == VkColorSpaceKHR.SRGB_NONLINEAR_KHR {
            return available_formats[i];
        }
    }

    return available_formats[0];
};

choose_swap_present_mode :: fn (available_present_modes: []VkPresentModeKHR) VkPresentModeKHR {
    loop i := 0; i < available_present_modes.len; i += 1 {
        if available_present_modes[i] == VkPresentModeKHR.MAILBOX_KHR {
            return available_present_modes[i];
        }
    }

    return VkPresentModeKHR.FIFO_KHR;
};

choose_swap_extent :: fn (capabilities: *VkSurfaceCapabilitiesKHR) VkExtent2D {
    if capabilities.currentExtent.width != U32_MAX {
        return capabilities.currentExtent;
    } else {
        actual_extent := {:VkExtent2D: 0 };
        glfwGetFramebufferSize(app.window, auto &actual_extent.width, auto &actual_extent.height);

        actual_extent.width = u32_max(capabilities.minImageExtent.width, u32_min(capabilities.maxImageExtent.width, actual_extent.width));
        actual_extent.height = u32_max(capabilities.minImageExtent.height, u32_min(capabilities.maxImageExtent.height, actual_extent.height));

        return actual_extent;
    }
};

check_validation_layer_support :: fn (r: *Renderer) bool {
    available_layers := {:[]VkLayerProperties: 0};
    vkEnumerateInstanceLayerProperties(auto &available_layers.len, null);

    available_layers.ptr = auto mem_alloc(sizeof(VkLayerProperties) * auto available_layers.len);
    defer mem_free(auto available_layers.ptr);

    vkEnumerateInstanceLayerProperties(auto &available_layers.len, available_layers.ptr);

    print("Desired layers:\n");
    loop j := 0; j < ValidationLayers.len; j += 1 {
        print("    %\n", ValidationLayers[j]);
    }

    print("Available layers:\n");
    loop j := 0; j < available_layers.len; j += 1 {
        tmp := cstr_to_str(available_layers[j].layerName.ptr);
        print("    %\n", tmp);
    }

    loop i := 0; i < ValidationLayers.len; i += 1 {
        found := false;
        desired_name := ValidationLayers[i].ptr;

        loop j := 0; j < available_layers.len; j += 1 {
            available_name := available_layers[j].layerName.ptr;
            if strcmp(desired_name, available_name) == 0 {
                found = true;
                break;
            }
        }

        if !found {
            return false;
        }
    }

    return true;
};

check_device_extension_support :: fn (r: *Renderer, device: VkPhysicalDevice) bool {
    available_extensions := {:[]VkExtensionProperties: 0};
    vkEnumerateDeviceExtensionProperties(device, null, auto &available_extensions.len, null);

    available_extensions.ptr = auto mem_alloc(sizeof(VkExtensionProperties) * auto available_extensions.len);
    defer mem_free(auto available_extensions.ptr);

    vkEnumerateDeviceExtensionProperties(device, null, auto &available_extensions.len, available_extensions.ptr);

    print("Desired extensions:\n");
    loop j := 0; j < DeviceExtensions.len; j += 1 {
        print("    %\n", DeviceExtensions[j]);
    }

    print("Available extensions:\n");
    loop j := 0; j < available_extensions.len; j += 1 {
        tmp := cstr_to_str(available_extensions[j].extensionName.ptr);
        print("    %\n", tmp);
    }

    loop i := 0; i < DeviceExtensions.len; i += 1 {
        found := false;
        desired_name := DeviceExtensions[i].ptr;

        loop j := 0; j < available_extensions.len; j += 1 {
            available_name := available_extensions[j].extensionName.ptr;
            if strcmp(desired_name, available_name) == 0 {
                found = true;
                break;
            }
        }

        if !found {
            return false;
        }
    }

    return true;
};

string_array_to_c_array :: fn (arr: []string) *u8 #inline {
    tmp := mem_calloc(auto arr.len, sizeof(*u8));

    loop i := 0; i < arr.len; i += 1 {
        dest := cast(**u8) (cast(usize) tmp + cast(usize) i * sizeof(*u8));
        ^dest = arr[i].ptr;
    }

    return tmp;
};

read_file :: fn (filepath: string) string {
    file := file_open(filepath, FileOpenModes.Read, FileOpenModes.Binary);
    defer file_close(file);

    if file == null {
        eprint("Cannot open file '%'.\n", filepath);
        abort();
    }

    return file_read_all(file);
};
