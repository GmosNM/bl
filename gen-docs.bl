#!/usr/local/bin/blc -rs 
#import "std/fs"

DEST_DOCS_DIR :: "docs";
DEST_API_DIR :: "docs/api";
SRC_API_DIR :: "lib/bl/api";

IGNORE :: {:[3]string:
           "sdl2",
           "glfw3",
           "gl",
          };

cmd :: fn (fmt: string, args: ...) Error {
    buf: [2048]u8;
    len :: bprint(buf, fmt, args);
    tmp :: {:string: len, buf.ptr};
    state :: os_execute(tmp);
    if state != 0 {
        return error(state, "Executed shell command failed '%'!", tmp);
    }
    return ok();
}

pre_cleanup :: fn () Error {
    print("Cleanup\n");
    if Fs.exist(DEST_DOCS_DIR) {
        err :: Fs.dir_remove_all(DEST_DOCS_DIR);
        if !is_ok(err) { return err; }
    }
    { // create docs
        err :: Fs.dir_create(DEST_DOCS_DIR);
        if !is_ok(err) { return err; }
    }
    { // create api
        err :: Fs.dir_create(DEST_API_DIR);
        if !is_ok(err) { return err; }
    }
    return ok();
}

docs_dir :: fn (dest_path: string, src_path: string) Error {
    list, err :: Fs.dir_scan(src_path, &fn (info: *Fs.Info) bool {
        if String.is_empty(info.name)        { return false; }
        if String.compare(info.name, ".")    { return false; }
        if String.compare(info.name, "..")   { return false; }
        if String.compare(info.name, "_", 1) { return false; }
        loop i := 0; i < IGNORE.len; i += 1 {
            if String.compare(info.name, IGNORE[i]) { return false; }
        }
        if info.kind == Fs.InfoKind.File {
            ext :: Fs.get_extension(info.name);
            if !String.compare(ext, "bl") { return false; }
        }
        return true;
    });
    defer Fs.info_list_delete(list);
    if !is_ok(err) { return err; }

    file_list :: String.new(128);
    defer String.delete(file_list);
    loop i := 0; i < list.len; i += 1 {
        info :: &list[i];
        switch info.kind {
            Fs.InfoKind.File {
                String.append(&file_list, src_path);
                String.append(&file_list, "/");
                String.append(&file_list, info.name);
                String.append(&file_list, " ");
            }
            Fs.InfoKind.Directory {
                new_dest_path :: sprint("%/%", dest_path, info.name);
                new_src_path :: sprint("%/%", src_path, info.name);
                defer String.delete(new_dest_path);
                defer String.delete(new_src_path);
                
                if !Fs.exist(new_dest_path) {
                    err :: Fs.dir_create(new_dest_path);
                    if !is_ok(err) { return err; }
                }
                err :: docs_dir(new_dest_path, new_src_path);
                if !is_ok(err) { return err; }
            }
        }
    }
    
    print("Process '%'\n", src_path);
    if String.is_empty(file_list) { return ok(); }
    {
        err :: cmd("blc --docs %", file_list);
        if !is_ok(err) { return err; }
    }
    { // copy results into docs folder
        opt: Fs.CopyOpt;
        opt.recursive = true;
        opt.override = true;
        c, err :: Fs.dir_copy("out", dest_path, &opt);
        if !is_ok(err) { return err; }
        err2 :: Fs.dir_remove_all("out");
        if !is_ok(err2) { return err2; }
    }
    
    return ok();
}

main :: fn () s32 {
    print("Generate BL documentation...\n");
    { // cleanup
        err :: pre_cleanup();
        if !is_ok(err) { print_err("%", err); return err.code; }
    }

    { // run
        err :: docs_dir(DEST_API_DIR, SRC_API_DIR);
        if !is_ok(err) { print_err("%", err); return err.code; }
    }

    { // copy results into docs folder
        opt: Fs.CopyOpt;
        opt.recursive = true;
        opt.override = true;
        dest :: String.new();
        defer String.delete(dest);
        String.concatenate(&dest, DEST_DOCS_DIR, "/", "examples");
        c, err :: Fs.dir_copy("examples", dest, &opt);
        if !is_ok(err) { print_err("%", err); return err.code; }
    }
    print("Output written in '%' folder.\n", DEST_DOCS_DIR);
    return 0;
}
