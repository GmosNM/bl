// Simple static allocator and executable context

/*
   We can provide custom allocator instead of defult one in every BL program.
*/

_buffer: [4098]u8;
_bi: usize;
my_allocator :: fn (
        operation: AllocOp, 
        size: usize, 
        ptr: *u8 = null, 
        file := string_empty, 
        line := 0) *u8 
{
    switch operation {
        AllocOp.Allocate {
            if _bi >= auto _buffer.len { panic(); }
            mem :: ptr_shift_bytes(_buffer.ptr, auto _bi);
            _bi += size;
            print_log("Allocate % bytes called from %:%.", size, file, line);
            return mem;
        }
        AllocOp.Free {
            print_log("Free called from %:%.", file, line);
        }
        AllocOp.Release;
        default { panic(); }
    }
    return null; 
}

main :: fn () s32 {
    orig_allocator :: _context.alloc_fn;
    _context.alloc_fn = &my_allocator;
    defer _context.alloc_fn = orig_allocator;

    str :: string_new("abc");
    defer string_delete(str);
    loop i := 0; i < 100; i += 1 {
        string_append(&str, i);
    }
    return 0;
}
