//************************************************************************************************
// BL - STD 
//
// File:   file.bl
// Author: Martin Dorazil
// Date:   14.2.18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "libc/libc.bl"
#load "std/memory.bl"

public module std {
  public module file {
    public struct file_t {
      handle *void,
      public filename string,
      public size size_t,
      public is_open bool
    }

    public fn open(filename string, mode string) file_t {
      mut f file_t;

      f.handle = libc::fopen(filename, mode);
      if f.handle != null {
        f.is_open = true;
        f.filename = libc::strdup(filename); 

        update_size(&f);
      } else {
        f.is_open = false;
      }
      
      return f;
    }

    public fn remove(filename string) {
      libc::remove(filename);
    }

    public fn close(f *file_t) {
      if !f->is_open { return; }
      libc::fclose(f->handle);
      memory::free(cast(*void) f->filename);
      f->is_open = false;
    }

    public fn swrite(f *file_t, s string, count size_t) size_t {
      if !f->is_open { return 0; }
      return libc::fwrite(cast(*void) s, sizeof(char), count, f->handle);
    }

    public fn sread(f *file_t, s string, count size_t) size_t {
      if !f->is_open { return 0; }
      return libc::fread(cast(*void) s, sizeof(char), count, f->handle);
    }

    fn update_size(f *file_t) {
      libc::fseek(f->handle, 0, libc::seek_e::End);
      f->size = libc::ftell(f->handle);
      libc::fseek(f->handle, 0, libc::seek_e::Set);
    }
  }
}