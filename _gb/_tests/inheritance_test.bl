#load "std/utest.bl"
using std::utest;

module inheritance_test {
  struct A {
    i i32,
    j i32
  }
  
  struct B : A {
    k i32
  }
  
  struct C : B {
    l i32
  }
  
  #test
  fn ingeritance() i32 {
    mut c C;
  
    c.i = 1;
    c.j = 2;
    c.k = 3;
    c.l = 4;
  
    if take_a(cast(*A) &c) == FAIL { return FAIL; }
    if take_b(cast(*B) &c) == FAIL { return FAIL; }
    if take_c(&c) == FAIL { return FAIL; }
  
    return SUCCESS;
  }
  
  fn take_a(a *A) i32 {
    if a->i != 1 { return FAIL; }
    if a->j != 2 { return FAIL; }
    return SUCCESS;
  }
  
  fn take_b(b *B) i32 {
    if b->i != 1 { return FAIL; }
    if b->j != 2 { return FAIL; }
    if b->k != 3 { return FAIL; }
    return SUCCESS;
  }
  
  fn take_c(c *C) i32 {
    if c->i != 1 { return FAIL; }
    if c->j != 2 { return FAIL; }
    if c->k != 3 { return FAIL; }
    if c->l != 4 { return FAIL; }
    return SUCCESS;
  }
}