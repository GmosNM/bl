#import "std/arg_parser"
#import "std/fs"

HELP_TEXT ::
"Platform specific bl configuration generator.\n"
"Usage:\n"
"  bl-config [options]";

LIB_DIR :: "../lib/bl/api";
ETC_DIR :: "../etc";
CONF_FILE :: "bl.conf";

// Command line arguments context.
Args :: struct #base ArgsImpl {
    silent: bool;
    override_config: bool;
}

g_etc_dir: string;
g_conf_filepath: string;
g_args: Args;
g_pwd: string;

main :: fn () s32 {
    _context.print_log_fn = &custom_logger;
    { // Setup pwd
        exec_path :: os_get_exec_path();
        defer String.delete(exec_path);
        dir: string;
        if String.split_by_last(exec_path, '/', &dir, null) {
            g_pwd = String.new(dir);
        } else {
            g_pwd = String.new(exec_path);
        }
    }
    defer String.delete(g_pwd);

    parser :: ArgParser.new(HELP_TEXT);
    defer ArgParser.delete(parser);
    
    ArgParser.add(
        parser,
        "-s",
        "--silent",
        "Print only errors.",
        &fn (_: ArgParser.Parser, _: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            a.silent = true;
            return 1, ok();
        });
        
     ArgParser.add(
        parser,
        "-f",
        "--force-override",
        "Override existing configuration file.",
        &fn (_: ArgParser.Parser, _: []string, ctx: *ArgParser.Ctx) (s32, Error) {
            a: *Args = auto ctx;
            a.override_config = true;
            return 1, ok();
        });

    setup(parser);    
        
    state: Error;
    state = ArgParser.run(parser, command_line_arguments, &g_args, 1);
    if !is_ok(state) {
        print_err("%", state);
        ArgParser.print_help(parser);
        return 1;
    }
    
    if g_args.help { return 0; }

    g_etc_dir = sprint(g_pwd, "/", ETC_DIR);
    g_conf_filepath = sprint(g_etc_dir, "/", CONF_FILE);
    defer String.delete(g_etc_dir);
    defer String.delete(g_conf_filepath);

    if Fs.exist(g_conf_filepath) {
        if !g_args.override_config {
            print_warn("Configuration file '%' already exists, use '-f' to override.", g_conf_filepath);
            return 0;
        }
    }

    state = configure();
    if !is_ok(state) { 
        print_err("%", state);
        print_err("Configuration generation failed!");
        return 1; 
    }
    return 0;
}

write_config :: fn (fmt: string, args: ...) Error {
    Fs.dir_create(g_etc_dir);
    file, err :: Fs.open(g_conf_filepath, Fs.OpenMode.Create, Fs.OpenMode.Write);
    defer Fs.close(file);
    if !is_ok(err) { return err; }
    Fs.write_fmt(2048, file, fmt, args);
    print_log("Configuration written to '%'.", g_conf_filepath);
    return ok();
}

pipe_execute :: fn (cmd: string) (string, Error) {
    // This is little bit hacky but we don't have PIPE abstraction in BL yet.
    fgets :: fn (buf: c_void_ptr, size: c_int, f: c_void_ptr) c_void_ptr #extern;

    mode :: "r";
    file :: popen(auto cmd.ptr, auto mode.ptr); 
    defer pclose(file);
    if !file { return "", error("Execution of command failed!"); }
    buf: [1024]u8 #noinit;
    out := String.new();
    loop fgets(buf.ptr, auto buf.len, file) {
        tmp :: {:string: auto c_strlen(auto buf.ptr), buf.ptr};
        String.append(&out, tmp);
    }
    if !String.is_empty(out) && out[out.len-1] == '\n' {
        out.len -= 1;
    }
    return out, ok();   
} 

#private
custom_logger :: fn (kind: PrintLogKind, _: string, _: s32, format: string, args: ...) {
    if g_args.silent && kind == PrintLogKind.Message { return; }
    switch kind {
        PrintLogKind.Message { print("  "); }
        PrintLogKind.Warning { print("  [W] "); }
        default { print("  [E] "); }                        
    }
    print(format, args);
    print("\n");
}
