#load "std/utils.bl"

BUILD_TOOLS :: "Microsoft Visual Studio/2019/BuildTools";
VC_VARS_ALL :: "VC/Auxiliary/Build/vcvarsall.bat";
LINKER_EXEC :: "bl-lld-link.exe";
LINKER_OPT :: "kernel32.lib user32.lib gdi32.lib shell32.lib ucrt.lib legacy_stdio_definitions.lib msvcrt.lib vcruntime.lib Shlwapi.lib";
LINKER_OPT_DEBUG :: "kernel32.lib user32.lib gdi32.lib shell32.lib ucrtd.lib legacy_stdio_definitions.lib msvcrtd.lib vcruntimed.lib Shlwapi.lib";

CONFIG :: 
    "// blc configuration file\n\n"
    "// Main API directory containing all modules and source files.\n"
    "LIB_DIR \"%\"\n"
    "// Native linker executable.\n"
    "LINKER_EXEC \"%\"\n"
    "// Full path to Visual Studio vcvarsall.bat file.\n"
    "VC_VARS_ALL \"%\"\n"
    "// Linker options used for release linking.\n"
    "LINKER_OPT \"%\"\n"
    "// Linker options used for debug linking.\n"
    "LINKER_OPT_DEBUG \"%\"\n"
    "// Additional linker library path.\n"
    "LINKER_LIB_PATH \"\"\n"
    ;

ArgsImpl :: struct #base ArgCtx {
    build_tools_path: string;
}
    
setup :: fn (arg_parser: ArgParser) {
     arg_parser_add(
        arg_parser,
        "-b",
        "--build-tools-path",
        "Specify custom MS Build Tools directory.",
        &fn (parser: ArgParser, args: []string, ctx: *ArgCtx) (s32, Error) {
            a := cast(*Args) ctx;
            if (args.len < 2) {
                return 0, error("Expected directory name!");
            }
            path := args[1];
            string_replace_all(&path, '\\', '/');
            if (!string_is_empty(path)) && path[path.len-1] == '\"' {
                path[path.len-1] = '\0';
                path.len -= 1;
            }
            a.build_tools_path = path;
            is_valid_directory :: fs_is_directory(a.build_tools_path);
            if !is_valid_directory {  
                return 0, error("Invalid directory path '%'!", a.build_tools_path);
            }
            return 2, ok();
        });
}

configure :: fn () Error {
    print_log("Generate configuration file");
    program_files_path :: env_get("ProgramFiles(x86)");
    string_replace_all(&program_files_path, '\\', '/'); // oh my!
    build_tools_path: string;
    vc_vars_all : string;
    lib_dir: string; 
    linker_exec: string;
    defer string_delete(build_tools_path);
    defer string_delete(linker_exec);
    defer string_delete(lib_dir);
    defer string_delete(program_files_path);
    defer string_delete(vc_vars_all);
    
    // Lookup build tools instalation.
    if string_is_empty(g_args.build_tools_path) {
        build_tools_path = sprint(program_files_path, "/", BUILD_TOOLS);
    } else {
        build_tools_path = string_new(g_args.build_tools_path);
    }
    if !fs_exist(build_tools_path) {
        return error(
            "Cannot find MS Build Tools installation on '%'. "
            "Download & install MS Build Tools from https://visualstudio.microsoft.com/visual-cpp-build-tools "
            "or specify custom location, see 'bl-config.exe -h' for more information", 
            build_tools_path);
    }
    print_log("MS Build Tools instalation on '%'.", build_tools_path);
    
    // Lookup vcvars bullshit
    vc_vars_all = sprint(build_tools_path, "/", VC_VARS_ALL);
    if !fs_exist(vc_vars_all) {
        return error("Cannot find vcvarsall.bat on '%'!", vc_vars_all);
    }
    print_log("Found vcvarsall.bat on '%'.", vc_vars_all);
    
    lib_dir = sprint(g_pwd, "/", LIB_DIR);
    {
       err :: fs_normalize(&lib_dir);
       if !is_ok(err) {
           return error("Cannot find BL API libs on '%'", lib_dir);
       }
    }
    print_log("Found BL API on '%'.", lib_dir);
    
    linker_exec = sprint(g_pwd, "/", LINKER_EXEC);
    {
       err :: fs_normalize(&linker_exec);
       if !is_ok(err) {
           return error("Cannot find linker on '%'", linker_exec);
       }
    }
    print_log("Found linker executable on '%'.", linker_exec);
    
    return write_config(
        CONFIG, 
        lib_dir,
        linker_exec,
        vc_vars_all,
        LINKER_OPT,
        LINKER_OPT_DEBUG
    );
}
