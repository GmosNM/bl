#!blc --silent -run
#import "std/fs"
#import "std/io"

SRC_API_DIR :: "../../lib/bl/api";
OUT_DIR :: "docs/modules";
CONFIG_FILE :: "mkdocs.yml";
IGNORE :: [3]string_view.{
           "sdl2",
           "glfw3",
           "gl",
          };

working_directory: string_view;
output_directory: string_view;

main :: fn () s32 {
    defer std.temporary_release();
    working_directory = get_working_directory();
    output_directory = get_full_path(OUT_DIR);
    print("Generate BL documentation in '%'.\n", working_directory);

    create_config_file();

    src_files := std.str_new(&default_temporary_allocator);
    list_files_recursive(get_full_path(SRC_API_DIR), IGNORE, &src_files);
    err_cmd :: cmd("blc -doc --doc-out-dir=\"%\" %", output_directory, src_files);
    if err_cmd {
        print_err(err_cmd);
    }
    return 0;
}

create_config_file :: fn () bool {
    using std;
    filepath :: get_full_path(CONFIG_FILE);
    stream, err1 :: open_file(filepath, make_flags(OpenFileMode.WRITE, OpenFileMode.CREATE));
    defer close_file(&stream);
    if err1 {
        print_err("%", err1);
        return false;
    }

    content :: sprint(CONFIG, blc_ver());
    defer str_delete(&content);
    _, err2 :: write_string(&stream, content);
    if err2 {
        print_err("%", err2);
        return false;
    }
    return true;
}

get_working_directory :: fn () string_view {
    using std;
    lhs: string_view;
    if str_split_by_last(#file, '/', &lhs, null) {
        return str_new(lhs, &default_temporary_allocator);
    } else {
        return str_new(&default_temporary_allocator);
    }
}

get_full_path :: fn (relative: string_view) string_view #inline {
    return tprint("%/%", working_directory, relative);
}

blc_ver :: fn () string_view #inline {
    return tprint("%.%.%", BLC_VER_MAJOR, BLC_VER_MINOR, BLC_VER_PATCH);
}

list_files_recursive :: fn (dirpath: string_view, ignore: []string_view, out: *string) {
    using std;

    visitor :: fn (info: *std.Info, data: *string) Error {
        using std;
        if info.is_directory { return OK; }
        _, ext :: path_splitext(info.filename);
        if str_match(ext, ".bl") {
            str_append(data, tprint("\"%\" ", info.filepath));
        }
        return OK;
    };

    err :: visit_files(dirpath, VisitOpt.{ recursive = true }, &visitor, out);
    if err {
        panic(err);
    }
}

cmd :: fn (fmt: string_view, args: ...) Error {
    c :: tprint(fmt, args);
    state :: os_execute(c);
    if state != 0 {
        return error(state, "Executed shell command failed '%'!", c);
    }
    return OK;
}

CONFIG ::
    "site_name: Biscuit Language\n"
    "theme:\n"
    "    name: windmill\n"
    "plugins:\n"
    "    - include-markdown\n"
    "markdown_extensions:\n"
    "    - admonition\n"
    "extra_css:\n"
    "    - extra.css\n"
    "extra:\n"
    "    version: 0.10.0\n"
    "    article_nav_top: false\n"
    "    article_nav_bottom: false\n"
    "nav:\n"
    "    - Home: index.md\n"
    "    - installation.md\n"
    "    - language.md\n"
    "    - compiler.md\n"
    "    - how-to.md\n"
    "    - Modules:\n"
    "      - modules/a.md\n"
    "      - modules/argparse.md\n"
    "      - modules/array.md\n"
    "      - modules/static_array.md\n"
    "      - modules/bucket_array.md\n"
    "      - modules/table.md\n"
    "      - modules/pool.md\n"
    "      - modules/buffer_allocator.md\n"
    "      - modules/debug_allocator.md\n"
    "      - modules/build.md\n"
    "      - modules/debug.md\n"
    "      - modules/dlib.md\n"
    "      - modules/error.md\n"
    "      - modules/fs.md\n"
    "      - modules/glm.md\n"
    "      - modules/io.md\n"
    "      - modules/math.md\n"
    "      - modules/memory.md\n"
    "      - modules/print.md\n"
    "      - modules/string.md\n"
    "      - modules/thread.md\n"
    "      - modules/sync.md\n"
    "      - modules/test.md\n"
    "      - modules/utils.md\n"
    "      - misc/os.md\n"
;
