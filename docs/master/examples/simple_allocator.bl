// Preallocate memory on stack
_buffer: [4098]u8;
_bi: usize;

my_allocator :: {:Allocator: &my_allocator_handler };

my_allocator_handler :: fn (
    _: *Allocator,
    // Operation specify whether we do allocation or free
    operation: AllocOp, 
    // Count of bytes to be allocated, this value is set only when operation
    // is allocation.
    size: usize, 
    // This is pointer to allocation to be freed, this value is set only when
    // operation is free
    ptr: *u8 = null, 
    // Source file where allocator was called.
    file := String.empty, 
    // Line in source file where allocator was called.
    line := 0) *u8 
{
    switch operation {
        AllocOp.Allocate {
            // We get address of free memory by shifting buffer pointer.
            if _bi >= auto _buffer.len { panic(); }
            mem :: ptr_shift_bytes(_buffer.ptr, auto _bi);
            _bi += size;
            print_log("Allocate % bytes called from %:%.", size, file, line);
            return mem;
        }
        AllocOp.Free {
            // We do not handle memory free in this example, just print
            // out log message.
            print_log("Free called from %:%.", file, line);
        }
        AllocOp.Release;
        default { panic(); }
    }
    return null; 
}

main :: fn () s32 {
    // Store original allocator and set new one.
    orig_allocator :: _context.allocator;
    _context.allocator = &my_allocator;
    defer _context.allocator = orig_allocator;

    // All following allocations will use our custom allocator.
    str :: String.new("abc");
    defer String.delete(str);
    loop i := 0; i < 100; i += 1 {
        String.append(&str, i);
    }
    return 0;
}
