#+TITLE: Biscuit Language
#+AUTHOR: Martin Dorazil
#+OPTIONS: toc:nil H:3 num:0 ^:nil pri:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/styles/readtheorg/js/readtheorg.js"></script>
#+MACRO: imglnk @@html:<a href="$1"><img src="$2"></a>@@

{{{imglnk(https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BRSWZ2U7A2TXG&source=url,https://img.shields.io/badge/Donate-PayPal-green.svg)}}}

#+TOC: headlines 2

* About
  The Biscuit Language (BL) is simple imperative programming language using LLVM backend implemented in C. Language syntax and all it's features are still in development and not ready for "real" use yet. Biscuit is designed to be simple, fast and explicit.

** Goals
   - manual memory management
   - pointers
   - no exceptions
   - fast compilation
   - full compile-time execution (integrated interpreter)
   - no OOP
   - types as values in compile-time
   - use of the LLVM backend
   - multiplatform
     
** Example
   #+BEGIN_SRC bl
   main :: fn () s32 {
     return fib(10);
   };
   
   fib :: fn (n: s32) s32 {
     if n == 0 || n == 1 {
       return n;
     } else {
       return fib(n-1) + fib(n-2);
     }
   
     return -1;
   };
   #+END_SRC

* Releases
** 0.4.0 pre-alpha
- [[https://github.com/travisdoor/bl][source]]
- [[file:documentation.html][documentation]]
- [[file:MIR.html][MIR - documentation]]
  
