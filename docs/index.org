#+TITLE: Biscuit Language
#+AUTHOR: Martin Dorazil
#+EMAIL: biscuitlang@gmail.com

#+OPTIONS: toc:nil H:3 num:0 ^:nil pri:t
#+HTML_HEAD: <link rel="stylesheet" href="org-mode.css" type="text/css" />
#+MACRO: imglnk @@html:<a href="$1"><img src="$2"></a>@@

{{{imglnk(https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BRSWZ2U7A2TXG&source=url,https://img.shields.io/badge/Donate-PayPal-green.svg)}}}

#+TOC: headlines 2

* About
  The Biscuit Language (BL) is simple imperative programming language using LLVM backend implemented in C. Language syntax and all it's features are still in development and not ready for "real" use yet. Biscuit is designed to be simple, fast and explicit.
  
  Contact email: [[mailto:biscuitlang@gmail.com][biscuitlang@gmail.com]]

** Goals
   - manual memory management
   - pointers
   - no exceptions
   - fast compilation
   - full compile-time execution (integrated interpreter)
   - no OOP
   - types as values in compile-time
   - use of the LLVM backend
   - multiplatform
     
** Example
   #+BEGIN_SRC bl
   main :: fn () s32 {
     return fib(10);
   };
   
   fib :: fn (n: s32) s32 {
     if n == 0 || n == 1 {
       return n;
     } else {
       return fib(n-1) + fib(n-2);
     }
   
     return -1;
   };
   #+END_SRC
   
** Made with Biscuit
- [[https://github.com/travisdoor/skyshooter][Sky Shooter]] - Simple SDL game.
- [[https://github.com/travisdoor/PoissonDisk][PoissonDisk]] - Unity C# poisson disk generator tool.

** YouTube videos
1) [[https://www.youtube.com/watch?v=4UNTkqYakgI&t=22s][Introduction]] - Introduction to the language.


* Building and installation of the compiler from source code <<BUILD>>
** Requirements
  - git
  - CMake
  - LLVM
  - GCC/CLANG/Visual Studio compiler

** Linux
   - Install LLVM dev packages with your favourite package manager.
    #+BEGIN_EXAMPLE
    sudo apt install llvm-dev 
    #+END_EXAMPLE

   - Download and compile bl.
    #+BEGIN_EXAMPLE
    git clone https://github.com/travisdoor/bl.git
    cd bl
    mkdir build
    cd build
    cmake ..
    make
    #+END_EXAMPLE

   - For installation use: 
    #+BEGIN_EXAMPLE
    [sudo] make install
    #+END_EXAMPLE

   - Run bl.conf file generation
    #+BEGIN_EXAMPLE
    [sudo] blc -configure
    #+END_EXAMPLE

** MacOS
   - Install command line tools.
    #+BEGIN_EXAMPLE
    xcode-select --install
    #+END_EXAMPLE

   - Install LLVM dev packages with your favourite package manager.
     Brew:
    #+BEGIN_EXAMPLE
    brew install llvm
    #+END_EXAMPLE

   - Download and compile bl.
    #+BEGIN_EXAMPLE
    git clone https://github.com/travisdoor/bl.git
    cd bl
    mkdir build
    cd build
    cmake ..
    make
    #+END_EXAMPLE

   - For installation use: 
    #+BEGIN_EXAMPLE
    [sudo] make install
    #+END_EXAMPLE

   - Run bl.conf file generation
    #+BEGIN_EXAMPLE
    [sudo] blc -configure
    #+END_EXAMPLE

** Windows
   You will need Visual Studio 2019 installed on your machine. Everything needs to be compiled with the same Visual Studio version.

   - Compile and install LLVM tool set. [[https://llvm.org/docs/GettingStartedVS.html][full guide]]
    #+BEGIN_EXAMPLE
    git clone --config core.autocrlf=false https://github.com/llvm/llvm-project.git    
    cd llvm-project
    mkdir build
    cd build
    cmake ../llvm -G "Visual Studio 16 2019" -Thost=x64
    cmake --build . --config Release --target Install
    #+END_EXAMPLE

   - Run =cmd= as an administrator.

   - Download and compile bl.
    #+BEGIN_EXAMPLE
    git clone https://github.com/travisdoor/bl.git
    cd bl
    mkdir build
    cd build
    cmake .. -G "Visual Studio 16 2019" -Thost=x64
    #+END_EXAMPLE

    Now you should be able to compile the =bl= target from the Visual Studio or from the terminal with following command.

    #+BEGIN_EXAMPLE
    cmake --build . --config Release
    #+END_EXAMPLE
     
    Use this for installation into =Program Files=
    #+BEGIN_EXAMPLE
    cmake --build . --config Release --target Install
    #+END_EXAMPLE

   - You cound add installed =bin= folder to your system PATH.

   - Run bl.conf file generation
    #+BEGIN_EXAMPLE
    blc.exe -configure
    #+END_EXAMPLE

** Configuration 
   Compiler config file =bl.conf= can be found in =etc= directory. This file can be generated by =blc -configure= command. It's usually a good idea to regenerate configuration after platform tool-set updates. Compiler installed into the common GNU locations on UNIX systems or in =Program Files= on Windows require super user profile login to run configuration properly. 

* Contribution
** Download and compile
   Everything needed to do so is in section [[BUILD][Build compiler from source]]

** Find your good first issue
   All issues and enhancements can be found [[https://github.com/travisdoor/bl/issues][here]], issues marked as =good first issue= are the best for your initial contribution to the compiler.
   
   
** Pick your favourite editor and start hacking
   You can choose any IDE or text editor you want.

** Keep same style
   Clang-format tool is used to keep consistent code style all across the source base, the configuration file =.clang-format= is located in the repositary root. Please keep in mind that any other styles will not be accepted.
  
* Releases
** 0.4.1 pre-alpha
- [[https://github.com/travisdoor/bl][source]]
- [[file:documentation.html][documentation]]
- [[file:MIR.html][MIR - documentation]]
  
