#!/usr/local/bin/blc -rs

#import "std/fs"

SRC_DIR :: "src";
BUILD_FILE :: "build.bl";
MAIN_FILE :: "main.bl";

MAIN_BODY ::
    "main :: fn () s32 {\n"
    "    return 0;\n"
    "}";

BUILD_BODY :: 
    "build :: fn () #build_entry {\n"
    "    // create new executable assembly\n"
    "    exe :: add_executable(\"%\");\n"
    "\n"
    "    // add 'main.bl' file into the assembly 'exe'\n"
    "    add_unit(exe, \"src/main.bl\");\n"
    "}";

main :: fn () s32 {
    if command_line_arguments.len != 2 {
        print_err("Expected project name.");
        return 1;
    }
    tmp :: string_new();
    defer string_delete(tmp);
    name :: command_line_arguments[1];
    cwd :: fs_get_cwd();
    defer string_delete(cwd);
    print("Generate new project at '%' named '%'.\n", cwd, name);

    // create root
    fs_dir_create(name);

    // create src
    string_clear(&tmp);
    string_concatenate(&tmp, name, "/", SRC_DIR);
    fs_dir_create(tmp);

    // create main
    {
        string_clear(&tmp);
        string_concatenate(&tmp, name, "/", SRC_DIR, "/", MAIN_FILE);
        file, err :: fs_open(tmp, FSOpenMode.Write, FSOpenMode.Create);
        defer fs_close(file);
        if !is_ok(err) { panic(err); }
        fs_write_string(file, MAIN_BODY);
    }

    // create build
    {
        string_clear(&tmp);
        string_concatenate(&tmp, name, "/", BUILD_FILE);
        file, err :: fs_open(tmp, FSOpenMode.Write, FSOpenMode.Create);
        defer fs_close(file);
        if !is_ok(err) { panic(err); }

        buf: [1024]u8 #noinit;
        written :: bprint(buf, BUILD_BODY, name);
        fs_write_slice(file, buf, written);
    }

    print("DONE\n");
    return 0;
}