%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 5 0 R /F5 9 0 R /F6 35 0 R 
  /F7 37 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
6 0 obj
<<
/Contents 116 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
7 0 obj
<<
/Contents 117 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
8 0 obj
<<
/Contents 118 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
9 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
10 0 obj
<<
/Contents 119 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
11 0 obj
<<
/Contents 120 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
12 0 obj
<<
/Contents 121 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
13 0 obj
<<
/Contents 122 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
14 0 obj
<<
/Contents 123 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
15 0 obj
<<
/Contents 124 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
16 0 obj
<<
/Contents 125 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
17 0 obj
<<
/Contents 126 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
18 0 obj
<<
/Contents 127 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
19 0 obj
<<
/Contents 128 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
20 0 obj
<<
/Contents 129 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
21 0 obj
<<
/Contents 130 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
22 0 obj
<<
/Contents 131 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
23 0 obj
<<
/Contents 132 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
24 0 obj
<<
/Contents 133 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
25 0 obj
<<
/Contents 134 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
26 0 obj
<<
/Contents 135 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
27 0 obj
<<
/Contents 136 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
28 0 obj
<<
/Contents 137 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
29 0 obj
<<
/Contents 138 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
30 0 obj
<<
/Contents 139 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
31 0 obj
<<
/Contents 140 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
32 0 obj
<<
/Contents 141 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
33 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/ReStructuredText)
>> /Border [ 0 0 0 ] /Rect [ 327.2929 357.6236 381.982 369.6236 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Annots [ 33 0 R ] /Contents 142 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
35 0 obj
<<
/BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
36 0 obj
<<
/Contents 143 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
37 0 obj
<<
/BaseFont /Courier-Oblique /Encoding /WinAnsiEncoding /Name /F7 /Subtype /Type1 /Type /Font
>>
endobj
38 0 obj
<<
/Contents 144 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 115 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
39 0 obj
<<
/Outlines 41 0 R /PageLabels 145 0 R /PageMode /UseNone /Pages 115 0 R /Type /Catalog
>>
endobj
40 0 obj
<<
/Author () /CreationDate (D:20210321015718-01'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20210321015718-01'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Language Reference) /Trapped /False
>>
endobj
41 0 obj
<<
/Count 81 /First 42 0 R /Last 114 0 R /Type /Outlines
>>
endobj
42 0 obj
<<
/Count 4 /Dest [ 6 0 R /XYZ 62.69291 729.0236 0 ] /First 43 0 R /Last 46 0 R /Next 47 0 R /Parent 41 0 R 
  /Title (Compiler usage)
>>
endobj
43 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 696.0236 0 ] /Next 44 0 R /Parent 42 0 R /Title (Description)
>>
endobj
44 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 570.0236 0 ] /Next 45 0 R /Parent 42 0 R /Prev 43 0 R /Title (Compiler options:)
>>
endobj
45 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 540.0236 0 ] /Next 46 0 R /Parent 42 0 R /Prev 44 0 R /Title (Configuration)
>>
endobj
46 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 462.0236 0 ] /Parent 42 0 R /Prev 45 0 R /Title (Execution status)
>>
endobj
47 0 obj
<<
/Count 1 /Dest [ 6 0 R /XYZ 62.69291 348.0236 0 ] /First 48 0 R /Last 48 0 R /Next 49 0 R /Parent 41 0 R 
  /Prev 42 0 R /Title (Language)
>>
endobj
48 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 315.0236 0 ] /Parent 47 0 R /Title (Base syntax)
>>
endobj
49 0 obj
<<
/Count 12 /Dest [ 7 0 R /XYZ 62.69291 572.6236 0 ] /First 50 0 R /Last 61 0 R /Next 62 0 R /Parent 41 0 R 
  /Prev 47 0 R /Title (Data types)
>>
endobj
50 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 539.6236 0 ] /Next 51 0 R /Parent 49 0 R /Title (Fundamental data types)
>>
endobj
51 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 233.6236 0 ] /Next 52 0 R /Parent 49 0 R /Prev 50 0 R /Title (Pointer)
>>
endobj
52 0 obj
<<
/Dest [ 8 0 R /XYZ 62.69291 667.8236 0 ] /Next 53 0 R /Parent 49 0 R /Prev 51 0 R /Title (Array)
>>
endobj
53 0 obj
<<
/Dest [ 8 0 R /XYZ 62.69291 269.1722 0 ] /Next 54 0 R /Parent 49 0 R /Prev 52 0 R /Title (String)
>>
endobj
54 0 obj
<<
/Dest [ 10 0 R /XYZ 62.69291 765.0236 0 ] /Next 55 0 R /Parent 49 0 R /Prev 53 0 R /Title (Slice)
>>
endobj
55 0 obj
<<
/Dest [ 10 0 R /XYZ 62.69291 354.4236 0 ] /Next 56 0 R /Parent 49 0 R /Prev 54 0 R /Title (Structure)
>>
endobj
56 0 obj
<<
/Dest [ 12 0 R /XYZ 62.69291 307.8236 0 ] /Next 57 0 R /Parent 49 0 R /Prev 55 0 R /Title (Union)
>>
endobj
57 0 obj
<<
/Dest [ 13 0 R /XYZ 62.69291 487.8236 0 ] /Next 58 0 R /Parent 49 0 R /Prev 56 0 R /Title (Any)
>>
endobj
58 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 590.6236 0 ] /Next 59 0 R /Parent 49 0 R /Prev 57 0 R /Title (Enum)
>>
endobj
59 0 obj
<<
/Dest [ 15 0 R /XYZ 62.69291 679.8236 0 ] /Next 60 0 R /Parent 49 0 R /Prev 58 0 R /Title (Type aliasing)
>>
endobj
60 0 obj
<<
/Dest [ 15 0 R /XYZ 62.69291 473.4236 0 ] /Next 61 0 R /Parent 49 0 R /Prev 59 0 R /Title (Function type)
>>
endobj
61 0 obj
<<
/Dest [ 15 0 R /XYZ 62.69291 275.0236 0 ] /Parent 49 0 R /Prev 60 0 R /Title (Type casting)
>>
endobj
62 0 obj
<<
/Count 2 /Dest [ 16 0 R /XYZ 62.69291 321.0772 0 ] /First 63 0 R /Last 64 0 R /Next 65 0 R /Parent 41 0 R 
  /Prev 49 0 R /Title (Literals)
>>
endobj
63 0 obj
<<
/Dest [ 16 0 R /XYZ 62.69291 288.0772 0 ] /Next 64 0 R /Parent 62 0 R /Title (Simple literals)
>>
endobj
64 0 obj
<<
/Dest [ 16 0 R /XYZ 62.69291 200.8772 0 ] /Parent 62 0 R /Prev 63 0 R /Title (Integer literals)
>>
endobj
65 0 obj
<<
/Count 4 /Dest [ 17 0 R /XYZ 62.69291 655.8236 0 ] /First 66 0 R /Last 69 0 R /Next 70 0 R /Parent 41 0 R 
  /Prev 62 0 R /Title (Operators)
>>
endobj
66 0 obj
<<
/Dest [ 17 0 R /XYZ 62.69291 622.8236 0 ] /Next 67 0 R /Parent 65 0 R /Title (Binary)
>>
endobj
67 0 obj
<<
/Dest [ 17 0 R /XYZ 62.69291 169.6236 0 ] /Next 68 0 R /Parent 65 0 R /Prev 66 0 R /Title (Unary)
>>
endobj
68 0 obj
<<
/Dest [ 18 0 R /XYZ 62.69291 665.8236 0 ] /Next 69 0 R /Parent 65 0 R /Prev 67 0 R /Title (Special)
>>
endobj
69 0 obj
<<
/Dest [ 18 0 R /XYZ 62.69291 533.8236 0 ] /Parent 65 0 R /Prev 68 0 R /Title (Type Info)
>>
endobj
70 0 obj
<<
/Count 18 /Dest [ 18 0 R /XYZ 62.69291 174.6236 0 ] /First 71 0 R /Last 88 0 R /Next 89 0 R /Parent 41 0 R 
  /Prev 65 0 R /Title (Hash directive)
>>
endobj
71 0 obj
<<
/Dest [ 19 0 R /XYZ 62.69291 765.0236 0 ] /Next 72 0 R /Parent 70 0 R /Title (#load)
>>
endobj
72 0 obj
<<
/Dest [ 19 0 R /XYZ 62.69291 599.8236 0 ] /Next 73 0 R /Parent 70 0 R /Prev 71 0 R /Title (#import)
>>
endobj
73 0 obj
<<
/Dest [ 19 0 R /XYZ 62.69291 518.6236 0 ] /Next 74 0 R /Parent 70 0 R /Prev 72 0 R /Title (#private)
>>
endobj
74 0 obj
<<
/Dest [ 19 0 R /XYZ 62.69291 251.4236 0 ] /Next 75 0 R /Parent 70 0 R /Prev 73 0 R /Title (#scope)
>>
endobj
75 0 obj
<<
/Dest [ 19 0 R /XYZ 62.69291 137.4236 0 ] /Next 76 0 R /Parent 70 0 R /Prev 74 0 R /Title (#extern)
>>
endobj
76 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 671.8236 0 ] /Next 77 0 R /Parent 70 0 R /Prev 75 0 R /Title (#export)
>>
endobj
77 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 536.6236 0 ] /Next 78 0 R /Parent 70 0 R /Prev 76 0 R /Title (#compiler)
>>
endobj
78 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 399.6236 0 ] /Next 79 0 R /Parent 70 0 R /Prev 77 0 R /Title (#test)
>>
endobj
79 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 252.4236 0 ] /Next 80 0 R /Parent 70 0 R /Prev 78 0 R /Title (#line)
>>
endobj
80 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 204.4236 0 ] /Next 81 0 R /Parent 70 0 R /Prev 79 0 R /Title (#file)
>>
endobj
81 0 obj
<<
/Dest [ 20 0 R /XYZ 62.69291 156.4236 0 ] /Next 82 0 R /Parent 70 0 R /Prev 80 0 R /Title (#noinit)
>>
endobj
82 0 obj
<<
/Dest [ 21 0 R /XYZ 62.69291 703.8236 0 ] /Next 83 0 R /Parent 70 0 R /Prev 81 0 R /Title (#call_location)
>>
endobj
83 0 obj
<<
/Dest [ 21 0 R /XYZ 62.69291 508.6236 0 ] /Next 84 0 R /Parent 70 0 R /Prev 82 0 R /Title (#inline and #no_inline)
>>
endobj
84 0 obj
<<
/Dest [ 21 0 R /XYZ 62.69291 373.4236 0 ] /Next 85 0 R /Parent 70 0 R /Prev 83 0 R /Title (#base)
>>
endobj
85 0 obj
<<
/Dest [ 21 0 R /XYZ 62.69291 250.2236 0 ] /Next 86 0 R /Parent 70 0 R /Prev 84 0 R /Title (#entry)
>>
endobj
86 0 obj
<<
/Dest [ 21 0 R /XYZ 62.69291 113.2236 0 ] /Next 87 0 R /Parent 70 0 R /Prev 85 0 R /Title (#build_entry)
>>
endobj
87 0 obj
<<
/Dest [ 22 0 R /XYZ 62.69291 765.0236 0 ] /Next 88 0 R /Parent 70 0 R /Prev 86 0 R /Title (#tags)
>>
endobj
88 0 obj
<<
/Dest [ 22 0 R /XYZ 62.69291 617.8236 0 ] /Parent 70 0 R /Prev 87 0 R /Title (#intrinsic)
>>
endobj
89 0 obj
<<
/Dest [ 22 0 R /XYZ 62.69291 480.8236 0 ] /Next 90 0 R /Parent 41 0 R /Prev 70 0 R /Title (Variable)
>>
endobj
90 0 obj
<<
/Dest [ 23 0 R /XYZ 62.69291 635.6772 0 ] /Next 91 0 R /Parent 41 0 R /Prev 89 0 R /Title (Compound expression)
>>
endobj
91 0 obj
<<
/Count 8 /Dest [ 23 0 R /XYZ 62.69291 149.4772 0 ] /First 92 0 R /Last 99 0 R /Next 100 0 R /Parent 41 0 R 
  /Prev 90 0 R /Title (Function)
>>
endobj
92 0 obj
<<
/Dest [ 24 0 R /XYZ 62.69291 741.0236 0 ] /Next 93 0 R /Parent 91 0 R /Title (Named function)
>>
endobj
93 0 obj
<<
/Dest [ 24 0 R /XYZ 62.69291 413.8236 0 ] /Next 94 0 R /Parent 91 0 R /Prev 92 0 R /Title (Anonymous function)
>>
endobj
94 0 obj
<<
/Dest [ 24 0 R /XYZ 62.69291 254.6236 0 ] /Next 95 0 R /Parent 91 0 R /Prev 93 0 R /Title (Function pointer)
>>
endobj
95 0 obj
<<
/Dest [ 25 0 R /XYZ 62.69291 619.8236 0 ] /Next 96 0 R /Parent 91 0 R /Prev 94 0 R /Title (Function with variable argument count)
>>
endobj
96 0 obj
<<
/Dest [ 25 0 R /XYZ 62.69291 268.6236 0 ] /Next 97 0 R /Parent 91 0 R /Prev 95 0 R /Title (Local function)
>>
endobj
97 0 obj
<<
/Dest [ 26 0 R /XYZ 62.69291 765.0236 0 ] /Next 98 0 R /Parent 91 0 R /Prev 96 0 R /Title (Default argument value)
>>
endobj
98 0 obj
<<
/Dest [ 26 0 R /XYZ 62.69291 581.8236 0 ] /Next 99 0 R /Parent 91 0 R /Prev 97 0 R /Title (Explicit function overloading)
>>
endobj
99 0 obj
<<
/Dest [ 26 0 R /XYZ 62.69291 290.6236 0 ] /Parent 91 0 R /Prev 98 0 R /Title (Multiple return values)
>>
endobj
100 0 obj
<<
/Dest [ 27 0 R /XYZ 62.69291 578.6236 0 ] /Next 101 0 R /Parent 41 0 R /Prev 91 0 R /Title (Block)
>>
endobj
101 0 obj
<<
/Dest [ 27 0 R /XYZ 62.69291 320.4236 0 ] /Next 102 0 R /Parent 41 0 R /Prev 100 0 R /Title (if - else)
>>
endobj
102 0 obj
<<
/Dest [ 28 0 R /XYZ 62.69291 765.0236 0 ] /Next 103 0 R /Parent 41 0 R /Prev 101 0 R /Title (Loop)
>>
endobj
103 0 obj
<<
/Dest [ 28 0 R /XYZ 62.69291 476.8236 0 ] /Next 104 0 R /Parent 41 0 R /Prev 102 0 R /Title (Break and continue)
>>
endobj
104 0 obj
<<
/Dest [ 28 0 R /XYZ 62.69291 254.6236 0 ] /Next 105 0 R /Parent 41 0 R /Prev 103 0 R /Title (Switch)
>>
endobj
105 0 obj
<<
/Dest [ 29 0 R /XYZ 62.69291 237.4236 0 ] /Next 106 0 R /Parent 41 0 R /Prev 104 0 R /Title (Defer statement)
>>
endobj
106 0 obj
<<
/Dest [ 30 0 R /XYZ 62.69291 410.6236 0 ] /Next 107 0 R /Parent 41 0 R /Prev 105 0 R /Title (Main function)
>>
endobj
107 0 obj
<<
/Count 1 /Dest [ 31 0 R /XYZ 62.69291 765.0236 0 ] /First 108 0 R /Last 108 0 R /Next 109 0 R /Parent 41 0 R 
  /Prev 106 0 R /Title (Modules and import)
>>
endobj
108 0 obj
<<
/Dest [ 31 0 R /XYZ 62.69291 228.4236 0 ] /Parent 107 0 R /Title (List of module config entries)
>>
endobj
109 0 obj
<<
/Dest [ 32 0 R /XYZ 62.69291 765.0236 0 ] /Next 110 0 R /Parent 41 0 R /Prev 107 0 R /Title (Unit testing)
>>
endobj
110 0 obj
<<
/Dest [ 34 0 R /XYZ 62.69291 765.0236 0 ] /Next 111 0 R /Parent 41 0 R /Prev 109 0 R /Title (Build System)
>>
endobj
111 0 obj
<<
/Dest [ 34 0 R /XYZ 62.69291 678.0236 0 ] /Next 112 0 R /Parent 41 0 R /Prev 110 0 R /Title (Script mode)
>>
endobj
112 0 obj
<<
/Dest [ 34 0 R /XYZ 62.69291 396.6236 0 ] /Next 113 0 R /Parent 41 0 R /Prev 111 0 R /Title (Automatic Documentation)
>>
endobj
113 0 obj
<<
/Dest [ 36 0 R /XYZ 62.69291 186.2158 0 ] /Next 114 0 R /Parent 41 0 R /Prev 112 0 R /Title (Use BL code from C/C++)
>>
endobj
114 0 obj
<<
/Dest [ 38 0 R /XYZ 62.69291 529.4236 0 ] /Parent 41 0 R /Prev 113 0 R /Title (Builtin variables)
>>
endobj
115 0 obj
<<
/Count 29 /Kids [ 6 0 R 7 0 R 8 0 R 10 0 R 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 16 0 R 
  17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 
  27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 34 0 R 36 0 R 38 0 R ] /Type /Pages
>>
endobj
116 0 obj
<<
/Length 5666
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 136.5849 0 Td (Language Reference) Tj T* -136.5849 0 Td ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Compiler usage) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Description) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 600.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.328555 Tw (Biscuit language compiler is standalone terminal application called blc. It can be compiled from source) Tj T* 0 Tw 1.524269 Tw (code found on GitHub repository or downloaded from home page as prebuilded binary executable. All) Tj T* 0 Tw 4.468314 Tw (three major operating systems \(Windows, macOS and Linux\) are supported, but current active) Tj T* 0 Tw 1.876457 Tw (development is done on Windows and it usually takes some time to port latest changes to the other) Tj T* 0 Tw 1.777318 Tw (platforms. Compiler executable can be found in bin directory it's usually good idea to add executable) Tj T* 0 Tw (location to system PATH to be accessible from other locations.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 582.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are several options which can be passed to the compiler.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 552.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Compiler options:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 522.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Configuration) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 504.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Use ) Tj /F3 10 Tf (bl-config) Tj /F1 10 Tf ( tool to change compiler configuration.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 474.0236 cm
q
BT 1 0 0 1 0 14 Tm 3.469069 Tw 12 TL /F1 10 Tf 0 0 0 rg (This tool generates configuration file ) Tj /F3 10 Tf (etc/bl.conf) Tj /F1 10 Tf ( containing all required information needed by) Tj T* 0 Tw (compiler during compilation.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 444.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Execution status) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 432.0236 cm
Q
q
1 0 0 1 62.69291 432.0236 cm
Q
q
1 0 0 1 62.69291 420.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (After regular compilation process ) Tj /F4 10 Tf (blc) Tj /F1 10 Tf ( return 0 on success or numeric maximum error code on fail.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 414.0236 cm
Q
q
1 0 0 1 62.69291 390.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.155366 Tw 12 TL /F1 10 Tf 0 0 0 rg (When ) Tj /F4 10 Tf (--run|--run-script) Tj /F1 10 Tf ( flag is specified ) Tj /F4 10 Tf (blc) Tj /F1 10 Tf ( return status returned by executed ) Tj /F4 10 Tf (main) Tj /F1 10 Tf ( function on) Tj T* 0 Tw (success or numeric maximum error code on fail \(compilation error or compile time execution error\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 384.0236 cm
Q
q
1 0 0 1 62.69291 360.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.264651 Tw 12 TL /F1 10 Tf 0 0 0 rg (When ) Tj /F4 10 Tf (--run-tests) Tj /F1 10 Tf ( flag is specified ) Tj /F4 10 Tf (blc) Tj /F1 10 Tf ( return count of failed tests on success or numeric maximum) Tj T* 0 Tw (error code on fail.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 360.0236 cm
Q
q
1 0 0 1 62.69291 327.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Language) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 297.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Base syntax) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 255.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .407045 Tw (Basically every construct in bl follows the same rules of declaration syntax. We define name of the entity,) Tj T* 0 Tw .41332 Tw (type and optionally some initial value. Name can be usually used to reference the entity later in code and) Tj T* 0 Tw (type describes layout of data represented by the entity. It could be a number, text or more complex types.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 237.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Possible declarations:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 183.2624 cm
q
q
.930106 0 0 .930106 0 0 cm
q
1 0 0 1 6.6 7.095962 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 504 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (name) Tj (>) Tj (: ) Tj (<) Tj (type) Tj (>) Tj (;              // mutable declaration) Tj T* (<) Tj (name) Tj (>) Tj (: [type] = ) Tj (<) Tj (value) Tj (>) Tj (;    // mutable declaration) Tj T* (<) Tj (name) Tj (>) Tj (: [type] : ) Tj (<) Tj (value) Tj (>) Tj (;    // immutable declaration \(value can be set only once\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 126.0624 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (foo: s32;                // integer variable without initial value) Tj T* (name: string = "Martin"; // string variable) Tj T* (name: string : "Martin"; // string constant) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 94.06239 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .692765 Tw (When we decide to explicitly specify initial value, data type can be inferred from this value. In such case) Tj T* 0 Tw (the type is optional.) Tj T* ET
Q
Q
 
endstream
endobj
117 0 obj
<<
/Length 6328
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (name := "Martin"; // string variable) Tj T* (name :: "Martin"; // string constant) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Comments) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 689.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Comment lines will be ignored by compiler.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 584.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (// this is line comment) Tj T* (/*) Tj T* ( this) Tj T* ( is) Tj T* ( multi line) Tj T* ( comment) Tj T* (*/) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 551.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Data types) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 521.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Fundamental data types) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 503.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Fundamental types are atomic basic types builtin into BL compiler.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 497.6236 cm
Q
q
1 0 0 1 62.69291 245.6236 cm
1 1 1 rg
n 0 252 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 234 469.8898 -18 re f*
1 1 1 rg
n 0 216 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 198 469.8898 -18 re f*
1 1 1 rg
n 0 180 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 162 469.8898 -18 re f*
1 1 1 rg
n 0 144 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 126 469.8898 -18 re f*
1 1 1 rg
n 0 108 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 90 469.8898 -18 re f*
1 1 1 rg
n 0 72 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 54 469.8898 -18 re f*
1 1 1 rg
n 0 36 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 252 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 237 cm
q
.960784 .960784 .862745 rg
n 0 0 222.9449 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 98.13744 0 Td (Name) Tj T* -98.13744 0 Td ET
Q
Q
q
1 0 0 1 240.9449 237 cm
q
.960784 .960784 .862745 rg
n 0 0 222.9449 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 86.46744 0 Td (Description) Tj T* -86.46744 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (s8) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Signed 8-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (s16) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Signed 16-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (s32) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Signed 32-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (s64) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Signed 64-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (u8) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unsigned 8-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (u16) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unsigned 16-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (u32) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unsigned 32-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (u64) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unsigned 64-bit number.) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (usize) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unsigned 64-bit size.) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bool) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Boolean. \(true/false\)) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (f32) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (32-bit floating point number.) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (f64) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (64-bit floating point number.) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (string) Tj T* ET
Q
Q
q
1 0 0 1 240.9449 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (String slice.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 234 m 469.8898 234 l S
n 0 216 m 469.8898 216 l S
n 0 198 m 469.8898 198 l S
n 0 180 m 469.8898 180 l S
n 0 162 m 469.8898 162 l S
n 0 144 m 469.8898 144 l S
n 0 126 m 469.8898 126 l S
n 0 108 m 469.8898 108 l S
n 0 90 m 469.8898 90 l S
n 0 72 m 469.8898 72 l S
n 0 54 m 469.8898 54 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 234.9449 0 m 234.9449 252 l S
n 0 252 m 469.8898 252 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 252 l S
n 469.8898 0 m 469.8898 252 l S
Q
Q
q
1 0 0 1 62.69291 245.6236 cm
Q
q
1 0 0 1 62.69291 215.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Pointer) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 197.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Represents the address of some allocated data.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 164.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (*) Tj (<) Tj (T) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 144.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 87.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg (#import "std/test") Tj T*  T* (pointers :: fn \(\) #test {) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
118 0 obj
<<
/Length 3842
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 679.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
BT 1 0 0 1 0 62 Tm 12 TL /F3 10 Tf 0 0 0 rg (    i := 666;) Tj T* (    i_ptr : *s32 = ) Tj (&) Tj (i; // taking the address of 'i' variable and set 'i_ptr') Tj T* (    j := ^i_ptr;       // pointer dereferencing) Tj T*  T* (    test_true\(j == i\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 649.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Array) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 631.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Array is aggregate type of multiple values of the same type. Size value must be known in compile time.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 598.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg ([) Tj (<) Tj (size) Tj (>) Tj (] ) Tj (<) Tj (T) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 566.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .37528 Tw (Arrays can be inline initialized with compound block, type is required. Zero initializer can be used for zero) Tj T* 0 Tw (initialization of whole array storage, otherwise we must specify value for every element in an array.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 533.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg ({:) Tj (<) Tj (T) Tj (>) Tj (: [val], ...}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 513.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 370.3722 cm
q
q
.930106 0 0 .930106 0 0 cm
q
1 0 0 1 6.6 7.095962 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 504 144 re B*
Q
q
BT 1 0 0 1 0 122 Tm 12 TL /F3 10 Tf 0 0 0 rg (array_type :: fn \(\) #test {) Tj T* (    arr1 : [10] s32; // declare zero initialized array variable) Tj T* (    arr1[0] = 666;) Tj T*  T* (    arr1.len; // yields array element count \(s64\)) Tj T* (    arr1.ptr; // yields pointer to first element ') Tj (&) Tj (arr[0]') Tj T*  T* (    // inline initialization of array type) Tj T* (    arr2 := {:[10]s32: 0 };         // initialize whole array explicitly to 0) Tj T* (    arr3 := {:[4]s32: 1, 2, 3, 4 }; // initialize array to the sequence 1, 2, 3, 4) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 350.3722 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Arrays can be implicitly converted to slice:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 281.1722 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (array_to_slice :: fn \(\) #test {) Tj T* (    arr : [10] s32;) Tj T* (    slice : []s32 = arr;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 251.1722 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (String) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 221.1722 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .799398 Tw (String type in Biscuit is slice containing pointer to string data and string length. String literals are always) Tj T* 0 Tw (zero terminated.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 203.1722 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 121.9722 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (string_type :: fn \(\) #test {) Tj T* (    msg : string = "Hello world\\n";) Tj T* (    msg.len; // character count of the string) Tj T* (    msg.ptr; // pointer to the string content) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
119 0 obj
<<
/Length 3965
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Slice) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Array slice is consist of pointer to the first array element and array length.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Syntax:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 677.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg ([] ) Tj (<) Tj (type) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 657.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Slice layout:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 588.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (Slice :: struct {) Tj T* (    len: s64;) Tj T* (    ptr: *T) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 568.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 463.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
BT 1 0 0 1 0 74 Tm 12 TL /F3 10 Tf 0 0 0 rg (array_slice :: fn \(\) #test {) Tj T* (    arr :: {:[4]s32: 1, 2, 3, 4};) Tj T* (    slice : []s32 = arr;) Tj T* (    loop i := 0; i ) Tj (<) Tj ( slice.len; i += 1 {) Tj T* (        print\("%\\n", slice[i]\);) Tj T* (    }) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 443.4236 cm
Q
q
1 0 0 1 62.69291 372.4236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Hint) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 1 0 0 rg (:ref:`slice_init`) Tj 0 0 0 rg ( can be used to allocate slice on the heap using context allocator.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 366.4236 cm
Q
q
1 0 0 1 62.69291 336.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Structure) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 294.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .166654 Tw (Structure is a composite type representing group of data as a single type. Structure is as an array another) Tj T* 0 Tw -0.106328 Tw (way to define user data type, but types of structure members could be different. It can be used in situations) Tj T* 0 Tw (when it's better to group data into one unit instead of interact with separate units.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 276.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Structure can be declared with use of struct keyword.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 195.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (Person :: struct {) Tj T* (    id: s32;) Tj T* (    name: string;) Tj T* (    age: s32;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 163.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.127012 Tw (Structure Person in example is consist of id, name and age. Now we can create variable of this type and fill) Tj T* 0 Tw (it with data. To access person's member fields use . operator.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 82.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (main :: fn \(\) s32 {) Tj T* (    my_person: Person; // Create instance of type Person) Tj T* (    my_person.id = 1;) Tj T* (    my_person.age = 20;) Tj T* (    my_person.name = "Martin";) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
120 0 obj
<<
/Length 3854
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL  T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Inline initialization is also possible. We can use compound expression to set all members at once.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 602.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (main :: fn \(\) s32 {) Tj T* (    my_person1 := {:Person: 0}; // set all data in person to 0) Tj T* (    my_person2 := {:Person: 1, "Martin", 20};) Tj T*  T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 582.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Structure content can be printed by print function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 489.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (main :: fn \(\) s32 {) Tj T* (    my_person := {:Person: 1, "Martin", 20};) Tj T* (    print\("%\\n", my_person\);) Tj T*  T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 456.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (Person {id = 1, name = Martin, age = 20}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 412.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.001654 Tw (Due to lack of OOP support we cannot declare member functions in structures and there is no class or) Tj T* 0 Tw .175868 Tw (object concept in the language. Common way to manipulate with data is passing them into the function as) Tj T* 0 Tw (an argument.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 355.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (person_add_age :: fn \(person: *Person, add: s32\) {) Tj T* (    person.age += add;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 287.0236 cm
q
BT 1 0 0 1 0 50 Tm .272093 Tw 12 TL /F1 10 Tf 0 0 0 rg (Structure can extend any type with use of ) Tj /F3 10 Tf (#base) Tj ( ) Tj (<) Tj (T) Tj (>) Tj /F1 10 Tf (. This is kind of inheritance similar to C style where) Tj T* 0 Tw 1.916651 Tw (inheritance can be simulated by composition. The ) Tj /F3 10 Tf (#base) Tj ( ) Tj (<) Tj (T) Tj (>) Tj /F1 10 Tf ( basically insert ) Tj /F3 10 Tf (base:) Tj ( ) Tj (T) Tj /F1 10 Tf (; as the first) Tj T* 0 Tw .313984 Tw (member into the structure. The compiler can use this information later to provide more inheritance related) Tj T* 0 Tw .92686 Tw (features like merging of scopes to enable direct access to base-type members via ) Tj /F3 10 Tf (.) Tj /F1 10 Tf ( operator or implicit) Tj T* 0 Tw (cast from child to parent type.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 269.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example of struct extension:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 79.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
BT 1 0 0 1 0 158 Tm 12 TL /F3 10 Tf 0 0 0 rg (Entity :: struct {) Tj T* (    id: s32) Tj T* (}) Tj T*  T* (// Player has base type Entity) Tj T* (Player :: struct #base Entity {) Tj T* (    // base: Entity; is implicitly inserted as first member) Tj T* (    name: string) Tj T* (};) Tj T*  T* (Wall :: struct #base Entity {) Tj T* (    height: s32) Tj T* (};) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
121 0 obj
<<
/Length 2225
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 319.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 444 re B*
Q
q
BT 1 0 0 1 0 422 Tm 12 TL /F3 10 Tf 0 0 0 rg (Enemy :: struct #base Entity {) Tj T* (    health: s32) Tj T* (};) Tj T*  T* (// Multi-level extension Boss -) Tj (>) Tj ( Enemy -) Tj (>) Tj ( Entity) Tj T* (Boss :: struct #base Enemy {) Tj T* (    // Extended struct can be empty.) Tj T* (};) Tj T*  T* (struct_extending :: fn \(\) #test {) Tj T* (    p: Player;) Tj T* (    p.id = 10; // direct access to base-type members) Tj T* (    p.name = "Travis";) Tj T* (    assert\(p.base.id == 10\); // access via .base) Tj T*  T* (    w: Wall;) Tj T* (    w.id = 11;) Tj T* (    w.height = 666;) Tj T*  T* (    e: Enemy;) Tj T* (    e.id = 12;) Tj T* (    e.health = 100;) Tj T*  T* (    b: Boss;) Tj T* (    b.id = 13;) Tj T*  T* (    // implicit down cast to entity) Tj T* (    update\() Tj (&) Tj (p\);) Tj T* (    update\() Tj (&) Tj (w\);) Tj T* (    update\() Tj (&) Tj (e\);) Tj T* (    update\() Tj (&) Tj (b\);) Tj T* (}) Tj T*  T* (update :: fn \(e: *Entity\) {) Tj T* (    print\("id = %\\n", e.id\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 289.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Union) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 247.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .244104 Tw (Union is special composite type representing value of multiple types. Union size is always equal to size of) Tj T* 0 Tw 1.37186 Tw (the biggest member type and memory offset of all members is same. Union is usually associated with) Tj T* 0 Tw (some enum providing information about stored type.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 229.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg (Token :: union {) Tj T* (    as_string: string;) Tj T* (    as_int: s32;) Tj T* (}) Tj T*  T* (Kind :: enum {) Tj T* (    String;) Tj T* (    Int;) Tj T* (}) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
122 0 obj
<<
/Length 3335
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 499.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 264 re B*
Q
q
BT 1 0 0 1 0 242 Tm 12 TL /F3 10 Tf 0 0 0 rg (test_union :: fn \(\) #test {) Tj T* (    token1: Token;) Tj T* (    token2: Token;) Tj T*  T* (    // Token has total size of the biggest member.) Tj T* (    assert\(sizeof\(token1 == sizeof\(string\)\);) Tj T*  T* (    token1.as_string = "This is string";) Tj T* (    consumer\() Tj (&) Tj (token, Kind.String\);) Tj T*  T* (    token2.as_int = 666;) Tj T* (    consumer\() Tj (&) Tj (token, Kind.Int\);) Tj T* (}) Tj T*  T* (consumer :: fn \(token: *Token, kind: TokenKind\) {) Tj T* (    switch kind {) Tj T* (        Kind.String { print\("%\\n", token.as_string\); }) Tj T* (        Kind.Int    { print\("%\\n", token.as_int\); }) Tj T* (        default { panic\(\); }) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 469.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Any) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 439.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .437045 Tw (The Any type is special builtin structure containing pointer to TypeInfo and pointer to data. Any value can) Tj T* 0 Tw (be implicitly casted to this type on function call.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 421.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Any type layout:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 352.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (Any :: struct #compiler {) Tj T* (    type_info: *TypeInfo;) Tj T* (    data: *u8) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 308.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .505542 Tw (Remember that the Any instance does not contains copy of the value but only pointer to already stack or) Tj T* 0 Tw -0.09189 Tw (heap allocated data. The Any instance never owns pointed data and should not be responsible for memory) Tj T* 0 Tw (free.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 278.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .67311 Tw (Since Any contains pointer to data, we need to generate temporary storage on stack for constant literals) Tj T* 0 Tw (converted to Any.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 197.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (...) Tj T* (foo\(10\); // temp for '10' is created here) Tj T* (...) Tj T*  T* (foo :: fn \(v: Any\) {}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 165.4236 cm
q
BT 1 0 0 1 0 14 Tm 2.271318 Tw 12 TL /F1 10 Tf 0 0 0 rg (For types converted to the Any compiler implicitly sets ) Tj /F3 10 Tf (type_info) Tj /F1 10 Tf ( field to pointer to the TypeType) Tj T* 0 Tw (type-info and data field to the pointer to actual type-info of the converted type.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 84.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (...) Tj T* (foo\(s32\); // Type passed) Tj T* (...) Tj T*  T* (foo :: fn \(v: Any\) {) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
123 0 obj
<<
/Length 2945
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (    assert\(v.type_info.kind == TypeKind.Type\);) Tj T*  T* (    data_info := cast\(*TypeInfo\) v.data;) Tj T* (    assert\(data_info.kind == TypeKind.Int\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 659.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.059986 Tw (Any can be combined with vargs, good example of this use case is print function where args argument) Tj T* 0 Tw (type is vargs of Any \(... is same as ...Any\). The print function can take values of any type passed in args.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 602.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (print :: fn \(format: string, args: ...\) {) Tj T* (    ...) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 572.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Enum) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 542.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.460651 Tw (The enum allows the creation of type representing one of listed variants. Biscuit enums can represent) Tj T* 0 Tw (variants of any integer type \(s32 by default\). All variants are grouped into enum's namespace.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 524.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 432 re B*
Q
q
BT 1 0 0 1 0 410 Tm 12 TL /F3 10 Tf 0 0 0 rg (// Enum declaration \(base type is by default s32\)) Tj T* (Color : type : enum {) Tj T* (    Red;    // default value 0) Tj T* (    Green;  // default value 1) Tj T* (    Blue    // default value 2) Tj T* (};) Tj T*  T* (simple_enumerator :: fn \(\) #test {) Tj T* (    assert\(cast\(s32\) Color.Red == 0\);) Tj T* (    assert\(cast\(s32\) Color.Green == 1\);) Tj T* (    assert\(cast\(s32\) Color.Blue == 2\);) Tj T*  T* (    // Base type is s32) Tj T* (    assert\(sizeof\(Color\) == 4\);) Tj T*  T* (    // Declare variable of type Color with value Red) Tj T* (    color := Color.Red;) Tj T* (    assert\(cast\(s32\) color == 0\);) Tj T* (};) Tj T*  T* (// Enum declaration \(base type is u8\)) Tj T* (Day :: enum u8 {) Tj T* (    Sat :: 1; // first value explicitly set to 1) Tj T* (    Sun;      // implicitly set to previous value + 1 -) Tj (>) Tj ( 2) Tj T* (    Mon;      // 3) Tj T* (    Tue;      // ...) Tj T* (    Wed;) Tj T* (    Thu;) Tj T* (    Fri) Tj T* (};) Tj T*  T* (test_enumerator :: fn \(\) #test {) Tj T* (    /* Day */) Tj T* (    assert\(cast\(s32\) Day.Sat == 1\);) Tj T* (    assert\(cast\(s32\) Day.Sun == 2\);) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
124 0 obj
<<
/Length 3667
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (    assert\(cast\(s32\) Day.Mon == 3\);) Tj T*  T* (    // Base type is u8) Tj T* (    assert\(sizeof\(Day\) == 1\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 661.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Type aliasing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 631.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.024104 Tw (It's possible to create alias to any data type except function types, those can be referenced only by) Tj T* 0 Tw (pointers.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 598.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (alias name) Tj (>) Tj ( :: ) Tj (<) Tj (type) Tj (>) Tj (;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 578.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 485.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (alias :: fn \(\) #test {) Tj T* (    T :: s32;) Tj T* (    i : T;) Tj T* (    i = 10;) Tj T* (    print\("%\\n", i\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 455.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Function type) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 437.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Type of function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 404.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (fn \([arguments]\) [T|\(T1, T2\)]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 287.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F3 10 Tf 12 TL (// type of function without arguments and without return value) Tj T* (fn \(\)) Tj T*  T* (// type of function without arguments, returning value of 's32' type) Tj T* (fn \(\) s32) Tj T*  T* (// type of function with two arguments, returning value of 's32' type) Tj T* (fn \(s32, bool\) s32) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 257.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Type casting) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 227.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .272927 Tw (Change type of value to the other type. Conventions between integer types, from pointer to bool and from) Tj T* 0 Tw (array to slice are generated implicitly by the compiler.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 193.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (cast\() Tj (<) Tj (T) Tj (>) Tj (\) ) Tj (<) Tj (expr) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 173.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 80.62362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (type_cast :: fn \(\) #test {) Tj T* (    // default type of integer literal is 's32') Tj T* (    i := 666;) Tj T*  T* (    // type of the integer literal is changed to u64) Tj T* (    j : u16 = 666;) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
125 0 obj
<<
/Length 3728
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 643.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 120 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F3 10 Tf 12 TL  T* (    // implicit cast on function call) Tj T* (    fn \(num: u64\) {) Tj T* (    } \(j\);) Tj T*  T* (    // explicit cast of 'f32' type to 's32') Tj T* (    l := 1.5f;) Tj T* (    m := cast\(s32\) l;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 563.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.52832 Tw (Biscuit type casting rules are more strict compared to C or C++, there are no void pointers or implicit) Tj T* 0 Tw 1.85561 Tw (conversion between integers and enums etc. Despite this fact an explicit cast can be in some cases) Tj T* 0 Tw 1.92311 Tw (replaced by auto cast. The auto cast operator does not need explicit destination type notation, it will) Tj T* 0 Tw .74229 Tw (automatically detect destination type based on expression if possible. When auto operator cannot detect) Tj T* 0 Tw .72686 Tw (type, it will keep expression's type untouched. In such case auto does not generate any instructions into) Tj T* 0 Tw (IR.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 530.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (auto ) Tj (<) Tj (expr) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 510.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 369.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 110 Tm /F3 10 Tf 12 TL (type_auto_cast :: fn \(\) #test {) Tj T* (    s32_ptr : *s32;) Tj T* (    u32_ptr : *u32;) Tj T*  T* (    // auto cast from *u32 to *s32) Tj T* (    s32_ptr = auto u32_ptr;) Tj T*  T* (    // keep expession type s32) Tj T* (    i := auto 10;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 333.0772 cm
n 0 14.17323 m 469.8898 14.17323 l S
Q
q
1 0 0 1 62.69291 300.0772 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Literals) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 270.0772 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Simple literals) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 212.8772 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (b :: true;         // bool true literal) Tj T* (b :: false;        // bool false literal) Tj T* (ptr : *s32 = null; // *s32 null pointer literal) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 182.8772 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Integer literals) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 104.8772 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .83229 Tw (Biscuit language provides constant integer literals written in various formats showed in example section.) Tj T* 0 Tw .504692 Tw (Integer literals has volatile type, when desired type is not specified compiler will choose best type to hold) Tj T* 0 Tw .474104 Tw (the value. Numbers requiring less space than 32 bits will be implicitly set to s32, numbers requiring more) Tj T* 0 Tw .287717 Tw (space than 31 bits and less space than 64 bits will be set to s64 and numbers requiring 64 bits will be set) Tj T* 0 Tw .016235 Tw (to u64 type. Bigger numbers are not supported and compiler will complain. When we specify type explicitly) Tj T* 0 Tw (\(ex.: foo : u8 : 10;\), integer literal will inherit that type.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 86.87717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
 
endstream
endobj
126 0 obj
<<
/Length 10652
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 667.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (i     :: 10;      // s32 literal) Tj T* (i_u8  : u8 : 10;  // u8 literal) Tj T* (i_hex :: 0x10;    // s32 literal) Tj T* (i_bin :: 0b1011;  // s32 literal) Tj T* (f     :: 13.43f;  // f32 literal) Tj T* (d     :: 13.43;   // f64 literal) Tj T* (char  :: 'i';     // u8 literal) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 634.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Operators) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 604.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Binary) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 592.8236 cm
Q
q
1 0 0 1 62.69291 232.8236 cm
1 1 1 rg
n 0 360 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 342 469.8898 -18 re f*
1 1 1 rg
n 0 324 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 306 469.8898 -18 re f*
1 1 1 rg
n 0 288 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 270 469.8898 -18 re f*
1 1 1 rg
n 0 252 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 234 469.8898 -18 re f*
1 1 1 rg
n 0 216 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 198 469.8898 -18 re f*
1 1 1 rg
n 0 180 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 162 469.8898 -18 re f*
1 1 1 rg
n 0 144 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 126 469.8898 -18 re f*
1 1 1 rg
n 0 108 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 90 469.8898 -18 re f*
1 1 1 rg
n 0 72 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 54 469.8898 -18 re f*
1 1 1 rg
n 0 36 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 360 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 345 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.64496 0 Td (Symbol) Tj T* -55.64496 0 Td ET
Q
Q
q
1 0 0 1 162.6299 345 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 32.01996 0 Td (Relevant for types) Tj T* -32.01996 0 Td ET
Q
Q
q
1 0 0 1 319.2598 345 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 47.30996 0 Td (Description) Tj T* -47.30996 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Addition.) Tj T* ET
Q
Q
q
1 0 0 1 6 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Subtraction.) Tj T* ET
Q
Q
q
1 0 0 1 6 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (*) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Multiplication.) Tj T* ET
Q
Q
q
1 0 0 1 6 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (/) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Division.) Tj T* ET
Q
Q
q
1 0 0 1 6 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (%) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Remainder division.) Tj T* ET
Q
Q
q
1 0 0 1 6 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Addition and assign.) Tj T* ET
Q
Q
q
1 0 0 1 6 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Subtraction and assign.) Tj T* ET
Q
Q
q
1 0 0 1 6 201 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 1 0 0 rg (*) Tj 0 0 0 rg (=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 201 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Multiplication and assign.) Tj T* ET
Q
Q
q
1 0 0 1 6 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (/=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Division and assign.) Tj T* ET
Q
Q
q
1 0 0 1 6 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (%=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Remainder division and assign.) Tj T* ET
Q
Q
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (<) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Less.) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (>) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Greater.) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (<) Tj (=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Less or equals.) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (>) Tj (=) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Greater or equals.) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (==) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats, Booleans) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Equals.) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (&) Tj (&) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Booleans) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Logical AND) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (||) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Booleans) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Logical) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (<) Tj (<) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Bitshift left.) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (>) Tj (>) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Bitshift right.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 342 m 469.8898 342 l S
n 0 324 m 469.8898 324 l S
n 0 306 m 469.8898 306 l S
n 0 288 m 469.8898 288 l S
n 0 270 m 469.8898 270 l S
n 0 252 m 469.8898 252 l S
n 0 234 m 469.8898 234 l S
n 0 216 m 469.8898 216 l S
n 0 198 m 469.8898 198 l S
n 0 180 m 469.8898 180 l S
n 0 162 m 469.8898 162 l S
n 0 144 m 469.8898 144 l S
n 0 126 m 469.8898 126 l S
n 0 108 m 469.8898 108 l S
n 0 90 m 469.8898 90 l S
n 0 72 m 469.8898 72 l S
n 0 54 m 469.8898 54 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 156.6299 0 m 156.6299 360 l S
n 313.2598 0 m 313.2598 360 l S
n 0 360 m 469.8898 360 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 360 l S
n 469.8898 0 m 469.8898 360 l S
Q
Q
q
1 0 0 1 62.69291 232.8236 cm
Q
q
1 0 0 1 62.69291 214.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Usage:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 181.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (expr) Tj (>) Tj ( ) Tj (<) Tj (op) Tj (>) Tj ( ) Tj (<) Tj (expr) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 151.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Unary) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 139.6236 cm
Q
q
1 0 0 1 62.69291 85.62362 cm
1 1 1 rg
n 0 54 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 469.8898 -18 re f*
1 1 1 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 54 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.64496 0 Td (Symbol) Tj T* -55.64496 0 Td ET
Q
Q
q
1 0 0 1 162.6299 39 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 32.01996 0 Td (Relevant for types) Tj T* -32.01996 0 Td ET
Q
Q
q
1 0 0 1 319.2598 39 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 47.30996 0 Td (Description) Tj T* -47.30996 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Positive value.) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Integers, Floats) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Negative value.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 469.8898 0 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 156.6299 0 m 156.6299 54 l S
n 313.2598 0 m 313.2598 54 l S
n 0 54 m 469.8898 54 l S
n 0 0 m 0 54 l S
n 469.8898 0 m 469.8898 54 l S
Q
Q
 
endstream
endobj
127 0 obj
<<
/Length 6117
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
1 1 1 rg
n 0 36 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 18 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (^) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Pointers Pointer) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Pointer dereference.) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (&) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Allocated value) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Address of.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 156.6299 0 m 156.6299 36 l S
n 313.2598 0 m 313.2598 36 l S
n 0 0 m 0 36 l S
n 469.8898 0 m 469.8898 36 l S
n 0 0 m 469.8898 0 l S
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 711.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Usage:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 677.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (op) Tj (>) Tj ( ) Tj (<) Tj (expr) Tj (>) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 647.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Special) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
Q
q
1 0 0 1 62.69291 545.8236 cm
1 1 1 rg
n 0 90 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 72 469.8898 -18 re f*
1 1 1 rg
n 0 54 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 469.8898 -18 re f*
1 1 1 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 90 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 55.64496 0 Td (Symbol) Tj T* -55.64496 0 Td ET
Q
Q
q
1 0 0 1 162.6299 75 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 32.01996 0 Td (Relevant for types) Tj T* -32.01996 0 Td ET
Q
Q
q
1 0 0 1 319.2598 75 cm
q
.960784 .960784 .862745 rg
n 0 0 144.6299 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 47.30996 0 Td (Description) Tj T* -47.30996 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (sizeof) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Any) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Determinates size in bytes.) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (alignof) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Any) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Determinates alignment of type.) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (typeinfo) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Any) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Determinates TypeInfo of type.) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (typekind) Tj T* ET
Q
Q
q
1 0 0 1 162.6299 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Any) Tj T* ET
Q
Q
q
1 0 0 1 319.2598 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Determinates TypeKind of type.) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 469.8898 72 l S
n 0 54 m 469.8898 54 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 156.6299 0 m 156.6299 90 l S
n 313.2598 0 m 313.2598 90 l S
n 0 90 m 469.8898 90 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 90 l S
n 469.8898 0 m 469.8898 90 l S
Q
Q
q
1 0 0 1 62.69291 545.8236 cm
Q
q
1 0 0 1 62.69291 515.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Type Info) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 461.8236 cm
q
BT 1 0 0 1 0 38 Tm .603735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Biscuit language provides type reflection allowing access to the type structure of the code. Pointer to the) Tj T* 0 Tw 2.602706 Tw (type information structure can be yielded by typeinfo\() Tj 1 0 0 rg (:raw-html-m2r:`) Tj (<) Tj (T) Tj (>) Tj (`) Tj 0 0 0 rg (\) builtin operator call. Type) Tj T* 0 Tw .91936 Tw (information can be yielded in compile time and also in runtime, with low additional overhead for runtime) Tj T* 0 Tw (\(only pointer to the TypeInfo constant is pushed on the stack\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 443.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 218.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 216 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 194 Tm /F3 10 Tf 12 TL (RTTI :: fn \(\) #test {) Tj T* (    // yields pointer to TypeInfo constant structure) Tj T* (    info := typeinfo\(s32\);) Tj T*  T* (    if info.kind == TypeKind.Int {) Tj T* (        // safe cast to *TypeInfoInt) Tj T* (        info_int := cast\(*TypeInfoInt\) info;) Tj T*  T* (        print\("bit_count = %\\n", info_int.bit_count\);) Tj T*  T* (        if info_int.is_signed {) Tj T* (            print\("signed\\n"\);) Tj T* (        } else {) Tj T* (            print\("unsigned\\n"\);) Tj T* (        }) Tj T* (    }) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 186.6236 cm
q
BT 1 0 0 1 0 14 Tm .603059 Tw 12 TL /F1 10 Tf 0 0 0 rg (By calling the ) Tj /F3 10 Tf (typeinfo) Tj /F1 10 Tf ( operator compiler will automatically include desired type information into output) Tj T* 0 Tw (binary.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 153.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Hash directive) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 123.6236 cm
q
BT 1 0 0 1 0 14 Tm 2.083059 Tw 12 TL /F1 10 Tf 0 0 0 rg (Hash directives specify special compile-time information used by compiler. They are introduced by ) Tj /F3 10 Tf (#) Tj /F1 10 Tf  T* 0 Tw (character followed by directive name and optionally some other information.) Tj T* ET
Q
Q
 
endstream
endobj
128 0 obj
<<
/Length 4833
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#load) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .785542 Tw (Load source file into the current assembly. Every file is included into the assembly only once even if we) Tj T* 0 Tw (load it from multiple locations.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Lookup order:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
Q
q
1 0 0 1 62.69291 693.0236 cm
Q
q
1 0 0 1 62.69291 681.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Current file parent directory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
Q
q
1 0 0 1 62.69291 663.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (BL API directory set in install location/etc/bl.conf.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 657.0236 cm
Q
q
1 0 0 1 62.69291 645.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (System PATH environment variable.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
Q
q
1 0 0 1 62.69291 611.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (#load ") Tj (<) Tj (bl file) Tj (>) Tj (") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 581.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#import) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 563.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Import module into current assembly.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 530.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (#import ") Tj (<) Tj (bl module) Tj (>) Tj (") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 500.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#private) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 470.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.187209 Tw (Creates private \(file scope\) block in the file. Everything after this is going to be private and visible only) Tj T* 0 Tw (inside the current file.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 452.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 263.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F3 10 Tf 12 TL (// main is public) Tj T* (main :: fn \(\) s32 {) Tj T* (    foo\(\); // can be called only inside this file.) Tj T* (    return 0;) Tj T* (};) Tj T*  T* (#private) Tj T*  T* (// private function can be called only inside this file) Tj T* (foo :: fn \(\) {) Tj T* (};) Tj T*  T* (// private constant) Tj T* (bar :: 10;) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 233.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#scope) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 179.4236 cm
q
BT 1 0 0 1 0 38 Tm .24686 Tw 12 TL /F1 10 Tf 0 0 0 rg (Creates new named scope i.e. ) Tj /F3 10 Tf (#scope) Tj ( ) Tj (String) Tj /F1 10 Tf (. Every symbol written after the ) Tj /F4 10 Tf (scope) Tj /F1 10 Tf ( tag lives in named) Tj T* 0 Tw .064597 Tw (scope \(aka namespace\). This prevents possible symbol collisions and makes local names shorter. Named) Tj T* 0 Tw .097356 Tw (scope cannot be nested in another one and can be specified only once per file unit. Scopes with the same) Tj T* 0 Tw (name defined in multiple units are merged into one.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 149.4236 cm
q
BT 1 0 0 1 0 14 Tm .596303 Tw 12 TL /F1 10 Tf 0 0 0 rg (To refer to public symbols from the outside of the named scope use the scope name followed by the dot) Tj T* 0 Tw (operator. \(i.e. ) Tj /F3 10 Tf (String.compare) Tj /F1 10 Tf (\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 119.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#extern) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.42362 cm
q
BT 1 0 0 1 0 26 Tm 1.167984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Used for marking entities as an external \(imported from dynamic library\). Custom linkage name can be) Tj T* 0 Tw 2.688555 Tw (specified since version 0.5.2 as a string ) Tj /F3 10 Tf (#extern) Tj ( ) Tj ("malloc") Tj /F1 10 Tf (, when linkage name is not explicitly) Tj T* 0 Tw (specified compiler will use name of the entity as linkage name.) Tj T* ET
Q
Q
 
endstream
endobj
129 0 obj
<<
/Length 3992
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 683.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (// libc functions) Tj T* (malloc :: fn \(size: usize\) *u8 #extern;) Tj T* (// since 0.5.2) Tj T* (my_free :: fn \(ptr: *u8\) #extern "free";) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 653.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#export) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 635.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mark symbol to be exported when compile into library. This can be used only for functions for now.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 617.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 548.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (// libc functions) Tj T* (my_func :: fn \(\) #export {) Tj T* (    print\("Hello!\\n"\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 518.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#compiler) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 500.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Used for marking entities as an compiler internals.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 488.6236 cm
Q
q
1 0 0 1 62.69291 417.6236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Warning) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This directive is compiler internal.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 411.6236 cm
Q
q
1 0 0 1 62.69291 381.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#test) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 339.6236 cm
q
BT 1 0 0 1 0 26 Tm 1.33186 Tw 12 TL /F1 10 Tf 0 0 0 rg (Introduce test case function. The test case function is supposed not to take any arguments and return) Tj T* 0 Tw .36436 Tw (always ) Tj /F4 10 Tf (void) Tj /F1 10 Tf (. All function with ) Tj /F4 10 Tf (test) Tj /F1 10 Tf ( hash directive are automatically stored into builtin implicit array and can) Tj T* 0 Tw (be acquired by ) Tj /F4 10 Tf (testcases\(\)) Tj /F1 10 Tf ( function call. Every test case is stored as ) Tj 1 0 0 rg (:ref:`TestCase`) Tj 0 0 0 rg ( type.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 321.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 264.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (this_is_my_test :: fn \(\) #test {) Tj T* (   ...) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 234.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#line) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 216.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Fetch current line in source code as s32.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 186.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#file) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 168.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Fetch current source file name string.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 138.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#noinit) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 108.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.010697 Tw (Disable variable default initialization. This directive cannot be used with global variables \(those must be) Tj T* 0 Tw (initialized every time\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 90.42362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
 
endstream
endobj
130 0 obj
<<
/Length 3815
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (test_no_init :: fn \(\) #test {) Tj T* (    my_large_array: [1024]u8 #noinit;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 685.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#call_location) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 643.8236 cm
q
BT 1 0 0 1 0 26 Tm 2.903615 Tw 12 TL /F1 10 Tf 0 0 0 rg (This directive yields pointer to static ) Tj 1 0 0 rg (:ref:`CodeLocation`) Tj 0 0 0 rg ( structure generated by compiler containing) Tj T* 0 Tw .355984 Tw (call-side location in code. The ) Tj /F3 10 Tf (call_location) Tj /F1 10 Tf ( can be used only as function argument default value. It's) Tj T* 0 Tw (useful in cases we want to know from where function was called.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 625.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 520.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (test_call_location :: fn \(\) #test {) Tj T* (    print_location\(\);) Tj T* (}) Tj T*  T* (print_location :: fn \(loc := #call_location\) {) Tj T* (    print\("%\\n", loc\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 490.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#inline and #no_inline) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 460.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.828314 Tw (Function related directives giving the compiler information about possibility of inlining marked function) Tj T* 0 Tw (during optimization pass.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 442.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 385.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (my_inline_function :: fn \(\) #inline {) Tj T* (   ...) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 355.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#base) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 337.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specify base type of structure.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 319.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 262.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (Type :: struct #base s32 {) Tj T* (   ...) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 232.2236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#entry) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 214.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specify executable entry function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 202.2236 cm
Q
q
1 0 0 1 62.69291 131.2236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Warning) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This directive is compiler internal.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 125.2236 cm
Q
q
1 0 0 1 62.69291 95.22362 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#build_entry) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.22362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specify build system entry function.) Tj T* ET
Q
Q
 
endstream
endobj
131 0 obj
<<
/Length 3637
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#tags) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Specify struct member tags. This value can be evaluated by type info.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 629.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F3 10 Tf 12 TL (NO_SERIALIZE :: 1;) Tj T*  T* (Type :: struct {) Tj T* (    i: s32 #tags NO_SERIALIZE;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 599.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (#intrinsic) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 581.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Mark external function as compiler specific intrinsic function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 569.8236 cm
Q
q
1 0 0 1 62.69291 498.8236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Warning) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This directive is compiler internal.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 492.8236 cm
Q
q
1 0 0 1 62.69291 459.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Variable) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 393.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.68936 Tw (Variable associate name with value of some type. Variables in BL can be declared as mutable or) Tj T* 0 Tw -0.08939 Tw (immutable, value of immutable variable cannot be changed and can be set only by variable initializer. Type) Tj T* 0 Tw 1.092927 Tw (of variable is optional when value is specified. Variables can be declared in local or global scope, local) Tj T* 0 Tw 2.114597 Tw (variable lives only in particular function during function execution, global variables lives during whole) Tj T* 0 Tw (execution.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 351.8236 cm
q
BT 1 0 0 1 0 26 Tm 2.339982 Tw 12 TL /F1 10 Tf 0 0 0 rg (Variables without explicit initialization value are ) Tj /F3 10 Tf (zero) Tj ( ) Tj (initialized) Tj /F1 10 Tf ( \(set to default value\). We can) Tj T* 0 Tw .157126 Tw (suppress this behaviour by ) Tj /F3 10 Tf (#noinit) Tj /F1 10 Tf ( directive. Global variables must be initialized every time \(explicitly or) Tj T* 0 Tw (zero initialized\) so ) Tj /F3 10 Tf (#noinit) Tj /F1 10 Tf ( cannot be used.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 333.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 120.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F3 10 Tf 12 TL (mutable_variables :: fn \(\) #test {) Tj T* (    i : s32 = 666;) Tj T* (    j := 666; // type is optional here) Tj T* (    i = 0; // value can be changed) Tj T* (};) Tj T*  T* (immutable_variables :: fn \(\) #test {) Tj T* (    i : s32 : 666;) Tj T* (    j :: 666; // type is optional here) Tj T* (    // value cannot be changed) Tj T* (};) Tj T*  T* (variable_initialization :: fn \(\) #test {) Tj T* (    i: s32; // implicitly initialized to 0) Tj T* (    arr: [1024]u8 #noinit; // not initialized) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 100.6236 cm
Q
 
endstream
endobj
132 0 obj
<<
/Length 2982
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 682.0236 cm
.960784 .960784 .862745 rg
n 0 83 469.8898 -83 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 57 Tm  T* ET
q
1 0 0 1 16 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Hint) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .691647 Tw (Prefer immutable variables as possible, immutable value can be effectively optimized by compiler) Tj T* 0 Tw (and could be evaluated in compile time in some cases.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 83 m 469.8898 83 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 83 l S
n 469.8898 0 m 469.8898 83 l S
Q
Q
q
1 0 0 1 62.69291 676.0236 cm
Q
q
1 0 0 1 62.69291 647.6772 cm
n 0 14.17323 m 469.8898 14.17323 l S
Q
q
1 0 0 1 62.69291 614.6772 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Compound expression) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 584.6772 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.917126 Tw (Compound expression can be used for inline initialization of variables or directly as value. Implicit) Tj T* 0 Tw (temporary variable is created as needed. Zero initializer can be used as short for memset\(0\) call.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 566.6772 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 161.4772 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 396 re B*
Q
q
BT 1 0 0 1 0 374 Tm 12 TL /F3 10 Tf 0 0 0 rg (array_compound :: fn \(\) #test {) Tj T* (    // print out all array values) Tj T* (    print_arr :: fn \(v: [2]s32\) {) Tj T* (        loop i := 0; i ) Tj (<) Tj ( v.len; i += 1 {) Tj T* (            print\("v[%] = %\\n", i, v[i]\);) Tj T* (        }) Tj T* (    };) Tj T*  T* (    // create array of 2 elements directly in call) Tj T* (    print_arr\({:[2]s32: 10, 20}\);) Tj T*  T* (    // create zero initialized array) Tj T* (    print_arr\({:[2]s32: 0}\);) Tj T* (};) Tj T*  T* (struct_compound :: fn \(\) #test {) Tj T* (    Foo :: struct {) Tj T* (        i: s32;) Tj T* (        j: s32) Tj T* (    };) Tj T*  T* (    print_strct :: fn \(v: Foo\) {) Tj T* (        print\("v.i = %\\n", v.i\);) Tj T* (        print\("v.j = %\\n", v.j\);) Tj T* (    };) Tj T*  T* (    // create structure in call) Tj T* (    print_strct\({:Foo: 10, 20}\);) Tj T*  T* (    // create zero initialized structure) Tj T* (    print_strct\({:Foo: 0}\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 128.4772 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Function) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 86.47717 cm
q
BT 1 0 0 1 0 26 Tm .163984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Function is chunk of code representing specific piece of program functionality. Function can be called with) Tj T* 0 Tw 1.431751 Tw (call operator ) Tj /F3 10 Tf (\(\)) Tj /F1 10 Tf (, we can provide any number of arguments into function and get return value back on) Tj T* 0 Tw (call-side.) Tj T* ET
Q
Q
 
endstream
endobj
133 0 obj
<<
/Length 3054
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Functions can be declared in global or local scope \(one function can be nested in other\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 723.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Named function) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.302339 Tw (Function associated with name can be later called by this name. In this case we treat function like) Tj T* 0 Tw (immutable variable.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 425.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F3 10 Tf 12 TL (// named function) Tj T* (my_function :: fn \(\) {) Tj T* (    print\("Hello!!!\\n"\);) Tj T* (};) Tj T*  T* (my_function_with_return_value :: fn \(\) s32 {) Tj T* (    return 10;) Tj T* (};) Tj T*  T* (my_function_with_arguments :: fn \(i: s32, j: s32\) s32 {) Tj T* (    return i + j;) Tj T* (};) Tj T*  T* (test_fn :: fn \(\) #test {) Tj T* (    // call function by name) Tj T* (    my_function\(\);) Tj T* (    result1 :: my_function_with_return_value\(\);) Tj T* (    result2 :: my_function_with_arguments\(10, 20\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 395.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Anonymous function) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 377.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Functions can be used without explicit name defined and can be directly called.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 359.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 266.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (test_anonymous_function :: fn \(\) #test {) Tj T* (    i := fn \(i: s32\) s32 {) Tj T* (        return i;) Tj T* (    } \(666\);) Tj T* (    print\("%\\n", i\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 236.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Function pointer) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 218.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Functions can be called via pointer. Call on null pointer will produce error in interpreter.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 200.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
BT 1 0 0 1 0 86 Tm 12 TL /F3 10 Tf 0 0 0 rg (test_fn_pointers :: fn \(\) #test {) Tj T* (    foo :: fn \(\) {) Tj T* (        print\("Hello from foo!!!\\n"\);) Tj T* (    };) Tj T*  T* (    bar :: fn \(\) {) Tj T* (        print\("Hello from bar!!!\\n"\);) Tj T* (    };) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
134 0 obj
<<
/Length 2919
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 631.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 132 re B*
Q
q
BT 1 0 0 1 0 110 Tm 12 TL /F3 10 Tf 0 0 0 rg  T* (    // Grab the pointer of 'foo') Tj T* (    fn_ptr := ) Tj (&) Tj (foo;) Tj T*  T* (    // Call via pointer reference.) Tj T* (    fn_ptr\(\);) Tj T*  T* (    fn_ptr = ) Tj (&) Tj (bar;) Tj T* (    fn_ptr\(\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 601.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Function with variable argument count) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 559.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.71686 Tw (Biscuit supports functions with variable argument count of the same type. VArgs type must be last in) Tj T* 0 Tw -0.099303 Tw (function argument list. Compiler internally creates temporary array of all arguments passed in vargs. Inside) Tj T* 0 Tw (function body variable argument list acts like regular array slice.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 541.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 280.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 252 re B*
Q
q
BT 1 0 0 1 0 230 Tm 12 TL /F3 10 Tf 0 0 0 rg (sum :: fn \(nums: ...s32\) s32 {) Tj T* (    // nums is slice of s32) Tj T* (    result := 0;) Tj T* (    loop i := 0; i ) Tj (<) Tj ( nums.len; i += 1 {) Tj T* (        result += nums[i];) Tj T* (    }) Tj T*  T* (    return result;) Tj T* (};) Tj T*  T* (test_vargs :: fn \(\) #test {) Tj T* (    s := sum\(10, 20, 30\);) Tj T* (    assert\(s == 60\);) Tj T*  T* (    s = sum\(10, 20\);) Tj T* (    assert\(s == 30\);) Tj T*  T* (    s = sum\(\);) Tj T* (    assert\(s == 0\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 250.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Local function) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 208.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.061349 Tw (Function can be declared even in local scope of another function. Local-scoped functions does not capture) Tj T* 0 Tw 1.201984 Tw (variables from parent scope \(scope of the upper_func in example\), this leads to some restrictions. You) Tj T* 0 Tw (cannot access i variable declared in upper_func from the inner_func.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 190.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 85.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (upper_func :: fn \(\) {) Tj T* (    i := 10; // local for upper_func) Tj T*  T* (    inner_func :: fn \(\) {) Tj T* (        i := 20; // local for inner_func \(no capture\)) Tj T* (    };) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
135 0 obj
<<
/Length 3364
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Default argument value) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.582339 Tw (Function arguments can use default value if value is not provided on call side. Default value must be) Tj T* 0 Tw (known in compile time.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 593.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (foo :: fn \(i: s32, j := 10\) {}) Tj T*  T* (test_foo :: fn \(\) #test {) Tj T* (    // here we call foo only with one argument so j will) Tj T* (    // use default value 10) Tj T* (    foo\(10\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 563.8236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Explicit function overloading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 533.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .01436 Tw (More functions can be associated with one name with explicit function overloading groups. Call to group of) Tj T* 0 Tw (functions is replaced with proper function call during compilation, based on provided arguments.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 515.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 302.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 204 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 182 Tm /F3 10 Tf 12 TL (group :: fn { s32_add; f32_add; }) Tj T*  T* (s32_add :: fn \(a: s32, b: s32\) s32 {) Tj T* (    return a + b;) Tj T* (}) Tj T*  T* (f32_add :: fn \(a: f32, b: f32\) f32 {) Tj T* (    return a + b;) Tj T* (}) Tj T*  T* (test_group :: fn \(\) #test {) Tj T* (    i :: group\(10, 20\);) Tj T* (    j :: group\(0.2f, 13.534f\);) Tj T* (    print\("i = %\\n", i\);) Tj T* (    print\("j = %\\n", j\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 272.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Multiple return values) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 230.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.016678 Tw (Function in BL can return more than one value, this can be useful i.e. in cases we want to return value and) Tj T* 0 Tw .01332 Tw (error code. There is no explicit limitation of returned value count. Return value can be also named to make) Tj T* 0 Tw (the function interface more readable.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 200.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.830814 Tw (Returned values are implicitly converted to anonymous structure instances with possibility to implicitly) Tj T* 0 Tw (unroll results on caller side.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 182.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example of multiple return:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 77.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (foo :: fn \(\) \(s32, bool\) {) Tj T* (    return 666, true;) Tj T* (}) Tj T*  T* (main :: fn \(\) s32 {) Tj T* (    int1, boolean1 := foo\(\);) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
136 0 obj
<<
/Length 2872
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 715.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (    // no all values must be captured) Tj T* (    int2 := foo\(\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example of multiple return with named values:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 590.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F3 10 Tf 12 TL (foo :: fn \(\) \(number: s32, boolean: bool\) {) Tj T* (    return 666, true;) Tj T* (}) Tj T*  T* (main :: fn \(\) s32 {) Tj T* (    int1, boolean1 := foo\(\);) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 557.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Block) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 539.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Block can limit scope of the variable.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 521.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 332.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F3 10 Tf 12 TL (#import "std/test") Tj T*  T* (blocks :: fn \(\) #test {) Tj T* (    a := 10;) Tj T*  T* (    {) Tj T* (    // this variable lives only in this scope) Tj T* (       i := a;) Tj T* (       assert\(i == 10\);) Tj T* (    }) Tj T*  T* (    i := 20;) Tj T* (    assert\(i == 20\);) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 299.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (if - else) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 257.4236 cm
q
BT 1 0 0 1 0 26 Tm .423318 Tw 12 TL /F1 10 Tf 0 0 0 rg (If represents condition statement which can change program flow. If executes following code block only if) Tj T* 0 Tw .979985 Tw (passed condition is ) Tj /F3 10 Tf (true) Tj /F1 10 Tf (, otherwise skip the block and continue on next statement after block. We can) Tj T* 0 Tw (specify ) Tj /F3 10 Tf (else) Tj /F1 10 Tf ( block which is executed only if condition is ) Tj /F3 10 Tf (false) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 239.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 122.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F3 10 Tf 12 TL (test_ifs :: fn \(\) #test {) Tj T* (    b := true;) Tj T* (    if b {) Tj T* (        print\("b is true!\\n"\);) Tj T* (    } else {) Tj T* (        print\("b is false!\\n"\);) Tj T* (    }) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
137 0 obj
<<
/Length 2726
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Loop) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 726.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 488.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 228 re B*
Q
q
BT 1 0 0 1 0 206 Tm 12 TL /F3 10 Tf 0 0 0 rg (simple_loops :: fn \(\) #test {) Tj T* (    count :: 10;) Tj T* (    i := 0;) Tj T*  T* (    loop {) Tj T* (        i += 1;) Tj T* (        if i == count { break; }) Tj T* (    }) Tj T*  T* (    i = 0;) Tj T* (    loop i ) Tj (<) Tj ( count {) Tj T* (        i += 1;) Tj T* (    }) Tj T*  T* (    loop j := 0; j ) Tj (<) Tj ( count; j += 1 {) Tj T* (        // do something amazing here) Tj T* (    }) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 455.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Break and continue) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 437.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Break/continue statements can be used in loops to control execution flow.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 419.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 266.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F3 10 Tf 12 TL (break_and_continue :: fn \(\) #test {) Tj T* (    i := 0;) Tj T* (    loop {) Tj T* (        i += 1;) Tj T* (        if i == 10 {) Tj T* (            break;) Tj T* (        } else {) Tj T* (            continue;) Tj T* (        }) Tj T* (    }) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 233.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Switch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 203.6236 cm
q
BT 1 0 0 1 0 14 Tm 1.487126 Tw 12 TL /F1 10 Tf 0 0 0 rg (Switch can compare one numeric value against multiple values and switch execution flow to matching) Tj T* 0 Tw (case. The ) Tj /F4 10 Tf (default) Tj /F1 10 Tf ( case can be used for all other values we don't explicitly specify case for.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 185.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 92.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (test_switch :: fn \(\) #test {) Tj T* (    i := 1;) Tj T* (    switch i {) Tj T* (        0 { print\("Zero!\\n"\); }) Tj T* (        1 { print\("One!\\n"\); }) Tj T* (        default { print\("Other!\\n"\); }) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
138 0 obj
<<
/Length 3183
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.551163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Switch can be also used with enumerators, in such case we have to specify cases for all enumerator) Tj T* 0 Tw (variations or specify ) Tj /F4 10 Tf (default) Tj /F1 10 Tf ( one.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 677.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 476.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 192 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F3 10 Tf 12 TL (Color :: enum {) Tj T* (    Red;) Tj T* (    Green;) Tj T* (    Blue;) Tj T* (}) Tj T*  T* (test_switch :: fn \(\) #test {) Tj T* (    c := Color.Blue;) Tj T* (    switch c {) Tj T* (        Color.Red   { print\("Red!\\n"\);   }) Tj T* (        Color.Green { print\("Green!\\n"\); }) Tj T* (        Color.Blue  { print\("Blue!\\n"\);  }) Tj T* (        // default is not needed here, we covered all variants.) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 456.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (It's also possible to define one execution block for multiple cases.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 438.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 249.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 180 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F3 10 Tf 12 TL (Color :: enum {) Tj T* (    Red;) Tj T* (    Green;) Tj T* (    Blue;) Tj T* (}) Tj T*  T* (test_switch :: fn \(\) #test {) Tj T* (    c := Color.Blue;) Tj T* (    switch c {) Tj T* (        Color.Red,) Tj T* (        Color.Green { print\("Red or green!\\n"\); }) Tj T* (        Color.Blue  { print\("Blue!\\n"\);  }) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 216.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Defer statement) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 162.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .349318 Tw (The defer statement can be used for defering execution of some expression. All deferred expressions will) Tj T* 0 Tw 1.27832 Tw (be executed at the end of the current scope in reverse order. This is usually useful for calling cleanup) Tj T* 0 Tw 1.191163 Tw (functions. When scope is terminated by return all previous defers up the scope tree will be called after) Tj T* 0 Tw (evaluation of return value.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 144.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 87.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (test_defer_example :: fn \(\) #test {) Tj T* (    defer print\("1\\n"\);) Tj T*  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
139 0 obj
<<
/Length 3426
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 475.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 288 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 266 Tm /F3 10 Tf 12 TL (    {) Tj T* (        defer print\("2 "\);) Tj T* (        defer print\("3 "\);) Tj T* (        defer print\("4 "\);) Tj T* (    } // defer 4, 3, 2) Tj T*  T* (    defer_with_return\(\);) Tj T*  T* (    defer print\("5 "\);) Tj T* (} // defer 5, 1) Tj T*  T* (defer_with_return :: fn \(\) s32 {) Tj T* (    defer print\("6 "\);) Tj T* (    defer print\("7 "\);) Tj T*  T* (    if true {) Tj T* (        defer print\("8 "\);) Tj T* (        return 1;) Tj T* (    } // defer 8, 7, 6) Tj T*  T* (    defer print\("9 "\); // never reached) Tj T* (    return 0;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 455.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 422.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
.960784 .960784 .862745 rg
n 12 0 6 12 re f*
.960784 .960784 .862745 rg
n 24 0 6 12 re f*
.960784 .960784 .862745 rg
n 36 0 6 12 re f*
.960784 .960784 .862745 rg
n 48 0 6 12 re f*
.960784 .960784 .862745 rg
n 60 0 6 12 re f*
.960784 .960784 .862745 rg
n 72 0 6 12 re f*
.960784 .960784 .862745 rg
n 84 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf .4 .4 .4 rg (4) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (3) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (2) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (8) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (7) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (5) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 389.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Main function) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 347.6236 cm
q
BT 1 0 0 1 0 26 Tm 1.371318 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F4 10 Tf (main) Tj /F1 10 Tf ( function is mandatory entry function which should be defined in every program. It's basically) Tj T* 0 Tw .743735 Tw (entry point of your application. Main function must return ) Tj /F4 10 Tf (s32) Tj /F1 10 Tf ( execution state, zero in this case indicates) Tj T* 0 Tw (successful execution.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 329.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 260.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (main :: fn \(\) s32 {) Tj T* (    // some useful stuff goes here.) Tj T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 240.4236 cm
Q
q
1 0 0 1 62.69291 157.4236 cm
.960784 .960784 .862745 rg
n 0 83 469.8898 -83 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 57 Tm  T* ET
q
1 0 0 1 16 52 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Hint) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 14 Tm 9.94816 Tw 12 TL /F1 10 Tf 0 0 0 rg (Command line arguments are not passed directly as parameter in BL. Use) Tj T* 0 Tw 1 0 0 rg (:ref:`command_line_arguments`) Tj 0 0 0 rg ( builtin array.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 83 m 469.8898 83 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 83 l S
n 469.8898 0 m 469.8898 83 l S
Q
Q
q
1 0 0 1 62.69291 151.4236 cm
Q
 
endstream
endobj
140 0 obj
<<
/Length 6580
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Modules and import) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 678.0236 cm
q
BT 1 0 0 1 0 50 Tm .962927 Tw 12 TL /F1 10 Tf 0 0 0 rg (The module system can be used to split source into chunks \(modules\) which can be later imported into) Tj T* 0 Tw .746136 Tw (assembly by ) Tj /F4 10 Tf (#import) Tj /F1 10 Tf ( directive. Modules can distinguish between platforms and load different sources on) Tj T* 0 Tw 2.499984 Tw (them during the compilation process. Entry files for every platform must be explicitly defined in the) Tj T* 0 Tw .01332 Tw /F4 10 Tf (module.conf) Tj /F1 10 Tf ( file located in the module root directory. Name of the root directory is used as a module name) Tj T* 0 Tw (during import.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (See ) Tj 1 0 0 rg (:ref:`ModuleImportPolicy`) Tj 0 0 0 rg ( for more information about module import policy.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
Q
q
1 0 0 1 62.69291 577.0236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Module root directory usually contains all source files, libraries and unit tests realted to the module.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 571.0236 cm
Q
q
1 0 0 1 62.69291 559.0236 cm
Q
q
1 0 0 1 62.69291 488.0236 cm
.960784 .960784 .862745 rg
n 0 71 469.8898 -71 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 45 Tm  T* ET
q
1 0 0 1 16 40 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F5 12.5 Tf 15 TL (Warning) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The configuration file must be located in the module root folder and named ) Tj /F4 10 Tf (module.conf) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 71 m 469.8898 71 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 71 l S
n 469.8898 0 m 469.8898 71 l S
Q
Q
q
1 0 0 1 62.69291 482.0236 cm
Q
q
1 0 0 1 62.69291 464.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example of the module structure:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 370.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (thread/) Tj T* (  module.conf       - module config) Tj T* (  _thread.win32.bl  - windows implementation) Tj T* (  _thread.posix.bl  - posix implementation) Tj T* (  thread.bl         - interface) Tj T* (  thread.test.bl    - unit tests) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 350.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example of the module config:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 293.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (WIN32_ENTRY "_thread.win32.bl") Tj T* (LINUX_ENTRY "_thread.posix.bl") Tj T* (MACOS_ENTRY "_thread.posix.bl") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 273.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (To import out ) Tj /F4 10 Tf (thread) Tj /F1 10 Tf ( module use:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 240.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (#import "path/to/module/thread") Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 210.4236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (List of module config entries) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 198.4236 cm
Q
q
1 0 0 1 62.69291 198.4236 cm
Q
q
1 0 0 1 62.69291 174.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .498555 Tw 12 TL /F3 10 Tf 0 0 0 rg (VERSION) Tj ( ) Tj (") Tj (<) Tj (N) Tj (>) Tj /F1 10 Tf ( - Module version number used during import to distinguis various versions of same) Tj T* 0 Tw (module, see also ) Tj 1 0 0 rg (:ref:`ModuleImportPolicy`) Tj 0 0 0 rg ( for more information.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 174.4236 cm
Q
q
1 0 0 1 62.69291 156.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Following entries are platform specific, replace ) Tj /F3 10 Tf (<) Tj (platform) Tj (>) Tj /F1 10 Tf ( with ) Tj /F3 10 Tf (WIN32) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (LINUX) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (MACOS) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 150.4236 cm
Q
q
1 0 0 1 62.69291 150.4236 cm
Q
q
1 0 0 1 62.69291 138.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (platform) Tj (>) Tj (_ENTRY) Tj ( ) Tj (") Tj (<) Tj (file) Tj ( ) Tj (path) Tj (>) Tj (") Tj /F1 10 Tf ( - Interface file path. \(mandatory, relative to module root\)) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 132.4236 cm
Q
q
1 0 0 1 62.69291 120.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (platform) Tj (>) Tj (_LIB_PATH) Tj ( ) Tj (") Tj (<) Tj (lib) Tj ( ) Tj (path) Tj (>) Tj (") Tj /F1 10 Tf ( - Library search path.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 114.4236 cm
Q
q
1 0 0 1 62.69291 102.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (platform) Tj (>) Tj (_LINK) Tj ( ) Tj (") Tj (<) Tj (lib) Tj ( ) Tj (name) Tj (>) Tj (") Tj /F1 10 Tf ( - Library name to link.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 96.42362 cm
Q
q
1 0 0 1 62.69291 84.42362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (<) Tj (platform) Tj (>) Tj (_LINKER_OPT) Tj ( ) Tj (") Tj (<) Tj (opt) Tj (>) Tj (") Tj /F1 10 Tf ( - Additional linker options.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 84.42362 cm
Q
 
endstream
endobj
141 0 obj
<<
/Length 2654
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Unit testing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 726.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Biscuit compiler provides unit testing by default.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create unit test case:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 458.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 218 Tm /F3 10 Tf 12 TL (#import "std/test") Tj T*  T* (// function to be tested) Tj T* (add :: fn \(a: s32, b: s32\) s32 {) Tj T* (    return a + b;) Tj T* (};) Tj T*  T* (this_is_OK :: fn \(\) #test {) Tj T* (    assert\(add\(10, 20\) == 30\);) Tj T* (};) Tj T*  T* (this_is_not_OK :: fn \(\) #test {) Tj T* (    assert\(add\(10, 20\) != 30\);) Tj T* (};) Tj T*  T* (main :: fn \(\) s32 {) Tj T* (    test_run\(\);) Tj T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 438.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Run tests:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 86.69511 cm
q
q
.952737 0 0 .952737 0 0 cm
q
1 0 0 1 6.6 6.927412 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 360 re B*
Q
q
BT 1 0 0 1 0 338 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ blc -rt test.bl) Tj T* (Compiler version: 0.7.0, LLVM: 10) Tj T* (Compile assembly: out [DEBUG]) Tj T* (Target: x86_64-pc-windows-msvc) Tj T*  T* (Testing start in compile time) Tj T* (--------------------------------------------------------------------------------) Tj T* ([ PASS |      ] this_is_OK \(0.021000 ms\)) Tj T* (assert [test.bl:21]: Assertion failed!) Tj T* (execution reached unreachable code) Tj T* (C:/Develop/bl/lib/bl/api/std/debug.bl:113:5) Tj T* (  112 |     if IS_DEBUG { _os_debug_break\(\); }) Tj T* (>) Tj ( 113 |     unreachable;) Tj T* (      |     ^^^^^^^^^^^) Tj T* (  114 | };) Tj T* (called from:) Tj T* (C:/Develop/bl/tests/test.bl:21:11) Tj T* (  20 | this_is_not_OK :: fn \(\) #test {) Tj T* (>) Tj ( 21 |     assert\(add\(10, 20\) != 30\);) Tj T* (     |           ^) Tj T* (  22 | };) Tj T* ([      | FAIL ] this_is_not_OK \(1.630000 ms\)) Tj T*  T* (Results:) Tj T* (--------------------------------------------------------------------------------) Tj T* ([      | FAIL ] this_is_not_OK \(1.630000 ms\)) Tj T* (--------------------------------------------------------------------------------) Tj T* (Executed: 2, passed 50%.) Tj T* (--------------------------------------------------------------------------------) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
142 0 obj
<<
/Length 6762
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Build System) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
q
BT 1 0 0 1 0 38 Tm .647318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Biscuit has an integrated build system replacing CMake or similar tools. Main advantage is integration of) Tj T* 0 Tw 1.349984 Tw (the build system directly into the compiler. All you need is ) Tj /F4 10 Tf (build.bl) Tj /F1 10 Tf ( file containing ) Tj /F4 10 Tf (#build_entry) Tj /F1 10 Tf ( function.) Tj T* 0 Tw .374692 Tw (Setup file is nothing more than a simple BL program executed in compile time with some special features) Tj T* 0 Tw (enabled. See ) Tj 1 0 0 rg (:ref:`Build_System`) Tj 0 0 0 rg ( for more information.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 657.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Script mode) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 591.0236 cm
q
BT 1 0 0 1 0 50 Tm .964104 Tw 12 TL /F1 10 Tf 0 0 0 rg (Programs written in Biscuit can easily act like shell scripts on UNIX systems due to support of ) Tj /F4 10 Tf (shebang) Tj /F1 10 Tf  T* 0 Tw .352765 Tw (character sequence specified at the first line of the entry file. The ) Tj /F4 10 Tf (-rs) Tj /F1 10 Tf ( aka ) Tj /F4 10 Tf (--run-script) Tj /F1 10 Tf ( option passed to the) Tj T* 0 Tw .164651 Tw (compiler reduces all compiler diagnostic output and executes the ) Tj /F4 10 Tf (main) Tj /F1 10 Tf ( function in compile time. No output) Tj T* 0 Tw 2.662339 Tw (binary is produced in such a case. Folowinfg example can be directly executed in ) Tj /F4 10 Tf (bash) Tj /F1 10 Tf ( as it was) Tj T* 0 Tw (executable.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 497.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F3 10 Tf 12 TL (#!/usr/local/bin/blc -rs) Tj T*  T* (main :: fn \(\) s32 {) Tj T* (    print\("Hello!!!\\n"\);) Tj T* (    return 0;) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 452.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ chmod +x main.bl) Tj T* ($ ./main.bl) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 408.6236 cm
q
BT 1 0 0 1 0 26 Tm .978651 Tw 12 TL /F1 10 Tf 0 0 0 rg (All additional arguments after ) Tj /F4 10 Tf (-rs) Tj /F1 10 Tf ( option are automaticaly forwarded into the executed script and can be) Tj T* 0 Tw 2.131085 Tw (accessed via ) Tj /F4 10 Tf (command_line_arguments) Tj /F1 10 Tf ( builtin variable during compile-time execution. First argument) Tj T* 0 Tw (\(index 0\) contains the script name everytime.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 375.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Automatic Documentation) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 309.6236 cm
q
BT 1 0 0 1 0 50 Tm 4.336136 Tw 12 TL /F1 10 Tf 0 0 0 rg (Integrated self-ducumentation tool can be used to generate ) Tj 0 0 .501961 rg (RST) Tj 0 0 0 rg ( files from Biscuit source files) Tj T* 0 Tw 1.542485 Tw (automatically. Documentation text can be attached to file by ) Tj /F4 10 Tf (//!) Tj /F1 10 Tf ( comment prefix or to declaration by ) Tj /F4 10 Tf (///) Tj /F1 10 Tf  T* 0 Tw -0.057349 Tw (comment prefix. Such comments will be recognised by the compiler and attached to propper declaration or) Tj T* 0 Tw .14528 Tw (file compilation unit. Use ) Tj /F4 10 Tf (-docs) Tj /F1 10 Tf ( compiler flag followed by a list of files you want to generate documentation) Tj T* 0 Tw (for. Documentation output will be written to ) Tj /F4 10 Tf (out) Tj /F1 10 Tf ( directory into the current working directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 279.6236 cm
q
BT 1 0 0 1 0 14 Tm .904983 Tw 12 TL /F1 10 Tf 0 0 0 rg (Use marker ) Tj /F3 10 Tf (@INCOMPLETE) Tj /F1 10 Tf ( in documentation comment to mark it as incomplete. Compiler will warn you) Tj T* 0 Tw (about symbols with incomplete documentation during generation.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 261.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Documentation rules:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 255.6236 cm
Q
q
1 0 0 1 62.69291 255.6236 cm
Q
q
1 0 0 1 62.69291 231.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.086235 Tw (Only files listed in compiler input are used as generation input \(no loaded or imported files are) Tj T* 0 Tw (included\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 225.6236 cm
Q
q
1 0 0 1 62.69291 213.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Documentation is generated from AST; only parsing is required, after that compiler exits.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 207.6236 cm
Q
q
1 0 0 1 62.69291 183.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.253735 Tw 12 TL /F1 10 Tf 0 0 0 rg (When ) Tj /F4 10 Tf (out) Tj /F1 10 Tf ( directory already exists, compiler will only append new files and override old in case of) Tj T* 0 Tw (collision.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 177.6236 cm
Q
q
1 0 0 1 62.69291 165.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Only global and non-private declarations can be documented.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 159.6236 cm
Q
q
1 0 0 1 62.69291 147.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Declaration name and declaration itself are included automatically.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 141.6236 cm
Q
q
1 0 0 1 62.69291 117.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .177485 Tw 12 TL /F1 10 Tf 0 0 0 rg (Separate ) Tj /F4 10 Tf (rst) Tj /F1 10 Tf ( file is produced for every declaration in sub-directory named after file in which symbol is) Tj T* 0 Tw (declared.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 117.6236 cm
Q
q
1 0 0 1 62.69291 99.62362 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Example of documented ) Tj /F4 10 Tf (print) Tj /F1 10 Tf ( function:) Tj T* ET
Q
Q
 
endstream
endobj
143 0 obj
<<
/Length 5621
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 513.1802 cm
q
q
.908526 0 0 .908526 0 0 cm
q
1 0 0 1 6.6 7.264512 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 516 276 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 254 Tm /F3 10 Tf 12 TL (/// Write string to the standart output \(stdout\). Format string can include) Tj T* (/// format specifiers `%` which are replaced by corresponding argument value) Tj T* (/// passed in `args`. Value-string conversion is done automatically, we can) Tj T* (/// pass values of any type as an arguments, even structures or arrays.) Tj T* (///) Tj T* (/// The `print` function accepts C-like escape sequences as `\\n`, `\\t`, `\\r`, etc.) Tj T* (///) Tj T* (/// Pointers to :ref:`Error` are dereferenced automatically; so the `print` function) Tj T* (/// can print out errors directly.) Tj T* (///) Tj T* (/// Count of printed bytes is returned.) Tj T* (///) Tj T* (/// Example) Tj T* (/// -------) Tj T* (/// .. literalinclude:: /examples/docs/007.bl) Tj T* (///    :language: bl) Tj T* (print :: fn \(format: string, args: ...\) s32 {) Tj T* (    buf: [PRINT_MAX_LENGTH]u8 #noinit;) Tj T* (    w := _print_impl\(buf, format, args\);) Tj T* (    __os_write\(OS_STDOUT, buf.ptr, auto w\);) Tj T* (    return w;) Tj T* (};) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 493.1802 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Execution of ) Tj /F4 10 Tf (blc -docs print.bl) Tj /F1 10 Tf ( will produce following output:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 198.2158 cm
q
q
.952737 0 0 .952737 0 0 cm
q
1 0 0 1 6.6 6.927412 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 300 re B*
Q
q
.960784 .960784 .862745 rg
n 0 276 12 12 re f*
.960784 .960784 .862745 rg
n 18 276 42 12 re f*
.960784 .960784 .862745 rg
n 0 252 30 12 re f*
.960784 .960784 .862745 rg
n 0 240 30 12 re f*
.960784 .960784 .862745 rg
n 0 228 12 12 re f*
.960784 .960784 .862745 rg
n 18 228 60 12 re f*
.960784 .960784 .862745 rg
n 78 228 12 12 re f*
.960784 .960784 .862745 rg
n 96 228 12 12 re f*
.960784 .960784 .862745 rg
n 0 204 282 12 re f*
.960784 .960784 .862745 rg
n 0 192 0 12 re f*
.960784 .960784 .862745 rg
n 108 168 18 12 re f*
.960784 .960784 .862745 rg
n 60 156 36 12 re f*
.960784 .960784 .862745 rg
n 24 120 42 12 re f*
.960784 .960784 .862745 rg
n 336 120 24 12 re f*
.960784 .960784 .862745 rg
n 372 120 24 12 re f*
.960784 .960784 .862745 rg
n 408 120 24 12 re f*
.960784 .960784 .862745 rg
n 72 96 30 12 re f*
.960784 .960784 .862745 rg
n 102 96 42 12 re f*
.960784 .960784 .862745 rg
n 384 96 42 12 re f*
.960784 .960784 .862745 rg
n 0 36 42 12 re f*
.960784 .960784 .862745 rg
n 0 24 42 12 re f*
.960784 .960784 .862745 rg
n 0 12 12 12 re f*
.960784 .960784 .862745 rg
n 18 12 84 12 re f*
.960784 .960784 .862745 rg
n 102 12 12 12 re f*
.960784 .960784 .862745 rg
n 0 0 60 12 re f*
BT 1 0 0 1 0 278 Tm 12 TL /F3 10 Tf 0 0 0 rg (..) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (_print:) Tj /F3 10 Tf 0 0 0 rg  T*  T* /F6 10 Tf 0 0 .501961 rg (print) Tj /F3 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 0 .501961 rg (=====) Tj /F3 10 Tf 0 0 0 rg  T* (..) Tj ( ) Tj /F6 10 Tf .666667 .133333 1 rg (code-block) Tj /F3 10 Tf 0 0 0 rg (::) Tj ( ) Tj /F6 10 Tf 0 .501961 0 rg (bl) Tj /F3 10 Tf 0 0 0 rg  T*  T* .729412 .129412 .129412 rg (    print :: fn \(format: string, args: ...\) s32) Tj T*  T* 0 0 0 rg (Write string to the standart output \(stdout\). Format string can include) Tj T* (format specifiers ) Tj .098039 .090196 .486275 rg (`%`) Tj 0 0 0 rg ( which are replaced by corresponding argument value) Tj T* (passed in ) Tj .098039 .090196 .486275 rg (`args`) Tj 0 0 0 rg (. Value-string conversion is done automatically, we can) Tj T* (pass values of any type as an arguments, even structures or arrays.) Tj T*  T* (The ) Tj .098039 .090196 .486275 rg (`print`) Tj 0 0 0 rg ( function accepts C-like escape sequences as ) Tj .098039 .090196 .486275 rg (`\\n`) Tj 0 0 0 rg (, ) Tj .098039 .090196 .486275 rg (`\\t`) Tj 0 0 0 rg (, ) Tj .098039 .090196 .486275 rg (`\\r`) Tj 0 0 0 rg (, etc.) Tj T*  T* (Pointers to ) Tj .490196 .564706 .160784 rg (:ref:) Tj .098039 .090196 .486275 rg (`Error`) Tj 0 0 0 rg ( are dereferenced automatically; so the ) Tj .098039 .090196 .486275 rg (`print`) Tj 0 0 0 rg ( function) Tj T* (can print out errors directly.) Tj T*  T* (Count of printed bytes is returned.) Tj T*  T* /F6 10 Tf 0 0 .501961 rg (Example) Tj /F3 10 Tf 0 0 0 rg  T* /F6 10 Tf 0 0 .501961 rg (-------) Tj /F3 10 Tf 0 0 0 rg  T* (..) Tj ( ) Tj /F6 10 Tf .666667 .133333 1 rg (literalinclude) Tj /F3 10 Tf 0 0 0 rg (::) Tj ( /examples/docs/007.bl) Tj T* /F6 10 Tf 0 0 1 rg (:language:) Tj /F3 10 Tf 0 0 0 rg ( bl) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 165.2158 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Use BL code from C/C++) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 123.2158 cm
q
BT 1 0 0 1 0 26 Tm .363735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Since BL compiler supports compilation into shared library, ABI compatible with C, BL code can be easily) Tj T* 0 Tw -0.08564 Tw (called from C/C++ program. Use ) Tj /F3 10 Tf (#export) Tj /F1 10 Tf ( to mark function to be exported from library and ) Tj /F3 10 Tf (--shared) Tj /F1 10 Tf ( flag) Tj T* 0 Tw (to create shared object \() Tj /F3 10 Tf (so) Tj /F1 10 Tf ( on Linux\). See example bellow on Linux.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 78.01584 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg (// Content of my-lib.bl) Tj T* (my_bl_function :: fn \(count: s32\) #export {) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
144 0 obj
<<
/Length 4440
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 703.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
BT 1 0 0 1 0 38 Tm 12 TL /F3 10 Tf 0 0 0 rg (    loop i := 0; i ) Tj (<) Tj ( count; i += 1 {) Tj T* (        print\("Hello from foo library!!!\\n"\);) Tj T* (    }) Tj T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 598.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 96 re B*
Q
q
.960784 .960784 .862745 rg
n 0 72 120 12 re f*
.960784 .960784 .862745 rg
n 0 60 24 12 re f*
.960784 .960784 .862745 rg
n 30 60 84 12 re f*
.960784 .960784 .862745 rg
n 114 60 6 12 re f*
.960784 .960784 .862745 rg
n 120 60 18 12 re f*
.960784 .960784 .862745 rg
n 144 60 30 12 re f*
.960784 .960784 .862745 rg
n 174 60 12 12 re f*
.960784 .960784 .862745 rg
n 0 36 18 12 re f*
.960784 .960784 .862745 rg
n 24 36 24 12 re f*
.960784 .960784 .862745 rg
n 48 36 6 12 re f*
.960784 .960784 .862745 rg
n 54 36 18 12 re f*
.960784 .960784 .862745 rg
n 78 36 24 12 re f*
.960784 .960784 .862745 rg
n 102 36 6 12 re f*
.960784 .960784 .862745 rg
n 114 36 24 12 re f*
.960784 .960784 .862745 rg
n 144 36 6 12 re f*
.960784 .960784 .862745 rg
n 150 36 24 12 re f*
.960784 .960784 .862745 rg
n 174 36 18 12 re f*
.960784 .960784 .862745 rg
n 198 36 6 12 re f*
.960784 .960784 .862745 rg
n 24 24 84 12 re f*
.960784 .960784 .862745 rg
n 108 24 6 12 re f*
.960784 .960784 .862745 rg
n 114 24 18 12 re f*
.960784 .960784 .862745 rg
n 132 24 12 12 re f*
.960784 .960784 .862745 rg
n 24 12 36 12 re f*
.960784 .960784 .862745 rg
n 66 12 6 12 re f*
.960784 .960784 .862745 rg
n 72 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 74 Tm 12 TL /F7 10 Tf .25098 .501961 .501961 rg (// Content of main.c) Tj T* /F3 10 Tf .690196 0 .25098 rg (void) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (my_bl_function) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj (count) Tj (\);) Tj  T*  T* .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (main) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj (argc) Tj (,) Tj ( ) Tj .690196 0 .25098 rg (char) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (*) Tj 0 0 0 rg (argv) Tj ([]\)) Tj ( ) Tj ({) Tj  T* (    ) Tj (my_bl_function) Tj (\() Tj .4 .4 .4 rg (100) Tj 0 0 0 rg (\);) Tj  T* (    ) Tj /F6 10 Tf 0 .501961 0 rg (return) Tj /F3 10 Tf 0 0 0 rg ( ) Tj .4 .4 .4 rg (0) Tj 0 0 0 rg (;) Tj  T* (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 541.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 48 re B*
Q
q
.960784 .960784 .862745 rg
n 78 12 24 12 re f*
.960784 .960784 .862745 rg
n 12 0 36 12 re f*
.960784 .960784 .862745 rg
n 54 0 90 12 re f*
.960784 .960784 .862745 rg
n 144 0 6 12 re f*
.960784 .960784 .862745 rg
n 162 0 6 12 re f*
.960784 .960784 .862745 rg
n 168 0 6 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ blc --shared my-lib.bl) Tj T* ($ gcc -L. -o ) Tj 0 .501961 0 rg (test) Tj 0 0 0 rg ( main.c -lout) Tj T* ($ ) Tj 0 .501961 0 rg (export) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (LD_LIBRARY_PATH) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (. ) Tj .4 .4 .4 rg (&) Tj (&) Tj 0 0 0 rg ( ./test) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 508.4236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Builtin variables) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 490.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of builtin variables set by compiler.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 484.4236 cm
Q
q
1 0 0 1 62.69291 484.4236 cm
Q
q
1 0 0 1 62.69291 472.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (IS_DEBUG) Tj /F1 10 Tf ( Is bool immutable variable set to true when assembly is running in debug mode.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 466.4236 cm
Q
q
1 0 0 1 62.69291 442.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.374597 Tw 12 TL /F3 10 Tf 0 0 0 rg (IS_COMPTIME_RUN) Tj /F1 10 Tf ( Is bool immutable variable set to true when assembly is executed in compile) Tj T* 0 Tw (time.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 442.4236 cm
Q
 
endstream
endobj
145 0 obj
<<
/Nums [ 0 146 0 R 1 147 0 R 2 148 0 R 3 149 0 R 4 150 0 R 
  5 151 0 R 6 152 0 R 7 153 0 R 8 154 0 R 9 155 0 R 
  10 156 0 R 11 157 0 R 12 158 0 R 13 159 0 R 14 160 0 R 
  15 161 0 R 16 162 0 R 17 163 0 R 18 164 0 R 19 165 0 R 
  20 166 0 R 21 167 0 R 22 168 0 R 23 169 0 R 24 170 0 R 
  25 171 0 R 26 172 0 R 27 173 0 R 28 174 0 R ]
>>
endobj
146 0 obj
<<
/S /D /St 1
>>
endobj
147 0 obj
<<
/S /D /St 2
>>
endobj
148 0 obj
<<
/S /D /St 3
>>
endobj
149 0 obj
<<
/S /D /St 4
>>
endobj
150 0 obj
<<
/S /D /St 5
>>
endobj
151 0 obj
<<
/S /D /St 6
>>
endobj
152 0 obj
<<
/S /D /St 7
>>
endobj
153 0 obj
<<
/S /D /St 8
>>
endobj
154 0 obj
<<
/S /D /St 9
>>
endobj
155 0 obj
<<
/S /D /St 10
>>
endobj
156 0 obj
<<
/S /D /St 11
>>
endobj
157 0 obj
<<
/S /D /St 12
>>
endobj
158 0 obj
<<
/S /D /St 13
>>
endobj
159 0 obj
<<
/S /D /St 14
>>
endobj
160 0 obj
<<
/S /D /St 15
>>
endobj
161 0 obj
<<
/S /D /St 16
>>
endobj
162 0 obj
<<
/S /D /St 17
>>
endobj
163 0 obj
<<
/S /D /St 18
>>
endobj
164 0 obj
<<
/S /D /St 19
>>
endobj
165 0 obj
<<
/S /D /St 20
>>
endobj
166 0 obj
<<
/S /D /St 21
>>
endobj
167 0 obj
<<
/S /D /St 22
>>
endobj
168 0 obj
<<
/S /D /St 23
>>
endobj
169 0 obj
<<
/S /D /St 24
>>
endobj
170 0 obj
<<
/S /D /St 25
>>
endobj
171 0 obj
<<
/S /D /St 26
>>
endobj
172 0 obj
<<
/S /D /St 27
>>
endobj
173 0 obj
<<
/S /D /St 28
>>
endobj
174 0 obj
<<
/S /D /St 29
>>
endobj
xref
0 175
0000000000 65535 f 
0000000073 00000 n 
0000000169 00000 n 
0000000276 00000 n 
0000000388 00000 n 
0000000493 00000 n 
0000000608 00000 n 
0000000815 00000 n 
0000001022 00000 n 
0000001229 00000 n 
0000001348 00000 n 
0000001556 00000 n 
0000001764 00000 n 
0000001972 00000 n 
0000002180 00000 n 
0000002388 00000 n 
0000002596 00000 n 
0000002804 00000 n 
0000003012 00000 n 
0000003220 00000 n 
0000003428 00000 n 
0000003636 00000 n 
0000003844 00000 n 
0000004052 00000 n 
0000004260 00000 n 
0000004468 00000 n 
0000004676 00000 n 
0000004884 00000 n 
0000005092 00000 n 
0000005300 00000 n 
0000005508 00000 n 
0000005716 00000 n 
0000005924 00000 n 
0000006132 00000 n 
0000006330 00000 n 
0000006557 00000 n 
0000006668 00000 n 
0000006876 00000 n 
0000006990 00000 n 
0000007198 00000 n 
0000007306 00000 n 
0000007582 00000 n 
0000007658 00000 n 
0000007812 00000 n 
0000007924 00000 n 
0000008055 00000 n 
0000008182 00000 n 
0000008299 00000 n 
0000008460 00000 n 
0000008559 00000 n 
0000008723 00000 n 
0000008846 00000 n 
0000008967 00000 n 
0000009086 00000 n 
0000009206 00000 n 
0000009326 00000 n 
0000009450 00000 n 
0000009570 00000 n 
0000009688 00000 n 
0000009807 00000 n 
0000009935 00000 n 
0000010063 00000 n 
0000010177 00000 n 
0000010339 00000 n 
0000010456 00000 n 
0000010574 00000 n 
0000010737 00000 n 
0000010845 00000 n 
0000010965 00000 n 
0000011087 00000 n 
0000011198 00000 n 
0000011367 00000 n 
0000011474 00000 n 
0000011596 00000 n 
0000011719 00000 n 
0000011840 00000 n 
0000011962 00000 n 
0000012084 00000 n 
0000012208 00000 n 
0000012328 00000 n 
0000012448 00000 n 
0000012568 00000 n 
0000012690 00000 n 
0000012819 00000 n 
0000012956 00000 n 
0000013076 00000 n 
0000013197 00000 n 
0000013324 00000 n 
0000013444 00000 n 
0000013556 00000 n 
0000013679 00000 n 
0000013813 00000 n 
0000013976 00000 n 
0000014092 00000 n 
0000014225 00000 n 
0000014356 00000 n 
0000014508 00000 n 
0000014637 00000 n 
0000014774 00000 n 
0000014918 00000 n 
0000015042 00000 n 
0000015164 00000 n 
0000015291 00000 n 
0000015413 00000 n 
0000015549 00000 n 
0000015673 00000 n 
0000015806 00000 n 
0000015937 00000 n 
0000016114 00000 n 
0000016234 00000 n 
0000016364 00000 n 
0000016494 00000 n 
0000016623 00000 n 
0000016764 00000 n 
0000016904 00000 n 
0000017025 00000 n 
0000017287 00000 n 
0000023006 00000 n 
0000029387 00000 n 
0000033282 00000 n 
0000037300 00000 n 
0000041207 00000 n 
0000043485 00000 n 
0000046873 00000 n 
0000049871 00000 n 
0000053591 00000 n 
0000057372 00000 n 
0000068078 00000 n 
0000074248 00000 n 
0000079134 00000 n 
0000083179 00000 n 
0000087047 00000 n 
0000090737 00000 n 
0000093772 00000 n 
0000096879 00000 n 
0000099851 00000 n 
0000103268 00000 n 
0000106193 00000 n 
0000108972 00000 n 
0000112208 00000 n 
0000115687 00000 n 
0000122320 00000 n 
0000125027 00000 n 
0000131842 00000 n 
0000137516 00000 n 
0000142009 00000 n 
0000142366 00000 n 
0000142401 00000 n 
0000142436 00000 n 
0000142471 00000 n 
0000142506 00000 n 
0000142541 00000 n 
0000142576 00000 n 
0000142611 00000 n 
0000142646 00000 n 
0000142681 00000 n 
0000142717 00000 n 
0000142753 00000 n 
0000142789 00000 n 
0000142825 00000 n 
0000142861 00000 n 
0000142897 00000 n 
0000142933 00000 n 
0000142969 00000 n 
0000143005 00000 n 
0000143041 00000 n 
0000143077 00000 n 
0000143113 00000 n 
0000143149 00000 n 
0000143185 00000 n 
0000143221 00000 n 
0000143257 00000 n 
0000143293 00000 n 
0000143329 00000 n 
0000143365 00000 n 
trailer
<<
/ID 
[<587c27be3fb1baddc9a0d1526170a198><587c27be3fb1baddc9a0d1526170a198>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 40 0 R
/Root 39 0 R
/Size 175
>>
startxref
143401
%%EOF
